{
	"scope": "source.mkb",

	"completions": 
	[
		{ "trigger": "IF\t…ENDIF", "contents": "IF(${1:<CONDITION>});\n    $2\nENDIF;\n$3"},
		{ "trigger": "IF\t…ELSEIF…ENDIF", "contents": "IF(${1:<CONDITION>});\n    $2\nELSEIF(${3:<CONDITION>});\n    $4\nENDIF;\n$5"},
		{ "trigger": "IF\t…ELSE…ENDIF", "contents": "IF(${1:<CONDITION>});\n    $2\nELSE;\n    $3\nENDIF;\n$4"},
		{ "trigger": "IF\t…ELSEIF…ELSE…ENDIF", "contents": "IF(${1:<CONDITION>});\n    $2\nELSEIF(${3:<CONDITION>});\n    $4\nELSE;\n    $5\nENDIF;\n$6"},
		{ "trigger": "IFBEGINSWITH\t…ENDIF", "contents": "IFBEGINSWITH(${1:<HAYSTACK>},${2:<NEEDLE>});\n    $3\nENDIF;\n$4"},
		{ "trigger": "IFBEGINSWITH\t…ELSEIF…ENDIF", "contents": "IFBEGINSWITH(${1:<HAYSTACK>},${2:<NEEDLE>});\n    $3\nELSEIF(${4:<CONDITION>});\n    $5\nENDIF;\n$6"},
		{ "trigger": "IFBEGINSWITH\t…ELSE…ENDIF", "contents": "IFBEGINSWITH(${1:<HAYSTACK>},${2:<NEEDLE>});\n    $3\nELSE;\n    $4\nENDIF;\n$5"},
		{ "trigger": "IFBEGINSWITH\t…ELSEIF…ELSE…ENDIF", "contents": "IFBEGINSWITH(${1:<HAYSTACK>},${2:<NEEDLE>});\n    $3\nELSEIF(${4:<CONDITION>});\n    $5\nELSE;\n    $6\nENDIF;\n$7"},
		{ "trigger": "IFCONTAINS\t…ENDIF", "contents": "IFCONTAINS(${1:<HAYSTACK>},${2:<NEEDLE>});\n    $3\nENDIF;\n$4"},
		{ "trigger": "IFCONTAINS\t…ELSEIF…ENDIF", "contents": "IFCONTAINS(${1:<HAYSTACK>},${2:<NEEDLE>});\n    $3\nELSEIF(${4:<CONDITION>});\n    $5\nENDIF;\n$6"},
		{ "trigger": "IFCONTAINS\t…ELSE…ENDIF", "contents": "IFCONTAINS(${1:<HAYSTACK>},${2:<NEEDLE>});\n    $3\nELSE;\n    $4\nENDIF;\n$5"},
		{ "trigger": "IFCONTAINS\t…ELSEIF…ELSE…ENDIF", "contents": "IFCONTAINS(${1:<HAYSTACK>},${2:<NEEDLE>});\n    $3\nELSEIF(${4:<CONDITION>});\n    $5\nELSE;\n    $6\nENDIF;\n$7"},
		{ "trigger": "IFENDSWITH\t…ENDIF", "contents": "IFENDSWITH(${1:<HAYSTACK>},${2:<NEEDLE>});\n    $3\nENDIF;\n$4"},
		{ "trigger": "IFENDSWITH\t…ELSEIF…ENDIF", "contents": "IFENDSWITH(${1:<HAYSTACK>},${2:<NEEDLE>});\n    $3\nELSEIF(${4:<CONDITION>});\n    $5\nENDIF;\n$6"},
		{ "trigger": "IFENDSWITH\t…ELSE…ENDIF", "contents": "IFENDSWITH(${1:<HAYSTACK>},${2:<NEEDLE>});\n    $3\nELSE;\n    $4\nENDIF;\n$5"},
		{ "trigger": "IFENDSWITH\t…ELSEIF…ELSE…ENDIF", "contents": "IFENDSWITH(${1:<HAYSTACK>},${2:<NEEDLE>});\n    $3\nELSEIF(${4:<CONDITION>});\n    $5\nELSE;\n    $6\nENDIF;\n$7"},
		{ "trigger": "IFMATCHES\t…ENDIF", "contents": "IFMATCHES(${1:<SUBJECT>},${2:<PATTERN>},${3:&[TARGET]},${4:[GROUP]});\n    $5\nENDIF;\n$6"},
		{ "trigger": "IFMATCHES\t…ELSEIF…ENDIF", "contents": "IFMATCHES(${1:<SUBJECT>},${2:<PATTERN>},${3:&[TARGET]},${4:[GROUP]});\n    $5\nELSEIF(${6:<CONDITION>});\n    $7\nENDIF;\n$8"},
		{ "trigger": "IFMATCHES\t…ELSE…ENDIF", "contents": "IFMATCHES(${1:<SUBJECT>},${2:<PATTERN>},${3:&[TARGET]},${4:[GROUP]});\n    $5\nELSE;\n    $6\nENDIF;\n$7"},
		{ "trigger": "IFMATCHES\t…ELSEIF…ELSE…ENDIF", "contents": "IFMATCHES(${1:<SUBJECT>},${2:<PATTERN>},${3:&[TARGET]},${4:[GROUP]});\n    $5\nELSEIF(${6:<CONDITION>});\n    $7\nELSE;\n    $8\nENDIF;\n$9"},

		{ "trigger": "FOR\tFOR(var,start,end)", "contents": "FOR(#${1:<VAR>},${2:<START>},${3:<END>});\n    $4\nNEXT;\n$5"},
		{ "trigger": "FOR\tFOR(var = start to end)", "contents": "FOR(#${1:<VAR>} = ${2:<START>} TO ${3:<END>});\n    $4\nNEXT;\n$5"},
		{ "trigger": "FOR\tFOR(var = start to end step)", "contents": "FOR(#${1:<VAR>} = ${2:<START>} TO ${3:<END>} STEP ${4:<STEP>});\n    $5\nNEXT;\n$6"},
		{ "trigger": "FOREACH\tFOREACH(iterator)", "contents": "FOREACH(${1:<ITERATOR>});\n    $2\nNEXT;\n$3"},
		{ "trigger": "FOREACH\tFOREACH(array,content,index)", "contents": "FOREACH(${1:<&ARRAY>}[],${2:<&CONTENT>},#${3:[INDEX]});\n    $4\nNEXT;\n$5"},
		{ "trigger": "FOREACH\tFOREACH(array as content)", "contents": "FOREACH(${1:<&ARRAY>}[] AS &${2:<CONTENT>});\n    $3\nNEXT;\n$4"},
		{ "trigger": "FOREACH\tFOREACH(array as index => content)", "contents": "FOREACH(${1:<&ARRAY>}[] AS #${2:<INDEX>} => ${3:<&CONTENT>});\n    $4\nNEXT;\n$5"},
		{ "trigger": "DO\t…LOOP", "contents": "DO(${1:[COUNT]});\n    $2\nLOOP;$3"},
		{ "trigger": "DO\t…WHILE", "contents": "DO(${1:[COUNT]});\n    $2\nWHILE;$3"},
		{ "trigger": "DO\t…UNTIL", "contents": "DO(${1:[COUNT]});\n    $2\nUNTIL;$3"},

		{ "trigger": "ELSE\tThe actions following this action will only be executed if no if-clause before evaluated to true", "contents": "ELSE;\n    $1"},
		{ "trigger": "ELSEIF\tThe actions following this action will only be executed when the condition evaluates to true and no if-clause before evaluated to true", "contents": "ELSEIF(${1:<CONDITION>});\n    $2"},
		{ "trigger": "ENDIF\tEnds an if-clause", "contents": "ENDIF;\n$1"},

		{ "trigger": "LOOP\tCloses a do loop", "contents": "LOOP;\n$1"},
		{ "trigger": "WHILE\tExits do loop if condition is not met", "contents": "WHILE(${1:<CONDITION>});\n$2"},
		{ "trigger": "UNTIL\tExits do loop if condition is met", "contents": "UNTIL(${1:<CONDITION>});\n$2"},

		{ "trigger": "UNSAFE\t…ENDUNSAFE", "contents": "UNSAFE(${1:<EXECUTIONS>});\n    $2\nENDUNSAFE;\n$3"},
		{ "trigger": "ENDUNSAFE\tEnds an active unsafe block", "contents": "ENDUNSAFE;\n$1"},

		{ "trigger": "TRIM\tremoves whitespace", "contents": "&${1:RESULT} = TRIM(&${2:STRING});"},
		{ "trigger": "SHUFFLE\tshuffles an array", "contents": "SHUFFLE(${1:ARRAY[]});"},
		{ "trigger": "EVAL\tevaluates an expression", "contents": "${2:&${1:[RESULT]} = }EVAL(&${1:[RESULT]},${3:<EXPRESSION STRING>});"},
		{ "trigger": "CHAR\tputs set unicode value into &char", "contents": "CHAR(${1:<&CHAR>},${2:<DECIMAL UNICODE VALUE>});"},
		{ "trigger": "MOD\tevaluates num1 modulo num2", "contents": "MOD(#${1:<RESULT>},${2:<NUM1>},${3:<NUM2>});"},
		{ "trigger": "OLDNAME\tgets the past names of a user", "contents": "OLDNAME(&${1:<NAMES>}[],${2:<USERNAME>});"},
		{ "trigger": "READFILE\tgets the content of a file", "contents": "READFILE(&${1:<CONTENT>}[],${2:<FILENAME>});"},
		{ "trigger": "READFILE\treads file from path", "contents": "${2:&${1:<CONTENT>}[] = }READFILE(&${1:[CONTENT]}[],${3:<PATH>});"},
		{ "trigger": "UNIX\tgets the s/ms of current timestamp", "contents": "${2:#${1:[SECONDS]} = }UNIX(#${1:[SECONDS]},#${3:[MILLISECONDS]});"},
		{ "trigger": "ADDDOCS\tadds documentation for action", "contents": "ADDDOCS(${1:<NAME OF ENTRY>},${2:[USAGE]},${3:[DESCRIPTION]},${4:[RETURN TYPE]});"},
		{ "trigger": "LISTDOCS\treturns documentation of action", "contents": "&${1:DOCS}[] = LISTDOCS(${2:[NAME]});"},
		{ "trigger": "CALCYAWTO\t+ y argument for pitch", "contents": "CALCYAWTO(${1:<XPOS>},${2:<YPOS>},${3:<ZPOS>},#${4:[YAW]},#${5:[DIST]},#${6:[PITCH]});"},
		{ "trigger": "GETSLOTITEM\t+ nbt argument", "contents": "GETSLOTITEM(${1:<SLOTID>},&${2:<ITEMID>},#${3:[STACKSIZE]},#${4:[DATAVAR]},&${5:[NBT]});"},
		{ "trigger": "HTTP\tcreates a http request", "contents": "&${1:RESPONSE} = HTTP(${2:[GET|POST|PUT|DELETE]},${3:<URL>},${4:[OUTPUT STREAM]},${5:[HEADERS]});"},
		{ "trigger": "IFFILEEXISTS\tchecks if a file exists", "contents": "IFFILEEXISTS(${1:<PATH>},${2:[EXPRESSION IF FILE SHOULD BE CREATED IF MISSING]});"},
		{ "trigger": "MKDIR\tcreates directory", "contents": "MKDIR(${1:<PATH>});"},
		{ "trigger": "WRITEFILE\twrites array to file", "contents": "WRITEFILE(${1:<PATH>},&${2:<WRITEFILE>}[],${3:[APPEND]});"},
		{ "trigger": "GETJSONASARRAY\treturns json as key:value array", "contents": "&${1:ARRAY}[] = GETJSONASARRAY(${2:<JSON>},${3:[FORMAT]});"},
		{ "trigger": "GETJSONKEYS\tretuns list of the keys of json", "contents": "&${1:KEYS}[] = GETJSONKEYS(${2:<JSON>});"},
		{ "trigger": "JSONGET\tretuns object of key of specified json", "contents": "&${1:OBJECT} = JSONGET(${2:<JSON>},${3:<KEY>});"},
		{ "trigger": "SORT\tsorts the arrays synchronously", "contents": "SORT(${1:[ASC,DSC]},${2:<ARRAY>}[],${3:[ARRAY]}[]);"},
		{ "trigger": "TEAMMEMBERS\tlists scoreboard team members", "contents": "&${1:<MEMBERS/TEAMS>}[] = TEAMMEMBERS(${2:[TEAM]});"},
		{ "trigger": "SCORE\treturns score of player in objective", "contents": "<${1:&SCORE|&SCORES[]|&OBECTIVES[]}> = SCORE(${2:[OBJECTIVENAME]},${3:[PLAYERNAME]});"},
		{ "trigger": "COUNTDOWNTO\tcountdown to the specified datetime", "contents": "COUNTDOWNTO(${1:<UNTIL>});"},
		{ "trigger": "COUNTDOWNFROM\tcountdown from the specified time", "contents": "COUNTDOWNFROM(${1:<START>});"},
		{ "trigger": "COUNTUP\tcreates a countup from the current time", "contents": "COUNTUP();"},
		{ "trigger": "COUNTER\tcurrent value of the countdown or countup", "contents": "COUNTER(${1:<ID>});"},
		{ "trigger": "SECTOTIME\tformats the amount of seconds to time", "contents": "&${1:TIME} = SECTOTIME(${2:<SECONDS>},${3:[FORMAT]});"},
		{ "trigger": "GETCHESTNAME\treturns the name of the open chest", "contents": "&${1:NAME} = GETCHESTNAME;"},
		{ "trigger": "GETEMPTYSLOTS\treturns empty slots in inventory", "contents": "#${1:SLOTS} = GETEMPTYSLOTS(${2:[INCLUDE NON FULL SLOTS]});"},
		{ "trigger": "GETMOUSEITEM\tgets info about the held item", "contents": "${2:&${1:[ID]} = }GETMOUSEITEM(&${1:[ID]},#${3:[STACKSIZEVAR]},#${4:[DATAVAR]},&${5:[NBT]});"},
		{ "trigger": "GETSLOTINV\tgets slot containing item in inventory", "contents": "#${1:[SLOT]} = GETSLOTINV(${2:<ITEM>}:${3:[DAMAGE]},#${4:<IDVAR>},${5:[STARTFROMSLOTID]});"},
		{ "trigger": "IFINVISFULL\tchecks if inventory is full", "contents": "IFINVISFULL(${1:[ITEM]});"},
		{ "trigger": "IFENCHANTED\tchecks if the item is enchanted", "contents": "IFENCHANTED(${1:<SLOT>},&${2:[ITEM]},#${3:[STACKSIZE]},#${4:[DATAVAR]},&${5:[NBT]});"},
		{ "trigger": "SETSLOTITEM\tset the contents of a hotbar slot", "contents": "SETSLOTITEM(${1:<ITEM>}:${2:[DAMAGE]}${3:,<SLOT>},${4:[AMOUNT]},${5:[NBT]});"},
		{ "trigger": "GETFISHHOOK\tget the x, y and z (3dp) of the bobber", "contents": "${2:#${1:[YTOTAL]} = }GETFISHHOOK(#${3:[X]},#${4:[XPRECISION]},#${5:[Y]},#${6:[YPRECISION]},#${7:[Z]},#${8:[ZPRECISION]});"},
		{ "trigger": "NOTIFY\tcreates a system tray", "contents": "NOTIFY(${1:[TITLE]},${2:[MESSAGE]});"},
		{ "trigger": "GETSLOTITEMEXT\t+ argument for the itemname of item", "contents": "${2:&${1:[ITEMID]} = }GETSLOTITEMEXT(#${3:<SLOTID>},&${1:[ITEMID]},${4:[STACKSIZE]},${5:[DAMAGE]},${6:[ITEMNAME]});"},
		{ "trigger": "GETSLOTITEMNBT\t+ argument for the nbt of item", "contents": "${2:&${1:[ITEMID]} = }GETSLOTITEMNBT(#${3:<SLOTID>},${1:[ITEMID]},${4:[STACKSIZE]},${5:[DAMAGE]},${6:[NBT]});"},
		{ "trigger": "GETSLOTITEMENCHANTS\t+ argument for enchantments", "contents": "${2:&${1:[ITEMID]} = }GETSLOTITEMENCHANTS(#${3:<SLOTID>},${1:[ITEMID]},${4:[STACKSIZE]},${5:[DAMAGE]},${6:[ENCHANTS]});"},
		{ "trigger": "ISBOOLEAN\tchecks if the value is a boolean", "contents": "${2:[${1:BOOL}] = }ISBOOLEAN(${3:<STRING>},${1:[BOOL]});"},
		{ "trigger": "ISFLOAT\tchecks if the value is a float", "contents": "${2:${1:[BOOL]} = }ISFLOAT(${3:<STRING>},${1:[BOOL]});"},
		{ "trigger": "ISINTEGER\tchecks if the value is an integer", "contents": "${2:${1:[BOOL]} = }ISINTEGER(${3:<STRING>},${1:[BOOL]});"},
		{ "trigger": "ISJSONARRAY\tchecks if the value is a json array", "contents": "${2:${1:[BOOL]} = }ISJSONARRAY(${3:<STRING>},${1:[BOOL]});"},
		{ "trigger": "ISJSONOBJECT\tchecks if the value is a json object", "contents": "${2:${1:[BOOL]} = }ISJSONOBJECT(${3:<STRING>},${1:[BOOL]});"},
		{ "trigger": "ISJSONPRIMITIVE\tchecks if value isjson primitive", "contents": "${2:${1:[BOOL]} = }ISJSONPRIMITIVE(${3:<STRING>}${1:,[BOOL}]);"},
		{ "trigger": "ISNUMBER\tchecks if the value is a number", "contents": "${2:${1:[BOOL]} = }ISNUMBER(${3:<STRING>},${1:[BOOL]});"},
		{ "trigger": "ISSTRING\tchecks if the value is a string", "contents": "${2:${1:[BOOL]} = }ISSTRING(${3:<STRING>},${1:[BOOL]});"},
		{ "trigger": "JSONADD\tadds key and value to the json", "contents": "${2:&${1:[OUTPUT]} = }JSONADD(${3:<JSON>},${4:<KEY>},${5:<VALUE>},&${1:[OUTPUT]});"},
		{ "trigger": "JSONGET\tgets value of a key", "contents": "${2:&${1:[OUTPUT]} = }JSONGET(${3:<JSON>},${4:<KEY>},&${1:[OUTPUT]});"},
		{ "trigger": "JSONHAS\treturns if the json contains the key", "contents": "${2:${1:[BOOL]} = }JSONHAS(${3:<JSON>},${4:<KEY>},${1:[BOOL]});"},
		{ "trigger": "JSONREMOVE\tremoves a key-value-pair from the json", "contents": "${2:&${1:[OUTPUT]} = }JSONREMOVE(${3:<JSON>},${4:<KEY>},&${1:[OUTPUT]});"},
		{ "trigger": "GETJSONKEYS\treturns list of all keys of the json", "contents": "${2:&${1:[KEYS]} = }GETJSONKEYS(${3:<JSON>},&${1:[KEYS]}[]);"},
		{ "trigger": "GETJSONARRAY\treturns json as key:value array", "contents": "${2:&${1:[ARRAY]} = }GETJSONASARRAY(${3:<JSON>},${1:[ARRAY]}[]));"},
		{ "trigger": "JSONARRAYADD\tadds an element to the json array", "contents": "${2:&${1:[JSONARRAY]} = }JSONARRAYADD(${3:<JSONARRAY>},${4:<ELEMENT>},&${1:[JSONARRAY]});"},
		{ "trigger": "JSONARRAYGET\treturns the element of the jsonarray", "contents": "${2:&${1:[OUTPUT]} = }JSONARRAYGET(${3:<JSONARRAY>},${4:<INDEX>},&${1:[OUTPUT]});"},
		{ "trigger": "JSONARRAYSIZE\treturns the size of the jsonarray", "contents": "${2:#${1:[SIZE]} = }JSONARRAYSIZE(${3:<JSONARRAY>},#${1:[SIZE]});"},
		{ "trigger": "GETCLIPBOARD\treturns content of clipboard", "contents": "GETCLIPBOARD(&${1:[TEXT]});"},
		{ "trigger": "SETCLIPBOARD\tsets the clipboard text", "contents": "SETCLIPBOARD(${1:<TEXT>});"},
		{ "trigger": "HTTPGET\thttpget request to url", "contents": "${2:&${1:[RESPONSE]}[] = }HTTPGET(${3:<URL>},${4:<QUERY>},${5:<#STATUS>},&${1:[RESPONSE]});"},
		{ "trigger": "HTTPPOST\thttppost request to url with data", "contents": "${2:&${1:[RESPONSE]}[] = }HTTPPOST(${3:<URL>},${4:<DATA>},${5:<#STATUS>},&${1:[RESPONSE]});"},
		{ "trigger": "HTTPPUT\thttpput request to url with data", "contents": "${2:&${1:[RESPONSE]}[] = }HTTPPUT(${3:<URL>},${4:<DATA>},${5:<#STATUS>},&${1:[RESPONSE]});"},
		{ "trigger": "HTTPDELETE\trequest to specified url", "contents": "${2:&${1:[RESPONSE]}[] = }HTTPDELETE(${3:<URL>},${4:<QUERY>},${5:<#STATUS>},&${1:[RESPONSE]});"},
		{ "trigger": "URLENCODE\turl encodes the string", "contents": "${2:&${1:[OUTPUT]} = }URLENCODE(${3:<STRING>},&${1:[OUTPUT]});"},
		{ "trigger": "SETREQUESTHEADER\tsets header for next request", "contents": "SETREQUESTHEADER(&${1:<FIELD>},&${2:<VALUE>});"},
		{ "trigger": "GETHITSIGNTEXT\treturns signtext of hit sign", "contents": "${2:&${1:[OUTARRAY]}[] = }GETHITSIGNTEXT(&${1:[OUTARRAY]}[]);"},
		{ "trigger": "GETSIGNTEXT\treturns signtext at coordinates", "contents": "${2:&${1:[OUTARRAY]} = }GETSIGNTEXT(${3:<X>},${4:<Y>},${5:<Z>},&${1:[OUTARRAY]});"},
		{ "trigger": "SETSIGNTEXT\tset text of sign in SP", "contents": "SETSIGNTEXT(${1:<X>},${2:<Y>}${3:,<Z>},${4:<LINE1>},${5:<LINE2>},${6:<LINE3>},${7:<LINE4>});"},

		{ "trigger": "TEAMS\tIterates over all teams", "contents": "TEAMS"},
		{ "trigger": "OBJECTIVES\tIterates over all objectives", "contents": "OBJECTIVES"},
		{ "trigger": "SCORE\tIterates over all scores", "contents": "SCORE"},
		{ "trigger": "ACTIONS\tIterates over all actions", "contents": "ACTIONS"},
		{ "trigger": "EVENTS\tIterates over all events", "contents": "EVENTS"},
		{ "trigger": "ITERATORS\tIterates over all iterators", "contents": "ITERATORS"},

		{ "trigger": "PLAYERUUID\t(players iterator) UUID of the player with dashes", "contents": "%PLAYERUUID%"},
		{ "trigger": "PLAYERDISPLAYNAME\t(players iterator) Displayname of the player", "contents": "%PLAYERDISPLAYNAME%"},
		{ "trigger": "PLAYERTEAM\t(players iterator) Scoreboard team of the player as JSON", "contents": "%PLAYERTEAM%"},
		{ "trigger": "PLAYERPING\t(players iterator) Ping of the player", "contents": "%PLAYERPING%"},
		{ "trigger": "PLAYERISLEGACY\t(players iterator) Whether the player uses a legacy account", "contents": "%PLAYERISLEGACY%"},

		{ "trigger": "TEAMALLOWFRIENDLYFIRE\t(teams iterator) If the team allows friendly fire", "contents": "%TEAMALLOWFRIENDLYFIRE%"},
		{ "trigger": "TEAMCOLLISIONRULE\t(teams iterator) Collisionrule of the team", "contents": "%TEAMCOLLISIONRULE%"},
		{ "trigger": "TEAMCOLOR\t(teams iterator) Color of the team", "contents": "%TEAMCOLOR%"},
		{ "trigger": "TEAMDEATHMESSAGEVISIBILITY\t(teams iterator) Deathmessage visibility ruleing of the team", "contents": "%TEAMDEATHMESSAGEVISIBILITY%"},
		{ "trigger": "TEAMDISPLAYNAME\t(teams iterator) Displayname of the team", "contents": "%TEAMDISPLAYNAME%"},
		{ "trigger": "TEAMNAME\t(teams iterator) Name of the team", "contents": "%TEAMNAME%"},
		{ "trigger": "TEAMNAMETAGVISIBILITY\t(teams iterator) Nametag visibility of the team", "contents": "%TEAMNAMETAGVISIBILITY%"},
		{ "trigger": "TEAMSEEFRIENDLYINVISIBLES\t(teams iterator) Whether the team can see friendly invisibles", "contents": "%TEAMSEEFRIENDLYINVISIBLES%"},
		{ "trigger": "TEAMPREFIX\t(teams iterator) Prefix of the team", "contents": "%TEAMPREFIX%"},
		{ "trigger": "TEAMSUFFIX\t(teams iterator) Suffix of the team", "contents": "%TEAMSUFFIX%"},
		{ "trigger": "TEAMMEMBERS\t(teams iterator) Membernames of the team", "contents": "%TEAMMEMBERS%"},

		{ "trigger": "OBJECTIVECRITERIA\t(objectives iterator) Criteria of the objective", "contents": "%OBJECTIVECRITERIA%"},
		{ "trigger": "OBJECTIVEDISPLAYNAME\t(objectives iterator) Displayname of the objective", "contents": "%OBJECTIVEDISPLAYNAME%"},
		{ "trigger": "OBJECTIVENAME\t(objectives iterator) Name of the objective", "contents": "%OBJECTIVENAME%"},
		{ "trigger": "OBJECTIVERENDERTYPE\t(objectives iterator) Rendertype of the objective", "contents": "%OBJECTIVERENDERTYPE%"},
		
		{ "trigger": "SCOREOBJECTIVENAME\t(scores iterator) Name of the associated objective", "contents": "%SCOREOBJECTIVENAME%"},
		{ "trigger": "SCOREPLAYERNAME\t(scores iterator) Name of the owning player", "contents": "%SCOREPLAYERNAME%"},
		{ "trigger": "SCOREVALUE\t(scores iterator) Value of the score", "contents": "%SCOREVALUE%"},

		{ "trigger": "LATENCY\tPing of the player to the server", "contents": "%LATENCY%"},
		{ "trigger": "HACKED\tWhether all the functions of the module have been applied to the client", "contents": "%HACKED%"},
		{ "trigger": "MINECRAFTDIR\tFilepath of the current minecraft directory", "contents": "%MINECRAFTDIR%"},
		{ "trigger": "MACROSCONFIGDIR\t%MINECRAFTDIR%/.liteconfig/common/macros", "contents": "%MACROSCONFIGDIR%"},
		{ "trigger": "FILESEPERATOR\tDefault path seperator used by the system", "contents": "%FILESEPERATOR%"},
		{ "trigger": "MODULENEI\tReturns true if the module is installed", "contents": "%MODULENEI%"},
		{ "trigger": "MODULEHTTP\tReturns true if the module is installed", "contents": "%MODULEHTTP%"},
		{ "trigger": "MODULEJSON\tReturns true if the module is installed", "contents": "%MODULEJSON%"},
		{ "trigger": "MODULESIGNTEXT\tReturns true if the module is installed", "contents": "%MODULESIGNTEXT%"},
		{ "trigger": "MODULECLIPBOARD\tReturns true if the module is installed", "contents": "%MODULECLIPBOARD%"},
		{ "trigger": "ACTIONNAME\t(actions iterator) Action name", "contents": "%ACTIONNAME%"},
		{ "trigger": "ACTIONUSAGE\t(actions iterator) Action usage", "contents": "%ACTIONUSAGE%"},
		{ "trigger": "ACTIONRETURN\t(actions iterator) Action return", "contents": "%ACTIONRETURN%"},
		{ "trigger": "ACTIONDESCRIPTION\t(actions iterator) Action description", "contents": "%ACTIONDESCRIPTION%"},
		{ "trigger": "NEWEFFECT\t(onPotionEffect) New potion effect", "contents": "%NEWEFFECT%"},
		{ "trigger": "NEWEFFECTID\t(onPotionEffect) New potion effect id", "contents": "%NEWEFFECTID%"},
		{ "trigger": "NEWEFFECTNAME\t(onPotionEffect) New potion effect name", "contents": "%NEWEFFECTNAME%"},
		{ "trigger": "NEWEFFECTPOWER\t(onPotionEffect) New potion effect power", "contents": "%NEWEFFECTPOWER%"},
		{ "trigger": "NEWEFFECTTIME\t(onPotionEffect) New potion effect time", "contents": "%NEWEFFECTTIME%"},
		{ "trigger": "ITERATORNAME\t(iterators iterator) Iterator name", "contents": "%ITERATORNAME%"},
		{ "trigger": "EVENTNAME\t(events iterator) Event name", "contents": "%EVENTNAME%"},
		{ "trigger": "EVENTID\t(events iterator) Event id", "contents": "%EVENTID%"},
		{ "trigger": "EVENTHELP[]\t(events iterator) Event help", "contents": "%EVENTHELP%"},
		{ "trigger": "ACTIONNAME\t(actions iterator) Action name", "contents": "%ACTIONNAME%"},
		{ "trigger": "ACTIONUSAGE\t(actions iterator) Action usuage", "contents": "%ACTIONUSAGE%"},
		{ "trigger": "ACTIONRETURN\t(actions iterator) Action return", "contents": "%ACTIONRETURN%"},
		{ "trigger": "ACTIONDESCRIPTION\t(actions iterator) Action description", "contents": "%ACTIONDESCRIPTION%"},

		{ "trigger": "TRADES\tIterates over all trades", "contents": "TRADES"},
		{ "trigger": "TRADEBUYITEM\t(trades iterator)", "contents": "%TRADEBUYITEM%"},
		{ "trigger": "TRADEBUYITEMAMOUNT\t(trades iterator)", "contents": "%TRADEBUYITEMAMOUNT%"},
		{ "trigger": "TRADEBUYITEM2\t(trades iterator)", "contents": "%TRADEBUYITEM2%"},
		{ "trigger": "TRADEBUYITEM2AMOUNT\t(trades iterator)", "contents": "%TRADEBUYITEM2AMOUNT%"},
		{ "trigger": "TRADESELLITEM\t(trades iterator)", "contents": "%TRADESELLITEM%"},
		{ "trigger": "TRADESELLITEMAMOUNT\t(trades iterator)", "contents": "%TRADESELLITEMAMOUNT%"},
		{ "trigger": "TRADEUSES\t(trades iterator)", "contents": "%TRADEUSES%"},
		{ "trigger": "TRADEMAXUSES\t(trades iterator)", "contents": "%TRADEMAXUSES%"},

		{ "trigger": "FARHIT\tExtended reach %HIT%", "contents": "%FARHIT%"},
		{ "trigger": "FARHITID\tExtended reach %HITID%", "contents": "%FARHITID%"},
		{ "trigger": "FARHITDATA\tExtended reach %HITDATA%", "contents": "%FARHITDATA%"},
		{ "trigger": "FARHITNAME\tExtended reach %HITNAME%", "contents": "%FARHITNAME%"},
		{ "trigger": "FARHITSIDE\tExtended reach %HITSIDE%", "contents": "%FARHITSIDE%"},
		{ "trigger": "FARHITX\tExtended reach %HITX%", "contents": "%FARHITX%"},
		{ "trigger": "FARHITY\tExtended reach %HITY%", "contents": "%FARHITY%"},
		{ "trigger": "FARHITZ\tExtended reach %HITZ%", "contents": "%FARHITZ%"},
		{ "trigger": "FARHITUUID\tExtended reach %HITUUID%", "contents": "%FARHITUUID%"},
		{ "trigger": "FARHITDIST\tExtended reach %HITDIST%", "contents": "%FARHITDIST%"},
		{ "trigger": "MODULEFARHIT\tReturns true if the module is installed", "contents": "%MODULEFARHIT%"},

		{ "trigger": "SOUNDXPOSF\t(onSound) XPOS of sound as float", "contents": "%SOUNDXPOSF%"},
		{ "trigger": "SOUNDYPOSF\t(onSound) YPOS of sound as float", "contents": "%SOUNDYPOSF%"},
		{ "trigger": "SOUNDZPOSF\t(onSound) ZPOS of sound as float", "contents": "%SOUNDZPOSF%"},
		{ "trigger": "SOUNDXPOS\t(onSound) XPOS of sound as int", "contents": "%SOUNDXPOS%"},
		{ "trigger": "SOUNDYPOS\t(onSound) YPOS of sound as int", "contents": "%SOUNDYPOS%"},
		{ "trigger": "SOUNDZPOS\t(onSound) ZPOS of sound as int", "contents": "%SOUNDZPOS%"},
		{ "trigger": "SOUNDCANREPEAT\t(onSound) Whether the sound is able to repeat", "contents": "%SOUNDCANREPEAT%"},
		{ "trigger": "SOUNDATTENUATIONTYPE\t(onSound) Type of attenuation", "contents": "%SOUNDATTENUATIONTYPE%"},
		{ "trigger": "SOUNDCATEGORY\t(onSound) Category of sound", "contents": "%SOUNDCATEGORY%"},
		{ "trigger": "SOUNDPITCH\t(onSound) Pitch of the sound as float", "contents": "%SOUNDPITCH%"},
		{ "trigger": "SOUNDVOLUME\t(onSound) Volume of the sound as float", "contents": "%SOUNDVOLUME%"},
		{ "trigger": "SOUNDRESOURCE\t(onSound) Resourcepath of the sound", "contents": "%SOUNDRESOURCE%"},

		{ "trigger": "ENTITYTYPE\t(entities iterator) Type of the entity", "contents": "%ENTITYTYPE%"},
		{ "trigger": "ENTITYNAME\t(entities iterator) Name of the entity", "contents": "%ENTITYNAME%"},
		{ "trigger": "ENTITYUUID\t(entities iterator) UUID of the entity", "contents": "%ENTITYUUID%"},
		{ "trigger": "ENTITYXPOSF\t(entities iterator) X coordinates of the entity as float", "contents": "%ENTITYXPOSF%"},
		{ "trigger": "ENTITYYPOSF\t(entities iterator) Y coordinates of the entity as float", "contents": "%ENTITYYPOSF%"},
		{ "trigger": "ENTITYZPOSF\t(entities iterator) Z coordinates of the entity as float", "contents": "%ENTITYZPOSF%"},
		{ "trigger": "ENTITYXPOS\t(entities iterator) X coordinates of the entity as integer", "contents": "%ENTITYXPOS%"},
		{ "trigger": "ENTITYYPOS\t(entities iterator) Y coordinates of the entity as integer", "contents": "%ENTITYYPOS%"},
		{ "trigger": "ENTITYZPOS\t(entities iterator) Z coordinates of the entity as integer", "contents": "%ENTITYZPOS%"},
		{ "trigger": "ENTITYTAG\t(entities iterator) Tag of the entity", "contents": "%ENTITYTAG%"},
		{ "trigger": "ENTITYDX\t(entities iterator) X difference between the player and the entity", "contents": "%ENTITYDX%"},
		{ "trigger": "ENTITYDY\t(entities iterator) Y difference between the player and the entity", "contents": "%ENTITYDY%"},
		{ "trigger": "ENTITYDZ\t(entities iterator) Z difference between the player and the entity", "contents": "%ENTITYDZ%"},
		{ "trigger": "ENTITYDISTANCE\t(entities iterator) Distance between the player and the entity", "contents": "%ENTITYDZ%"},
		{ "trigger": "ENTITYPITCHFROMPLAYER\t(entities iterator) Pitch from the player to entity", "contents": "%ENTITYPITCHFROMPLAYER%"},
		{ "trigger": "ENTITYYAWFROMPLAYER\t(entities iterator) Yaw from the player to entity", "contents": "%ENTITYYAWFROMPLAYER%"},
		{ "trigger": "ENTITYNBT\t(entities iterator) NBT of the entity", "contents": "%ENTITYNBT%"},
		{ "trigger": "ENTITYNBTKEYS\t(entities iterator) Array of the keys of the NBT of the entity", "contents": "%ENTITYNBTKEYS%"},
		{ "trigger": "ENTITYNBT<key>\t(entities iterator) Quick way to access value of a specififc key", "contents": "%ENTITYNBT${1:<KEY>}%"},
		{ "trigger": "ENTITYDIR\t(entities iterator) Fuzzy direction in which the entity is", "contents": "%ENTITYDIR%"},
		{ "trigger": "ENTITYPITCH\t(entities iterator) Pitch where the entity is looking at", "contents": "%ENTITYPITCH%"},
		{ "trigger": "ENTITYYAW\t(entities iterator) Yaw where the entity is looking at", "contents": "%ENTITYYAW%"},
		{ "trigger": "ENTITYHEALTH\t(entities iterator) Health of the entity", "contents": "%ENTITYHEALTH%"},
		{ "trigger": "ENTITYMAXHEALTH\t(entities iterator) Max health of the entity", "contents": "%ENTITYMAXHEALTH%"},
		{ "trigger": "ENTITYISITEM\t(entities iterator) True if it's an dropped item", "contents": "%ENTITYISITEM%"},
		{ "trigger": "ENTITYITEMAGE\t(entities iterator) Age of the dropped item", "contents": "%ENTITYITEMAGE%"},
		{ "trigger": "ENTITYITEMOWNER\t(entities iterator) Owner of the dropped item", "contents": "%ENTITYITEMOWNER%"},
		{ "trigger": "ENTITYITEMTHROWER\t(entities iterator) Thrower of the dropped item", "contents": "%ENTITYITEMTHROWER%"},
		{ "trigger": "ENTITYITEMNAME\t(entities iterator) Localized name of the dropped item", "contents": "%ENTITYITEMTHROWER%"},
		{ "trigger": "ENTITYITEMUNLOCALIZEDNAME\t(entities iterator) Unlocalized name of the dropped item", "contents": "%ENTITYITEMUNLOCALIZEDNAME%"},
		{ "trigger": "ENTITYITEMCOUNT\t(entities iterator) Amount of the dropped item", "contents": "%ENTITYITEMCOUNT%"},
		{ "trigger": "ENTITYITEMDISPLAYNAME\t(entities iterator) Displayname of the dropped item", "contents": "%ENTITYITEMDISPLAYNAME%"},
		{ "trigger": "ENTITYITEMDAMAGE\t(entities iterator) Damage of the dropped item", "contents": "%ENTITYITEMDAMAGE%"},
		{ "trigger": "ENTITYITEMMAXDAMAGE\t(entities iterator) Max damage of the dropped item", "contents": "%ENTITYITEMMAXDAMAGE%"},
		{ "trigger": "ENTITYITEMMETADATA\t(entities iterator) Metadata of the dropped item", "contents": "%ENTITYITEMMETADATA%"},
		{ "trigger": "ENTITYITEMENCHANTED\t(entities iterator) True if the dropped item is enchanted", "contents": "%ENTITYITEMENCHANTED%"},
		{ "trigger": "ENTITYITEMSTACKABLE\t(entities iterator) True if the dropped item is stackable", "contents": "%ENTITYITEMSTACKABLE%"},
		{ "trigger": "ENTITYMAINHANDNAME\t(entities iterator) Name of the mainhand item", "contents": "%ENTITYMAINHANDNAME%"},
		{ "trigger": "ENTITYMAINHANDID\t(entities iterator) ID of the mainhand item", "contents": "%ENTITYMAINHANDID%"},
		{ "trigger": "ENTITYMAINHANDNID\t(entities iterator) Numerical ID of the mainhand item", "contents": "%ENTITYMAINHANDNID%"},
		{ "trigger": "ENTITYMAINHANDDAMAGE\t(entities iterator) Damage of the mainhand item", "contents": "%ENTITYMAINHANDDAMAGE%"},
		{ "trigger": "ENTITYMAINHANDCOUNT\t(entities iterator) Amount of the mainhand item", "contents": "%ENTITYMAINHANDCOUNT%"},
		{ "trigger": "ENTITYMAINHANDENCHANTMENTS\t(entities iterator) Enchantments of the mainhand item", "contents": "%ENTITYMAINHANDENCHANTMENTS%"},
		{ "trigger": "ENTITYOFFHANDNAME\t(entities iterator) Name of the offhand item", "contents": "%ENTITYOFFHANDNAME%"},
		{ "trigger": "ENTITYOFFHANDID\t(entities iterator) ID of the offhand item", "contents": "%ENTITYOFFHANDID%"},
		{ "trigger": "ENTITYOFFHANDNID\t(entities iterator) Numerical ID of the offhand item", "contents": "%ENTITYOFFHANDNID%"},
		{ "trigger": "ENTITYOFFHANDDAMAGE\t(entities iterator) Damage of the offhand item", "contents": "%ENTITYOFFHANDDAMAGE%"},
		{ "trigger": "ENTITYOFFHANDCOUNT\t(entities iterator) Amount of the offhand item", "contents": "%ENTITYOFFHANDCOUNT%"},
		{ "trigger": "ENTITYOFFHANDENCHANTMENTS\t(entities iterator) Enchantments of the offhand item", "contents": "%ENTITYOFFHANDENCHANTMENTS%"},
		{ "trigger": "ENTITYBOOTSNAME\t(entities iterator) Name of the boots item", "contents": "%ENTITYBOOTSNAME%"},
		{ "trigger": "ENTITYBOOTSID\t(entities iterator) ID of the boots item", "contents": "%ENTITYBOOTSID%"},
		{ "trigger": "ENTITYBOOTSNID\t(entities iterator) Numerical ID of the boots item", "contents": "%ENTITYBOOTSNID%"},
		{ "trigger": "ENTITYBOOTSDAMAGE\t(entities iterator) Damage of the boots item", "contents": "%ENTITYBOOTSDAMAGE%"},
		{ "trigger": "ENTITYBOOTSCOUNT\t(entities iterator) Amount of the boots item", "contents": "%ENTITYBOOTSCOUNT%"},
		{ "trigger": "ENTITYBOOTSENCHANTMENTS\t(entities iterator) Enchantments of the boots item", "contents": "%ENTITYBOOTSENCHANTMENTS%"},
		{ "trigger": "ENTITYLEGGINGSNAME\t(entities iterator) Name of the leggings item", "contents": "%ENTITYLEGGINGSNAME%"},
		{ "trigger": "ENTITYLEGGINGSID\t(entities iterator) ID of the leggings item", "contents": "%ENTITYLEGGINGSID%"},
		{ "trigger": "ENTITYLEGGINGSNID\t(entities iterator) Numerical ID of the leggings item", "contents": "%ENTITYLEGGINGSNID%"},
		{ "trigger": "ENTITYLEGGINGSDAMAGE\t(entities iterator) Damage of the leggings item", "contents": "%ENTITYLEGGINGSDAMAGE%"},
		{ "trigger": "ENTITYLEGGINGSCOUNT\t(entities iterator) Amount of the leggings item", "contents": "%ENTITYLEGGINGSCOUNT%"},
		{ "trigger": "ENTITYLEGGINGSENCHANTMENTS\t(entities iterator) Enchantments of the leggings item", "contents": "%ENTITYLEGGINGSENCHANTMENTS%"},
		{ "trigger": "ENTITYCHESTPLATENAME\t(entities iterator) Name of the chestplate item", "contents": "%ENTITYCHESTPLATENAME%"},
		{ "trigger": "ENTITYCHESTPLATEID\t(entities iterator) ID of the chestplate item", "contents": "%ENTITYCHESTPLATEID%"},
		{ "trigger": "ENTITYCHESTPLATENID\t(entities iterator) Numerical ID of the chestplate item", "contents": "%ENTITYCHESTPLATENID%"},
		{ "trigger": "ENTITYCHESTPLATEDAMAGE\t(entities iterator) Damage of the chestplate item", "contents": "%ENTITYCHESTPLATEDAMAGE%"},
		{ "trigger": "ENTITYCHESTPLATECOUNT\t(entities iterator) Amount of the chestplate item", "contents": "%ENTITYCHESTPLATECOUNT%"},
		{ "trigger": "ENTITYCHESTPLATEENCHANTMENTS\t(entities iterator) Enchantments of the chestplate item", "contents": "%ENTITYCHESTPLATEENCHANTMENTS%"},
		{ "trigger": "ENTITYHELMETNAME\t(entities iterator) Name of the helmet item", "contents": "%ENTITYHELMETNAME%"},
		{ "trigger": "ENTITYHELMETID\t(entities iterator) ID of the helmet item", "contents": "%ENTITYHELMETID%"},
		{ "trigger": "ENTITYHELMETNID\t(entities iterator) Numerical ID of the helmet item", "contents": "%ENTITYHELMETNID%"},
		{ "trigger": "ENTITYHELMETDAMAGE\t(entities iterator) Damage of the helmet item", "contents": "%ENTITYHELMETDAMAGE%"},
		{ "trigger": "ENTITYHELMETCOUNT\t(entities iterator) Amount of the helmet item", "contents": "%ENTITYHELMETCOUNT%"},
		{ "trigger": "ENTITYHELMETENCHANTMENTS\t(entities iterator) Enchantments of the helmet item", "contents": "%ENTITYHELMETENCHANTMENTS%"},

		{ "trigger": "GETDENSITY\tSearches for sugarcane in the given direction", "contents": "GETDENSITY(${1:[N/E/S/W]},#${2:<LIMIT_SEARCH>},&${3:<INITIAL_POSITION>},#${4:<BLOCKS_SEARCHED>},#${5:<SUGARCANE_FOUND>});"},
		{ "trigger": "GETITEMSTACKSIZE\tSearches the inventory, returns the stacksize", "contents": "#${1:STACKSIZE} = GETITEMSTACKSIZE(&${2:<ITEM_NAME>},#${3:[LIMIT_SEARCH]});"},
		{ "trigger": "GETPERCENTAGE\tDoes first divided by second times 100", "contents": "GETPERCENTAGE(#${1:[PERCENTAGE]},#${2:<FIRST>},#${3:<SECOND>});"},
		{ "trigger": "GETSLOTPOSITIONS\tSearches the inventory, returns the position", "contents": "GETSLOTPOSITIONS(&${1:<ITEM_NAME>},#${2:<RESULT_POSITION>},#${3:[RESULT_STACKSIZE]});"},

		{ "trigger": "PRESSBUTTON\t", "contents": "PRESSBUTTON(${1:<INDEX>});"},

		{ "trigger": "MOD\tModulus function (Yaku)", "contents": "MOD(${1:<#DIVIDENT>},${2:<#DIVISOR>});"},
		{ "trigger": "TRUNC\tReturns the integer part of the number", "contents": "TRUNC(${1:<#FLOAT>});"},
		{ "trigger": "ACKERMANN\tAckermann function implementation", "contents": "ACKERMANN(${1:<#M>},${2:<#N>});"},
		{ "trigger": "CALCSTACKS\tCalculates stacks", "contents": "CALCSTACKS(#${1:<ITEMS>},#${2:[STACKS]},#${3:[LEFTOVERS]});"},
		{ "trigger": "PICKMOD\tImproved original pick action", "contents": "PICKMOD(${1:[NAMESPACE]}:${2:<ITEMID>}:${3:[DAMAGE]},${4:[ADDINCREATIVE]});"},
		{ "trigger": "ANTIGHOST\tResolve ghost blocks issue", "contents": "ANTIGHOST;"},

		{ "trigger": "ALT\t(Pressed at start)", "contents": "%~ALT%"},
		{ "trigger": "CTRL\t(Pressed at start)", "contents": "%~CTRL%"},
		{ "trigger": "KEY_0\t(Pressed at start)", "contents": "%~KEY_0%"},
		{ "trigger": "KEY_1\t(Pressed at start)", "contents": "%~KEY_1%"},
		{ "trigger": "KEY_2\t(Pressed at start)", "contents": "%~KEY_2%"},
		{ "trigger": "KEY_3\t(Pressed at start)", "contents": "%~KEY_3%"},
		{ "trigger": "KEY_4\t(Pressed at start)", "contents": "%~KEY_4%"},
		{ "trigger": "KEY_5\t(Pressed at start)", "contents": "%~KEY_5%"},
		{ "trigger": "KEY_6\t(Pressed at start)", "contents": "%~KEY_6%"},
		{ "trigger": "KEY_7\t(Pressed at start)", "contents": "%~KEY_7%"},
		{ "trigger": "KEY_8\t(Pressed at start)", "contents": "%~KEY_8%"},
		{ "trigger": "KEY_9\t(Pressed at start)", "contents": "%~KEY_9%"},
		{ "trigger": "KEY_A\t(Pressed at start)", "contents": "%~KEY_A%"},
		{ "trigger": "KEY_ADD\t(Pressed at start)", "contents": "%~KEY_ADD%"},
		{ "trigger": "KEY_APOSTROPHE\t(Pressed at start)", "contents": "%~KEY_APOSTROPHE%"},
		{ "trigger": "KEY_APPS\t(Pressed at start)", "contents": "%~KEY_APPS%"},
		{ "trigger": "KEY_AT\t(Pressed at start)", "contents": "%~KEY_AT%"},
		{ "trigger": "KEY_AX\t(Pressed at start)", "contents": "%~KEY_AX%"},
		{ "trigger": "KEY_B\t(Pressed at start)", "contents": "%~KEY_B%"},
		{ "trigger": "KEY_BACK\t(Pressed at start)", "contents": "%~KEY_BACK%"},
		{ "trigger": "KEY_BACKSLASH\t(Pressed at start)", "contents": "%~KEY_BACKSLASH%"},
		{ "trigger": "KEY_C\t(Pressed at start)", "contents": "%~KEY_C%"},
		{ "trigger": "KEY_CAPITAL\t(Pressed at start)", "contents": "%~KEY_CAPITAL%"},
		{ "trigger": "KEY_CIRCUMFLEX\t(Pressed at start)", "contents": "%~KEY_CIRCUMFLEX%"},
		{ "trigger": "KEY_CLEAR\t(Pressed at start)", "contents": "%~KEY_CLEAR%"},
		{ "trigger": "KEY_COLON\t(Pressed at start)", "contents": "%~KEY_COLON%"},
		{ "trigger": "KEY_COMMA\t(Pressed at start)", "contents": "%~KEY_COMMA%"},
		{ "trigger": "KEY_CONVERT\t(Pressed at start)", "contents": "%~KEY_CONVERT%"},
		{ "trigger": "KEY_D\t(Pressed at start)", "contents": "%~KEY_D%"},
		{ "trigger": "KEY_DECIMAL\t(Pressed at start)", "contents": "%~KEY_DECIMAL%"},
		{ "trigger": "KEY_DELETE\t(Pressed at start)", "contents": "%~KEY_DELETE%"},
		{ "trigger": "KEY_DIVIDE\t(Pressed at start)", "contents": "%~KEY_DIVIDE%"},
		{ "trigger": "KEY_DOWN\t(Pressed at start)", "contents": "%~KEY_DOWN%"},
		{ "trigger": "KEY_E\t(Pressed at start)", "contents": "%~KEY_E%"},
		{ "trigger": "KEY_END\t(Pressed at start)", "contents": "%~KEY_END%"},
		{ "trigger": "KEY_EQUALS\t(Pressed at start)", "contents": "%~KEY_EQUALS%"},
		{ "trigger": "KEY_ESCAPE\t(Pressed at start)", "contents": "%~KEY_ESCAPE%"},
		{ "trigger": "KEY_F\t(Pressed at start)", "contents": "%~KEY_F%"},
		{ "trigger": "KEY_F1\t(Pressed at start)", "contents": "%~KEY_F1%"},
		{ "trigger": "KEY_F10\t(Pressed at start)", "contents": "%~KEY_F10%"},
		{ "trigger": "KEY_F11\t(Pressed at start)", "contents": "%~KEY_F11%"},
		{ "trigger": "KEY_F12\t(Pressed at start)", "contents": "%~KEY_F12%"},
		{ "trigger": "KEY_F13\t(Pressed at start)", "contents": "%~KEY_F13%"},
		{ "trigger": "KEY_F14\t(Pressed at start)", "contents": "%~KEY_F14%"},
		{ "trigger": "KEY_F15\t(Pressed at start)", "contents": "%~KEY_F15%"},
		{ "trigger": "KEY_F16\t(Pressed at start)", "contents": "%~KEY_F16%"},
		{ "trigger": "KEY_F17\t(Pressed at start)", "contents": "%~KEY_F17%"},
		{ "trigger": "KEY_F18\t(Pressed at start)", "contents": "%~KEY_F18%"},
		{ "trigger": "KEY_F19\t(Pressed at start)", "contents": "%~KEY_F19%"},
		{ "trigger": "KEY_F2\t(Pressed at start)", "contents": "%~KEY_F2%"},
		{ "trigger": "KEY_F3\t(Pressed at start)", "contents": "%~KEY_F3%"},
		{ "trigger": "KEY_F4\t(Pressed at start)", "contents": "%~KEY_F4%"},
		{ "trigger": "KEY_F5\t(Pressed at start)", "contents": "%~KEY_F5%"},
		{ "trigger": "KEY_F6\t(Pressed at start)", "contents": "%~KEY_F6%"},
		{ "trigger": "KEY_F7\t(Pressed at start)", "contents": "%~KEY_F7%"},
		{ "trigger": "KEY_F8\t(Pressed at start)", "contents": "%~KEY_F8%"},
		{ "trigger": "KEY_F9\t(Pressed at start)", "contents": "%~KEY_F9%"},
		{ "trigger": "KEY_FUNCTION\t(Pressed at start)", "contents": "%~KEY_FUNCTION%"},
		{ "trigger": "KEY_G\t(Pressed at start)", "contents": "%~KEY_G%"},
		{ "trigger": "KEY_GRAVE\t(Pressed at start)", "contents": "%~KEY_GRAVE%"},
		{ "trigger": "KEY_H\t(Pressed at start)", "contents": "%~KEY_H%"},
		{ "trigger": "KEY_HOME\t(Pressed at start)", "contents": "%~KEY_HOME%"},
		{ "trigger": "KEY_I\t(Pressed at start)", "contents": "%~KEY_I%"},
		{ "trigger": "KEY_INSERT\t(Pressed at start)", "contents": "%~KEY_INSERT%"},
		{ "trigger": "KEY_J\t(Pressed at start)", "contents": "%~KEY_J%"},
		{ "trigger": "KEY_K\t(Pressed at start)", "contents": "%~KEY_K%"},
		{ "trigger": "KEY_KANA\t(Pressed at start)", "contents": "%~KEY_KANA%"},
		{ "trigger": "KEY_KANJI\t(Pressed at start)", "contents": "%~KEY_KANJI%"},
		{ "trigger": "KEY_L\t(Pressed at start)", "contents": "%~KEY_L%"},
		{ "trigger": "KEY_LBRACKET\t(Pressed at start)", "contents": "%~KEY_LBRACKET%"},
		{ "trigger": "KEY_LCONTROL\t(Pressed at start)", "contents": "%~KEY_LCONTROL%"},
		{ "trigger": "KEY_LEFT\t(Pressed at start)", "contents": "%~KEY_LEFT%"},
		{ "trigger": "KEY_LMENU\t(Pressed at start)", "contents": "%~KEY_LMENU%"},
		{ "trigger": "KEY_LMETA\t(Pressed at start)", "contents": "%~KEY_LMETA%"},
		{ "trigger": "KEY_LSHIFT\t(Pressed at start)", "contents": "%~KEY_LSHIFT%"},
		{ "trigger": "KEY_M\t(Pressed at start)", "contents": "%~KEY_M%"},
		{ "trigger": "KEY_MINUS\t(Pressed at start)", "contents": "%~KEY_MINUS%"},
		{ "trigger": "KEY_MOUSE3\t(Pressed at start)", "contents": "%~KEY_MOUSE3%"},
		{ "trigger": "KEY_MOUSE4\t(Pressed at start)", "contents": "%~KEY_MOUSE4%"},
		{ "trigger": "KEY_MULTIPLY\t(Pressed at start)", "contents": "%~KEY_MULTIPLY%"},
		{ "trigger": "KEY_N\t(Pressed at start)", "contents": "%~KEY_N%"},
		{ "trigger": "KEY_NEXT\t(Pressed at start)", "contents": "%~KEY_NEXT%"},
		{ "trigger": "KEY_NOCONVERT\t(Pressed at start)", "contents": "%~KEY_NOCONVERT%"},
		{ "trigger": "KEY_NONE\t(Pressed at start)", "contents": "%~KEY_NONE%"},
		{ "trigger": "KEY_NUMLOCK\t(Pressed at start)", "contents": "%~KEY_NUMLOCK%"},
		{ "trigger": "KEY_NUMPAD0\t(Pressed at start)", "contents": "%~KEY_NUMPAD0%"},
		{ "trigger": "KEY_NUMPAD1\t(Pressed at start)", "contents": "%~KEY_NUMPAD1%"},
		{ "trigger": "KEY_NUMPAD2\t(Pressed at start)", "contents": "%~KEY_NUMPAD2%"},
		{ "trigger": "KEY_NUMPAD3\t(Pressed at start)", "contents": "%~KEY_NUMPAD3%"},
		{ "trigger": "KEY_NUMPAD4\t(Pressed at start)", "contents": "%~KEY_NUMPAD4%"},
		{ "trigger": "KEY_NUMPAD5\t(Pressed at start)", "contents": "%~KEY_NUMPAD5%"},
		{ "trigger": "KEY_NUMPAD6\t(Pressed at start)", "contents": "%~KEY_NUMPAD6%"},
		{ "trigger": "KEY_NUMPAD7\t(Pressed at start)", "contents": "%~KEY_NUMPAD7%"},
		{ "trigger": "KEY_NUMPAD8\t(Pressed at start)", "contents": "%~KEY_NUMPAD8%"},
		{ "trigger": "KEY_NUMPAD9\t(Pressed at start)", "contents": "%~KEY_NUMPAD9%"},
		{ "trigger": "KEY_NUMPADCOMMA\t(Pressed at start)", "contents": "%~KEY_NUMPADCOMMA%"},
		{ "trigger": "KEY_NUMPADENTER\t(Pressed at start)", "contents": "%~KEY_NUMPADENTER%"},
		{ "trigger": "KEY_NUMPADEQUALS\t(Pressed at start)", "contents": "%~KEY_NUMPADEQUALS%"},
		{ "trigger": "KEY_O\t(Pressed at start)", "contents": "%~KEY_O%"},
		{ "trigger": "KEY_P\t(Pressed at start)", "contents": "%~KEY_P%"},
		{ "trigger": "KEY_PAUSE\t(Pressed at start)", "contents": "%~KEY_PAUSE%"},
		{ "trigger": "KEY_PERIOD\t(Pressed at start)", "contents": "%~KEY_PERIOD%"},
		{ "trigger": "KEY_POWER\t(Pressed at start)", "contents": "%~KEY_POWER%"},
		{ "trigger": "KEY_PRIOR\t(Pressed at start)", "contents": "%~KEY_PRIOR%"},
		{ "trigger": "KEY_Q\t(Pressed at start)", "contents": "%~KEY_Q%"},
		{ "trigger": "KEY_R\t(Pressed at start)", "contents": "%~KEY_R%"},
		{ "trigger": "KEY_RBRACKET\t(Pressed at start)", "contents": "%~KEY_RBRACKET%"},
		{ "trigger": "KEY_RCONTROL\t(Pressed at start)", "contents": "%~KEY_RCONTROL%"},
		{ "trigger": "KEY_RETURN\t(Pressed at start)", "contents": "%~KEY_RETURN%"},
		{ "trigger": "KEY_RIGHT\t(Pressed at start)", "contents": "%~KEY_RIGHT%"},
		{ "trigger": "KEY_RMENU\t(Pressed at start)", "contents": "%~KEY_RMENU%"},
		{ "trigger": "KEY_RMETA\t(Pressed at start)", "contents": "%~KEY_RMETA%"},
		{ "trigger": "KEY_RSHIFT\t(Pressed at start)", "contents": "%~KEY_RSHIFT%"},
		{ "trigger": "KEY_S\t(Pressed at start)", "contents": "%~KEY_S%"},
		{ "trigger": "KEY_SCROLL\t(Pressed at start)", "contents": "%~KEY_SCROLL%"},
		{ "trigger": "KEY_SECTION\t(Pressed at start)", "contents": "%~KEY_SECTION%"},
		{ "trigger": "KEY_SEMICOLON\t(Pressed at start)", "contents": "%~KEY_SEMICOLON%"},
		{ "trigger": "KEY_SLASH\t(Pressed at start)", "contents": "%~KEY_SLASH%"},
		{ "trigger": "KEY_SLEEP\t(Pressed at start)", "contents": "%~KEY_SLEEP%"},
		{ "trigger": "KEY_SPACE\t(Pressed at start)", "contents": "%~KEY_SPACE%"},
		{ "trigger": "KEY_STOP\t(Pressed at start)", "contents": "%~KEY_STOP%"},
		{ "trigger": "KEY_SUBTRACT\t(Pressed at start)", "contents": "%~KEY_SUBTRACT%"},
		{ "trigger": "KEY_SYSRQ\t(Pressed at start)", "contents": "%~KEY_SYSRQ%"},
		{ "trigger": "KEY_T\t(Pressed at start)", "contents": "%~KEY_T%"},
		{ "trigger": "KEY_TAB\t(Pressed at start)", "contents": "%~KEY_TAB%"},
		{ "trigger": "KEY_U\t(Pressed at start)", "contents": "%~KEY_U%"},
		{ "trigger": "KEY_UNDERLINE\t(Pressed at start)", "contents": "%~KEY_UNDERLINE%"},
		{ "trigger": "KEY_UNLABELED\t(Pressed at start)", "contents": "%~KEY_UNLABELED%"},
		{ "trigger": "KEY_UP\t(Pressed at start)", "contents": "%~KEY_UP%"},
		{ "trigger": "KEY_V\t(Pressed at start)", "contents": "%~KEY_V%"},
		{ "trigger": "KEY_W\t(Pressed at start)", "contents": "%~KEY_W%"},
		{ "trigger": "KEY_X\t(Pressed at start)", "contents": "%~KEY_X%"},
		{ "trigger": "KEY_Y\t(Pressed at start)", "contents": "%~KEY_Y%"},
		{ "trigger": "KEY_YEN\t(Pressed at start)", "contents": "%~KEY_YEN%"},
		{ "trigger": "KEY_Z\t(Pressed at start)", "contents": "%~KEY_Z%"},
		{ "trigger": "LMOUSE\t(Pressed at start)", "contents": "%~LMOUSE%"},
		{ "trigger": "MIDDLEMOUSE\t(Pressed at start)", "contents": "%~MIDDLEMOUSE%"},
		{ "trigger": "RMOUSE\t(Pressed at start)", "contents": "%~RMOUSE%"},
		{ "trigger": "SHIFT\t(Pressed at start)", "contents": "%~SHIFT%"},
		{ "trigger": "ACHIEVEMENTGET\tDisplays a popup you get when completing an advancement with a custom message and optionally a custom item", "contents": "ACHIEVEMENTGET(${1:<TEXT>},${2:[ITEMID]}:${3:[DAMAGE]});"},
		{ "trigger": "ALT", "contents": "%ALT%"},
		{ "trigger": "AMBIENTVOLUME\tVolume level for Ambient/Environment", "contents": "%AMBIENTVOLUME%"},
		{ "trigger": "ARMOUR\tArmour points (each icon equals 2 points)", "contents": "%ARMOUR%"},
		{ "trigger": "ARRAYSIZE\tStores the size of the specified array in #outvar", "contents": "ARRAYSIZE(${1:<ARRAY>}[],#${2:[OUTVAR]});"},
		{ "trigger": "ASSIGN\tInternal function", "contents": "<VAR> = <VALUE>;"},
		{ "trigger": "ATTACKPOWER\tAttack power", "contents": "%ATTACKPOWER%"},
		{ "trigger": "ATTACKSPEED\tAttack speed", "contents": "%ATTACKSPEED%"},
		{ "trigger": "BEGIN\tEnters multi-line mode, allows entry of a script over multiple lines terminated by END", "contents": "BEGIN;"},
		{ "trigger": "BIND\tSet the specified key binding to the specified key code", "contents": "BIND(${1:<BIND>},${2:<KEYCODE>});"},
		{ "trigger": "BINDGUI\tBinds the specified custom screen to the slot specified", "contents": "BINDGUI(${1:<SLOT>},${2:<SCREEN>});"},
		{ "trigger": "BIOME\tBiome the Player is currently in", "contents": "%BIOME%"},
		{ "trigger": "BLOCKVOLUME\tVolume level for Blocks", "contents": "%BLOCKVOLUME%"},
		{ "trigger": "BOOTSDAMAGE\tMaximum uses of the Players boots", "contents": "%BOOTSDAMAGE%"},
		{ "trigger": "BOOTSDURABILITY\tDurability of the Players boots", "contents": "%BOOTSDURABILITY%"},
		{ "trigger": "BOOTSID\tID of the Players boots", "contents": "%BOOTSID%"},
		{ "trigger": "BOOTSNAME\tDisplayname of the Players boots", "contents": "%BOOTSNAME%"},
		{ "trigger": "BOWCHARGE", "contents": "%BOWCHARGE%"},
		{ "trigger": "BREAK\tInterrupts exection of the innermost loop", "contents": "BREAK;"},
		{ "trigger": "CALCYAWTO\tCalculates the absolute yaw angle", "contents": "CALCYAWTO(${1:<XPOS>},${2:<ZPOS>},#${3:[YAW]},#${4:[DIST}ANCE]);"},
		{ "trigger": "CAMERA\tSet the current camera mode, call with no arguments to toggle modes", "contents": "CAMERA(${1:[MODE]});"},
		{ "trigger": "CAMERA\tCurrent camera mode", "contents": "%CAMERA%"},
		{ "trigger": "CANFLY\tWhether the Player can fly", "contents": "%CANFLY%"},
		{ "trigger": "CARDINALYAW\tYaw of the player relative to north (YAW + 180)", "contents": "%CARDINALYAW%"},
		{ "trigger": "CAT\tLists the contents of the specified file into the console window", "contents": "CAT ${1:<FILE.TXT>};"},
		{ "trigger": "CHAT\t(onChat) Chat message with control codes", "contents": "%CHAT%"},
		{ "trigger": "CHATCLEAN\t(onChat) Chat message without control codes", "contents": "%CHATCLEAN%"},
		{ "trigger": "CHATFILTER\tEnable or disable the chat filter", "contents": "CHATFILTER(${1:<ENABLED>});"},
		{ "trigger": "CHATHEIGHT\tSet height of the Minecraft chat whilst ingame", "contents": "CHATHEIGHT(${1:<VALUE>},${2:[TIME]});"},
		{ "trigger": "CHATHEIGHTFOCUSED\tSet height of the Minecraft chat whilst in the chat GUI", "contents": "CHATHEIGHTFOCUSED(${1:<VALUE>},${2:[TIME]});"},
		{ "trigger": "CHATJSON\t(onBetterChat) Chat message in JSON", "contents": "%CHATMESSAGE%"},
		{ "trigger": "CHATMESSAGE\t(onChat) The message part of an incoming chat line, could be wrong", "contents": "%CHATMESSAGE%"},
		{ "trigger": "CHATOPACITY\tSet opacity of the Minecraft chat", "contents": "CHATOPACITY(${1:<VALUE>},${2:[TIME]});"},
		{ "trigger": "CHATPLAYER\t(onChat) The player who send a chat line, could be wrong", "contents": "%CHATPLAYER%"},
		{ "trigger": "CHATSCALE\tSet scale of the Minecraft chat", "contents": "CHATSCALE(${1:<VALUE>},${2:[TIME]});"},
		{ "trigger": "CHATVISIBLE\tSet visibility of minecraft chat", "contents": "CHATVISIBLE(${1:<VALUE>});"},
		{ "trigger": "CHATWIDTH\tSet width of the Minecraft chat", "contents": "CHATWIDTH(${1:<VALUE}>,${2:[TIME]});"},
		{ "trigger": "CHESTPLATEDAMAGE\tMaximum uses of the Players chestplate", "contents": "%CHESTPLATEDAMAGE%"},
		{ "trigger": "CHESTPLATEDURABILITY\tDurability of the Players chestplate", "contents": "%CHESTPLATEDURABILITY%"},
		{ "trigger": "CHESTPLATEID\tID of the Players chestplate", "contents": "%CHESTPLATEID%"},
		{ "trigger": "CHESTPLATENAME\tDisplayname of the Players chestplate", "contents": "%CHESTPLATENAME%"},
		{ "trigger": "CHUNKUPDATES\tAmount of chunk updates", "contents": "%CHUNKUPDATES%"},
		{ "trigger": "CLEARCHAT\tClears all messages from the chat window", "contents": "CLEARCHAT();"},
		{ "trigger": "CLEARCRAFTING\tCancels any queued crafting jobs", "contents": "CLEARCRAFTING();"},
		{ "trigger": "CLS\tClears the console display", "contents": "CLS;"},
		{ "trigger": "CONFIG\tSwitch to the specified configuration", "contents": "CONFIG(${1:<CONFIGNAME>});"},
		{ "trigger": "CONFIG\tLoaded config", "contents": "%CONFIG%"},
		{ "trigger": "CONTAINERSLOTS\tAmount of slots in opened container", "contents": "%CONTAINERSLOTS%"},
		{ "trigger": "CONTROLID\t(controls iterator) Internal id of the current control", "contents": "%CONTROLID%"},
		{ "trigger": "CONTROLNAME\t(controls iterator) The name set in the control under Control Name", "contents": "%CONTROLNAME%"},
		{ "trigger": "CONTROLS\tIterates over all existing controls", "contents": "CONTROLS([LAYOUT][:TYPE])"},
		{ "trigger": "CONTROLTYPE\t(controls iterator) Type of the current control", "contents": "%CONTROLTYPE%"},
		{ "trigger": "COOLDOWN\tCooldown", "contents": "%COOLDOWN%"},
		{ "trigger": "CRAFT\tQueues an auto-crafting request", "contents": "CRAFT(${1:<ITEM>}:${2:[DAMAGE]},${3:[AMOUNT]},${4:[THROW]},${5:[VERBOSE]});"},
		{ "trigger": "CRAFTANDWAIT\tQueues an auto-crafting request and waits", "contents": "CRAFTANDWAIT(${1:<ITEM>}:${2:[DAMAGE]},${3:[AMOUNT]},${4:[THROW]},${5:[VERBOSE]});"},
		{ "trigger": "CTRL", "contents": "%CTRL%"},
		{ "trigger": "DATE\tCurrent date in the format year-month-day", "contents": "%DATE%"},
		{ "trigger": "DATETIME\tCurrent date and time in the format year-month-day hour:minute:second", "contents": "%DATETIME%"},
		{ "trigger": "DAY\tNumber of day", "contents": "%DAY%"},
		{ "trigger": "DAYTICKS\tTICKS value modulo 24000 and shifted back 6000 so that 0 aligns with midnight ", "contents": "%DAYTICKS%"},
		{ "trigger": "DAYTIME\tIngame time in the format hh:mm", "contents": "%DAYTIME%"},
		{ "trigger": "DEC\tDecrements the specified counter by 1 or by the specified amount", "contents": "DEC(#${1:<VAR>},${2:[AMOUNT]});"},
		{ "trigger": "DECODE\tConverts an string from base64 back to an normal string", "contents": "DECODE(${1:<INPUT>},${2:[&OUTPUT]});"},
		{ "trigger": "DIFFICULTY\tDifficulty of the world", "contents": "%DIFFICULTY%"},
		{ "trigger": "DIMENSION\tDimension the Player is in", "contents": "%DIMENSION%"},
		{ "trigger": "DIRECTION\tDirection the Player is looking at, shortened to the first character", "contents": "%DIRECTION%"},
		{ "trigger": "DISCONNECT\tDisconnects from the current game or server", "contents": "DISCONNECT();"},
		{ "trigger": "DISPLAYHEIGHT\tHeight of the minecraft window", "contents": "%DISPLAYHEIGHT%"},
		{ "trigger": "DISPLAYNAME\tPlayer's displayname", "contents": "%DISPLAYNAME%"},
		{ "trigger": "DISPLAYWIDTH\tWidth of the minecraft window", "contents": "%DISPLAYWIDTH%"},
		{ "trigger": "DURABILITY\tDurability of the equipped item", "contents": "%DURABILITY%"},
		{ "trigger": "ECHO\tSends the specified message to the server", "contents": "ECHO(${1:<TEXT>});"},
		{ "trigger": "EDIT\tOpens an editor for the specified file", "contents": "EDIT ${1:[FILE.TXT]};"},
		{ "trigger": "EFFECT\t(effects iterator) Internal string id of the effect", "contents": "%EFFECT%"},
		{ "trigger": "EFFECTID\t(effects iterator) Internal numeric id of the effect", "contents": "%EFFECTID%"},
		{ "trigger": "EFFECTNAME\t(effects iterator) Display name of the effect", "contents": "%EFFECTNAME%"},
		{ "trigger": "EFFECTPOWER\t(effects iterator) Power of the effect", "contents": "%EFFECTPOWER%"},
		{ "trigger": "EFFECTS\tIterates over all currently applied effects", "contents": "EFFECTS"},
		{ "trigger": "EFFECTTIME\t(effects iterator) Remaining time of the effect in seconds", "contents": "%EFFECTTIME%"},
		{ "trigger": "ENCHANTMENT\t(enchantments iterator) Display name of the enchantment", "contents": "%ENCHANTMENT%"},
		{ "trigger": "ENCHANTMENTNAME\t(enchantments iterator) Only the name of the enchantment", "contents": "%ENCHANTMENTNAME%"},
		{ "trigger": "ENCHANTMENTPOWER\t(enchantments iterator) Power of the enchantment", "contents": "%ENCHANTMENTPOWER%"},
		{ "trigger": "ENCHANTMENTS\tIterates over all enchantments on the equipped item", "contents": "ENCHANTMENTS"},
		{ "trigger": "ENCODE\tConverts an string to base 64", "contents": "ENCODE(${1:<INPUT>},&${2:[OUTPUT]});"},
		{ "trigger": "END\tEnds a multi-line script and executes the contents of the buffer", "contents": "END;"},
		{ "trigger": "ENV\tIterates over all available variables", "contents": "ENV"},
		{ "trigger": "EXEC\tCreates a task by running the specified script file", "contents": "EXEC(${1:<FILE.TXT>},${2:[TASKNAME]},${3:[PARAMS]});"},
		{ "trigger": "EXIT\tClose the console window", "contents": "EXIT;"},
		{ "trigger": "EXPAND", "contents": "?% <VARIABLE>;"},
		{ "trigger": "FILTER\tIndicate that this chat meesage should be filtered and terminate", "contents": "FILTER;"},
		{ "trigger": "FLYING\tWhether the Player is flying", "contents": "%FLYING%"},
		{ "trigger": "FOG\tToggles render distance, or optionally specify render distance", "contents": "FOG(${1:[VALUE]});"},
		{ "trigger": "FOV\tSets the FOV angle in degrees, specifying time causes the value to change smoothly", "contents": "FOV(${1:<VALUE>},${2:[TIME]});"},
		{ "trigger": "FOV\tField of View", "contents": "%FOV%"},
		{ "trigger": "FPS\tFrames per Second", "contents": "%FPS%"},
		{ "trigger": "GAMEMODE\tGamemode of the player as a string", "contents": "%GAMEMODE%"},
		{ "trigger": "GAMMA\tSets the brightness value (percent), specifying time causes the value to change smoothly", "contents": "GAMMA(${1:<VALUE>},${2:[TIME]});"},
		{ "trigger": "GAMMA\tBrightness level", "contents": "%GAMMA%"},
		{ "trigger": "GETID\tGets the ID and data value of the block at the specified coordinates", "contents": "GETID(${1:<X>},${2:<Y>},${3:<Z>},&${4:[IDVAR]},#${5:[DATAVAR]});"},
		{ "trigger": "GETIDREL\tGets the ID and data value of the block at the specified coordinates relative to the player", "contents": "GETIDREL(${1:<XOFFSET>},${2:<YOFFSET>},${3:<ZOFFSET>},&${4:[IDVAR]},#${5:[DATAVAR]});"},
		{ "trigger": "GETITEMINFO\tGets the name and other info for the specified item id", "contents": "GETITEMINFO(${1:<ITEM>}:${2:[DAMAGE]},&${3:[NAMEVAR]},#${4:[MAXSTACKSIZE]},&${5:[TYPE]},&${6:[DROPID]});"},
		{ "trigger": "GETPROPERTY\tReturns the value of the specified property from the specified GUI control", "contents": "GETPROPERTY(${1:<CONTROL>},${2:<PROPERTY>});"},
		{ "trigger": "GETSLOT\tGets the id of the slot containing an item matching the specified item id", "contents": "GETSLOT(${1:<ITEM>}:${2:[DAMAGE]},#${3:<SLOTID>},${4:[STARTFROMSLOTID]});"},
		{ "trigger": "GETSLOTITEM\tGets information about the item in the specified slot", "contents": "GETSLOTITEM(${1:<SLOTID>},&${2:<IDVAR>},#${3:[STACKSIZEVAR]},#${4:[DATAVAR]});"},
		{ "trigger": "GUI\tOpens the specified gui screen", "contents": "GUI(${1:[NAME]});"},
		{ "trigger": "GUI\tName of the currently open GUI", "contents": "%GUI%"},
		{ "trigger": "HEALTH\tHealth points (each icon equals 2 points)", "contents": "%HEALTH%"},
		{ "trigger": "HELMDAMAGE\tMaximum uses of the Players helm", "contents": "%HELMDAMAGE%"},
		{ "trigger": "HELMDURABILITY\tDurability of the Players helm", "contents": "%HELMDURABILITY%"},
		{ "trigger": "HELMID\tID of the Players helm", "contents": "%HELMID%"},
		{ "trigger": "HELMNAME\tDisplayname of the Players helm", "contents": "%HELMNAME%"},
		{ "trigger": "HELP\tDisplays help on the specified console command", "contents": "HELP ${1:[COMMAND NAME]};"},
		{ "trigger": "HIT\tType of the thing the Player is looking at", "contents": "%HIT%"},
		{ "trigger": "HIT_AGE", "contents": "%HIT_AGE%"},
		{ "trigger": "HIT_ATTACHED", "contents": "%HIT_ATTACHED%"},
		{ "trigger": "HIT_AXIS", "contents": "%HIT_AXIS%"},
		{ "trigger": "HIT_BITES", "contents": "%HIT_BITES%"},
		{ "trigger": "HIT_CHECK_DECAY", "contents": "%HIT_CHECK_DECAY%"},
		{ "trigger": "HIT_COLOR", "contents": "%HIT_COLOR%"},
		{ "trigger": "HIT_CONDITIONAL", "contents": "%HIT_CONDITIONAL%"},
		{ "trigger": "HIT_CONTENTS", "contents": "%HIT_CONTENTS%"},
		{ "trigger": "HIT_DAMAGE", "contents": "%HIT_DAMAGE%"},
		{ "trigger": "HIT_DECAYABLE", "contents": "%HIT_DECAYABLE%"},
		{ "trigger": "HIT_DELAY", "contents": "%HIT_DELAY%"},
		{ "trigger": "HIT_DISARMED", "contents": "%HIT_DISARMED%"},
		{ "trigger": "HIT_DOWN", "contents": "%HIT_DOWN%"},
		{ "trigger": "HIT_EAST", "contents": "%HIT_EAST%"},
		{ "trigger": "HIT_ENABLED", "contents": "%HIT_ENABLED%"},
		{ "trigger": "HIT_EXPLODE", "contents": "%HIT_EXPLODE%"},
		{ "trigger": "HIT_EXTENDED", "contents": "%HIT_EXTENDED%"},
		{ "trigger": "HIT_EYE", "contents": "%HIT_EYE%"},
		{ "trigger": "HIT_FACING", "contents": "%HIT_FACING%"},
		{ "trigger": "HIT_HALF", "contents": "%HIT_HALF%"},
		{ "trigger": "HIT_HAS_BOTTLE_0", "contents": "%HIT_HAS_BOTTLE_0%"},
		{ "trigger": "HIT_HAS_BOTTLE_1", "contents": "%HIT_HAS_BOTTLE_1%"},
		{ "trigger": "HIT_HAS_BOTTLE_2", "contents": "%HIT_HAS_BOTTLE_2%"},
		{ "trigger": "HIT_HAS_RECORD", "contents": "%HIT_HAS_RECORD%"},
		{ "trigger": "HIT_HINGE", "contents": "%HIT_HINGE%"},
		{ "trigger": "HIT_IN_WALL", "contents": "%HIT_IN_WALL%"},
		{ "trigger": "HIT_LAYERS", "contents": "%HIT_LAYERS%"},
		{ "trigger": "HIT_LEGACY_DATA", "contents": "%HIT_LEGACY_DATA%"},
		{ "trigger": "HIT_LEVEL", "contents": "%HIT_LEVEL%"},
		{ "trigger": "HIT_LOCKED", "contents": "%HIT_LOCKED%"},
		{ "trigger": "HIT_MODE", "contents": "%HIT_MODE%"},
		{ "trigger": "HIT_MOISTURE", "contents": "%HIT_MOISTURE%"},
		{ "trigger": "HIT_NODROP", "contents": "%HIT_NODROP%"},
		{ "trigger": "HIT_NORTH", "contents": "%HIT_NORTH%"},
		{ "trigger": "HIT_OCCUPIED", "contents": "%HIT_OCCUPIED%"},
		{ "trigger": "HIT_OPEN", "contents": "%HIT_OPEN%"},
		{ "trigger": "HIT_PART", "contents": "%HIT_PART%"},
		{ "trigger": "HIT_POWER", "contents": "%HIT_POWER%"},
		{ "trigger": "HIT_POWERED", "contents": "%HIT_POWERED%"},
		{ "trigger": "HIT_ROTATION", "contents": "%HIT_ROTATION%"},
		{ "trigger": "HIT_SEAMLESS", "contents": "%HIT_SEAMLESS%"},
		{ "trigger": "HIT_SHAPE", "contents": "%HIT_SHAPE%"},
		{ "trigger": "HIT_SHORT", "contents": "%HIT_SHORT%"},
		{ "trigger": "HIT_SNOWY", "contents": "%HIT_SNOWY%"},
		{ "trigger": "HIT_SOUTH", "contents": "%HIT_SOUTH%"},
		{ "trigger": "HIT_STAGE", "contents": "%HIT_STAGE%"},
		{ "trigger": "HIT_TRIGGERED", "contents": "%HIT_TRIGGERED%"},
		{ "trigger": "HIT_TYPE", "contents": "%HIT_TYPE%"},
		{ "trigger": "HIT_UP", "contents": "%HIT_UP%"},
		{ "trigger": "HIT_VARIANT", "contents": "%HIT_VARIANT%"},
		{ "trigger": "HIT_WEST", "contents": "%HIT_WEST%"},
		{ "trigger": "HIT_WET", "contents": "%HIT_WET%"},
		{ "trigger": "HITDATA\tMetadata of the thing the Player is looking at", "contents": "%HITDATA%"},
		{ "trigger": "HITID\tID of the thing the Player is looking at", "contents": "%HITID%"},
		{ "trigger": "HITNAME\tDisplayname of the thing the Player is looking at", "contents": "%HITNAME%"},
		{ "trigger": "HITPROGRESS\tBlock breaking progress of the block the Player is looking at", "contents": "%HITPROGRESS%"},
		{ "trigger": "HITSIDE\tBlock side of the block the Player is looking at", "contents": "%HITSIDE%"},
		{ "trigger": "HITUUID\tUUID of the looked at entity or player", "contents": "%HITUUID%"},
		{ "trigger": "HITX\tX position of the block the Player is looking at", "contents": "%HITX%"},
		{ "trigger": "HITY\tY position of the block the Player is looking at", "contents": "%HITY%"},
		{ "trigger": "HITZ\tZ position of the block the Player is looking at", "contents": "%HITZ%"},
		{ "trigger": "HOSTILEVOLUME\tVolume level for Hostile Creatures", "contents": "%HOSTILEVOLUME%"},
		{ "trigger": "HUNGER\tHunger points (each icon equals 2 points)", "contents": "%HUNGER%"},
		{ "trigger": "IIF\tInline IF statement", "contents": "IIF(${1:<CONDITION>},${2:<TRUETEXT>},${3:[FALSETEXT]});"},
		{ "trigger": "IMPORT\tOverlay the specified configuration", "contents": "IMPORT(${1:<CONFIGNAME>});"},
		{ "trigger": "INC\tIncrements the specified counter by 1 or by the specified amount", "contents": "INC(#${1:<VAR>},${2:[AMOUNT]});"},
		{ "trigger": "INDEXOF\tGets the first index of a item", "contents": "INDEXOF(${1:<ARRAY>}[],#${2:<OUTVAR>},${3:<SEARCHFOR>},${4:[CASESENSITIV]});"},
		{ "trigger": "INVENTORYDOWN\tScrolls the specified number of slots down through the hotbar", "contents": "INVENTORYDOWN(${1:[AMOUNT]});"},
		{ "trigger": "INVENTORYUP\tScrolls the specified number of slots up through the hotbar", "contents": "INVENTORYUP(${1:[AMOUNT]});"},
		{ "trigger": "INVSLOT\tSelected inventory slot", "contents": "%INVSLOT%"},
		{ "trigger": "ISRUNNING\tReturns whether the specified macro is currently running", "contents": "ISRUNNING(${1:<MACRO>});"},
		{ "trigger": "ITEM\tID of the equipped item", "contents": "%ITEM%"},
		{ "trigger": "ITEMCODE\tInternal code for the equipped item", "contents": "%ITEMCODE%"},
		{ "trigger": "ITEMDAMAGE\tMaximum uses of the equipped item", "contents": "%ITEMDAMAGE%"},
		{ "trigger": "ITEMID\tGets the legacy (numeric) ID for the specified item", "contents": "ITEMID(${1:<ITEM>});"},
		{ "trigger": "ITEMIDDMG\tID and durability seperated by a colon of the equipped item", "contents": "%ITEMIDDMG%"},
		{ "trigger": "ITEMNAME\tDisplayname for the equipped item", "contents": "%ITEMNAME%"},
		{ "trigger": "ITEMNAME\tGet the item descriptor for a legacy (numeric) item ID", "contents": "ITEMNAME(${1:<ID>});"},
		{ "trigger": "ITEMUSEPCT\tPrevious value as percent of total useage time", "contents": "%ITEMUSEPCT%"},
		{ "trigger": "ITEMUSETICKS \tAll usable items increase this value once per tick", "contents": "%ITEMUSETICKS%"},
		{ "trigger": "JOIN\tCombines values inside array with glue", "contents": "JOIN(${1:<GLUE>},${2:<ARRAY>}[],&${3:[OUTPUT]});"},
		{ "trigger": "JOINEDPLAYER\t(onPlayerJoined) Player name of the newly joined player", "contents": "%JOINEDPLAYER%"},
		{ "trigger": "KEY\tActivates the specified key binding for 1 tick", "contents": "KEY(${1:<BIND>});"},
		{ "trigger": "KEY_0", "contents": "%KEY_0%"},
		{ "trigger": "KEY_1", "contents": "%KEY_1%"},
		{ "trigger": "KEY_2", "contents": "%KEY_2%"},
		{ "trigger": "KEY_3", "contents": "%KEY_3%"},
		{ "trigger": "KEY_4", "contents": "%KEY_4%"},
		{ "trigger": "KEY_5", "contents": "%KEY_5%"},
		{ "trigger": "KEY_6", "contents": "%KEY_6%"},
		{ "trigger": "KEY_7", "contents": "%KEY_7%"},
		{ "trigger": "KEY_8", "contents": "%KEY_8%"},
		{ "trigger": "KEY_9", "contents": "%KEY_9%"},
		{ "trigger": "KEY_A", "contents": "%KEY_A%"},
		{ "trigger": "KEY_ADD", "contents": "%KEY_ADD%"},
		{ "trigger": "KEY_APOSTROPHE", "contents": "%KEY_APOSTROPHE%"},
		{ "trigger": "KEY_APPS", "contents": "%KEY_APPS%"},
		{ "trigger": "KEY_AT", "contents": "%KEY_AT%"},
		{ "trigger": "KEY_AX", "contents": "%KEY_AX%"},
		{ "trigger": "KEY_B", "contents": "%KEY_B%"},
		{ "trigger": "KEY_BACK", "contents": "%KEY_BACK%"},
		{ "trigger": "KEY_BACKSLASH", "contents": "%KEY_BACKSLASH%"},
		{ "trigger": "KEY_C", "contents": "%KEY_C%"},
		{ "trigger": "KEY_CAPITAL", "contents": "%KEY_CAPITAL%"},
		{ "trigger": "KEY_CIRCUMFLEX", "contents": "%KEY_CIRCUMFLEX%"},
		{ "trigger": "KEY_CLEAR", "contents": "%KEY_CLEAR%"},
		{ "trigger": "KEY_COLON", "contents": "%KEY_COLON%"},
		{ "trigger": "KEY_COMMA", "contents": "%KEY_COMMA%"},
		{ "trigger": "KEY_CONVERT", "contents": "%KEY_CONVERT%"},
		{ "trigger": "KEY_D", "contents": "%KEY_D%"},
		{ "trigger": "KEY_DECIMAL", "contents": "%KEY_DECIMAL%"},
		{ "trigger": "KEY_DELETE", "contents": "%KEY_DELETE%"},
		{ "trigger": "KEY_DIVIDE", "contents": "%KEY_DIVIDE%"},
		{ "trigger": "KEY_DOWN", "contents": "%KEY_DOWN%"},
		{ "trigger": "KEY_E", "contents": "%KEY_E%"},
		{ "trigger": "KEY_END", "contents": "%KEY_END%"},
		{ "trigger": "KEY_EQUALS", "contents": "%KEY_EQUALS%"},
		{ "trigger": "KEY_ESCAPE", "contents": "%KEY_ESCAPE%"},
		{ "trigger": "KEY_F", "contents": "%KEY_F%"},
		{ "trigger": "KEY_F1", "contents": "%KEY_F1%"},
		{ "trigger": "KEY_F10", "contents": "%KEY_F10%"},
		{ "trigger": "KEY_F11", "contents": "%KEY_F11%"},
		{ "trigger": "KEY_F12", "contents": "%KEY_F12%"},
		{ "trigger": "KEY_F13", "contents": "%KEY_F13%"},
		{ "trigger": "KEY_F14", "contents": "%KEY_F14%"},
		{ "trigger": "KEY_F15", "contents": "%KEY_F15%"},
		{ "trigger": "KEY_F16", "contents": "%KEY_F16%"},
		{ "trigger": "KEY_F17", "contents": "%KEY_F17%"},
		{ "trigger": "KEY_F18", "contents": "%KEY_F18%"},
		{ "trigger": "KEY_F19", "contents": "%KEY_F19%"},
		{ "trigger": "KEY_F2", "contents": "%KEY_F2%"},
		{ "trigger": "KEY_F3", "contents": "%KEY_F3%"},
		{ "trigger": "KEY_F4", "contents": "%KEY_F4%"},
		{ "trigger": "KEY_F5", "contents": "%KEY_F5%"},
		{ "trigger": "KEY_F6", "contents": "%KEY_F6%"},
		{ "trigger": "KEY_F7", "contents": "%KEY_F7%"},
		{ "trigger": "KEY_F8", "contents": "%KEY_F8%"},
		{ "trigger": "KEY_F9", "contents": "%KEY_F9%"},
		{ "trigger": "KEY_FUNCTION", "contents": "%KEY_FUNCTION%"},
		{ "trigger": "KEY_G", "contents": "%KEY_G%"},
		{ "trigger": "KEY_GRAVE", "contents": "%KEY_GRAVE%"},
		{ "trigger": "KEY_H", "contents": "%KEY_H%"},
		{ "trigger": "KEY_HOME", "contents": "%KEY_HOME%"},
		{ "trigger": "KEY_I", "contents": "%KEY_I%"},
		{ "trigger": "KEY_INSERT", "contents": "%KEY_INSERT%"},
		{ "trigger": "KEY_J", "contents": "%KEY_J%"},
		{ "trigger": "KEY_K", "contents": "%KEY_K%"},
		{ "trigger": "KEY_KANA", "contents": "%KEY_KANA%"},
		{ "trigger": "KEY_KANJI", "contents": "%KEY_KANJI%"},
		{ "trigger": "KEY_L", "contents": "%KEY_L%"},
		{ "trigger": "KEY_LBRACKET", "contents": "%KEY_LBRACKET%"},
		{ "trigger": "KEY_LCONTROL", "contents": "%KEY_LCONTROL%"},
		{ "trigger": "KEY_LEFT", "contents": "%KEY_LEFT%"},
		{ "trigger": "KEY_LMENU", "contents": "%KEY_LMENU%"},
		{ "trigger": "KEY_LMETA", "contents": "%KEY_LMETA%"},
		{ "trigger": "KEY_LSHIFT", "contents": "%KEY_LSHIFT%"},
		{ "trigger": "KEY_M", "contents": "%KEY_M%"},
		{ "trigger": "KEY_MINUS", "contents": "%KEY_MINUS%"},
		{ "trigger": "KEY_MOUSE3", "contents": "%KEY_MOUSE3%"},
		{ "trigger": "KEY_MOUSE4", "contents": "%KEY_MOUSE4%"},
		{ "trigger": "KEY_MULTIPLY", "contents": "%KEY_MULTIPLY%"},
		{ "trigger": "KEY_N", "contents": "%KEY_N%"},
		{ "trigger": "KEY_NEXT", "contents": "%KEY_NEXT%"},
		{ "trigger": "KEY_NOCONVERT", "contents": "%KEY_NOCONVERT%"},
		{ "trigger": "KEY_NONE", "contents": "%KEY_NONE%"},
		{ "trigger": "KEY_NUMLOCK", "contents": "%KEY_NUMLOCK%"},
		{ "trigger": "KEY_NUMPAD0", "contents": "%KEY_NUMPAD0%"},
		{ "trigger": "KEY_NUMPAD1", "contents": "%KEY_NUMPAD1%"},
		{ "trigger": "KEY_NUMPAD2", "contents": "%KEY_NUMPAD2%"},
		{ "trigger": "KEY_NUMPAD3", "contents": "%KEY_NUMPAD3%"},
		{ "trigger": "KEY_NUMPAD4", "contents": "%KEY_NUMPAD4%"},
		{ "trigger": "KEY_NUMPAD5", "contents": "%KEY_NUMPAD5%"},
		{ "trigger": "KEY_NUMPAD6", "contents": "%KEY_NUMPAD6%"},
		{ "trigger": "KEY_NUMPAD7", "contents": "%KEY_NUMPAD7%"},
		{ "trigger": "KEY_NUMPAD8", "contents": "%KEY_NUMPAD8%"},
		{ "trigger": "KEY_NUMPAD9", "contents": "%KEY_NUMPAD9%"},
		{ "trigger": "KEY_NUMPADCOMMA", "contents": "%KEY_NUMPADCOMMA%"},
		{ "trigger": "KEY_NUMPADENTER", "contents": "%KEY_NUMPADENTER%"},
		{ "trigger": "KEY_NUMPADEQUALS", "contents": "%KEY_NUMPADEQUALS%"},
		{ "trigger": "KEY_O", "contents": "%KEY_O%"},
		{ "trigger": "KEY_P", "contents": "%KEY_P%"},
		{ "trigger": "KEY_PAUSE", "contents": "%KEY_PAUSE%"},
		{ "trigger": "KEY_PERIOD", "contents": "%KEY_PERIOD%"},
		{ "trigger": "KEY_POWER", "contents": "%KEY_POWER%"},
		{ "trigger": "KEY_PRIOR", "contents": "%KEY_PRIOR%"},
		{ "trigger": "KEY_Q", "contents": "%KEY_Q%"},
		{ "trigger": "KEY_R", "contents": "%KEY_R%"},
		{ "trigger": "KEY_RBRACKET", "contents": "%KEY_RBRACKET%"},
		{ "trigger": "KEY_RCONTROL", "contents": "%KEY_RCONTROL%"},
		{ "trigger": "KEY_RETURN", "contents": "%KEY_RETURN%"},
		{ "trigger": "KEY_RIGHT", "contents": "%KEY_RIGHT%"},
		{ "trigger": "KEY_RMENU", "contents": "%KEY_RMENU%"},
		{ "trigger": "KEY_RMETA", "contents": "%KEY_RMETA%"},
		{ "trigger": "KEY_RSHIFT", "contents": "%KEY_RSHIFT%"},
		{ "trigger": "KEY_S", "contents": "%KEY_S%"},
		{ "trigger": "KEY_SCROLL", "contents": "%KEY_SCROLL%"},
		{ "trigger": "KEY_SECTION", "contents": "%KEY_SECTION%"},
		{ "trigger": "KEY_SEMICOLON", "contents": "%KEY_SEMICOLON%"},
		{ "trigger": "KEY_SLASH", "contents": "%KEY_SLASH%"},
		{ "trigger": "KEY_SLEEP", "contents": "%KEY_SLEEP%"},
		{ "trigger": "KEY_SPACE", "contents": "%KEY_SPACE%"},
		{ "trigger": "KEY_STOP", "contents": "%KEY_STOP%"},
		{ "trigger": "KEY_SUBTRACT", "contents": "%KEY_SUBTRACT%"},
		{ "trigger": "KEY_SYSRQ", "contents": "%KEY_SYSRQ%"},
		{ "trigger": "KEY_T", "contents": "%KEY_T%"},
		{ "trigger": "KEY_TAB", "contents": "%KEY_TAB%"},
		{ "trigger": "KEY_U", "contents": "%KEY_U%"},
		{ "trigger": "KEY_UNDERLINE", "contents": "%KEY_UNDERLINE%"},
		{ "trigger": "KEY_UNLABELED", "contents": "%KEY_UNLABELED%"},
		{ "trigger": "KEY_UP", "contents": "%KEY_UP%"},
		{ "trigger": "KEY_V", "contents": "%KEY_V%"},
		{ "trigger": "KEY_W", "contents": "%KEY_W%"},
		{ "trigger": "KEY_X", "contents": "%KEY_X%"},
		{ "trigger": "KEY_Y", "contents": "%KEY_Y%"},
		{ "trigger": "KEY_YEN", "contents": "%KEY_YEN%"},
		{ "trigger": "KEY_Z", "contents": "%KEY_Z%"},
		{ "trigger": "KEYDOWN\tSets the specified key binding state to pressed, only works with pressable bindings", "contents": "KEYDOWN(${1:<BIND>});"},
		{ "trigger": "KEYID\tKey ID of the key that started this script", "contents": "%KEYID%"},
		{ "trigger": "KEYNAME\tKeyname of the key that started this script", "contents": "%KEYNAME%"},
		{ "trigger": "KEYUP\tSets the specified key binding state to unpressed, only works with pressable bindings", "contents": "KEYUP(${1:<BIND>});"},
		{ "trigger": "KILL\tTerminate a running macro by ID, use TASKS to list available tasks", "contents": "KILL ${1:[TASKID]};"},
		{ "trigger": "LCASE\tConverts the input string to lower case and stores it in output", "contents": "LCASE(${1:<INPUT>},&${2:[OUTPUT]});"},
		{ "trigger": "LEGGINGSDAMAGE\tMaximum uses of the Players leggings", "contents": "%LEGGINGSDAMAGE%"},
		{ "trigger": "LEGGINGSDURABILITY\tDurability of the Players leggings", "contents": "%LEGGINGSDURABILITY%"},
		{ "trigger": "LEGGINGSID\tID of the Players leggings", "contents": "%LEGGINGSID%"},
		{ "trigger": "LEGGINGSNAME\tDisplayname of the Players leggings", "contents": "%LEGGINGSNAME%"},
		{ "trigger": "LEVEL\tXP level", "contents": "%LEVEL%"},
		{ "trigger": "LIGHT\tLight level at current location", "contents": "%LIGHT%"},
		{ "trigger": "LIST\tList available macro files in the macros directory", "contents": "LIST;"},
		{ "trigger": "LIVE\tEnables or disables live mode", "contents": "LIVE ${1:[STATUS]};"},
		{ "trigger": "LMOUSE", "contents": "%LMOUSE%"},
		{ "trigger": "LOCALDIFFICULTY\tLocal difficulty of the world", "contents": "%LOCALDIFFICULTY%"},
		{ "trigger": "LOG\tShows the specified text only on the client-side in the chat window", "contents": "LOG(${1:<TEXT>});"},
		{ "trigger": "LOGRAW\tSimilar to minecraft tellraw command", "contents": "LOGRAW(${1:<JSON>});"},
		{ "trigger": "LOGTO\tOutputs the specified text into the specified target", "contents": "LOGTO(${1:<TARGET>},${2:<TEXT>});"},
		{ "trigger": "LOOK\tFaces the player in the specified direction", "contents": "LOOK(${1:<YAW>},${2:[PITCH]},${3:[TIME]});"},
		{ "trigger": "LOOKS\tSmoothly turnes the player to the specified direction", "contents": "LOOKS(${1:<YAW>},${2:[PITCH]},${3:[TIME]});"},
		{ "trigger": "MACROID\t(running iterator) Internal id of the macro", "contents": "%MACROID%"},
		{ "trigger": "MACRONAME\t(running iterator) Display name of the macro", "contents": "%MACRONAME%"},
		{ "trigger": "MACROTIME\t(running iterator) The time the macro is already running in seconds", "contents": "%MACROTIME%"},
		{ "trigger": "MAINHANDCOOLDOWN\tmainhand cooldown", "contents": "%MAINHANDCOOLDOWN%"},
		{ "trigger": "MAINHANDDURABILITY\tDurability of the mainhand item", "contents": "%MAINHANDDURABILITY%"},
		{ "trigger": "MAINHANDITEM\tID of the mainhand item", "contents": "%MAINHANDITEM%"},
		{ "trigger": "MAINHANDITEMCODE\tInternal code for the mainhand item", "contents": "%MAINHANDITEMCODE%"},
		{ "trigger": "MAINHANDITEMDAMAGE\tMaximum uses of the mainhand item", "contents": "%MAINHANDITEMDAMAGE%"},
		{ "trigger": "MAINHANDITEMIDDMG\tID and durability seperated by a colon of the mainhand item", "contents": "%MAINHANDITEMIDDMG%"},
		{ "trigger": "MAINHANDITEMNAME\tDisplayname for the mainhand item", "contents": "%MAINHANDITEMNAME%"},
		{ "trigger": "MAINHANDSTACKSIZE\tStacksize of the mainhand item", "contents": "%MAINHANDSTACKSIZE%"},
		{ "trigger": "MATCH\tRuns a regular expression match on the subject", "contents": "MATCH(${1:<SUBJECT>},${2:<PATTERN>},&${3:[TARGET]},${4:[GROUP]},${5:[DEFAULT]});"},
		{ "trigger": "MAXPLAYERS\tAmount of players the server can hold", "contents": "%MAXPLAYERS%"},
		{ "trigger": "MIDDLEMOUSE", "contents": "%MIDDLEMOUSE%"},
		{ "trigger": "MODE\tGamemode of the player as a number", "contents": "%MODE%"},
		{ "trigger": "MODIFY\tSet new content for this chat message", "contents": "MODIFY(${1:<NEWMESSAGE>});"},
		{ "trigger": "MUSIC\tVolume level for Music", "contents": "%MUSIC%"},
		{ "trigger": "MUSIC\tSets the music volume, specifying time causes the value to change smoothly", "contents": "MUSIC(${1:<VALUE>},${2:[TIME]});"},
		{ "trigger": "NEUTRALVOLUME\tVolume level for Friendly Creatures", "contents": "%NEUTRALVOLUME%"},
		{ "trigger": "NEXT\tCompletes a for or foreach loop", "contents": "NEXT;"},
		{ "trigger": "OFFHANDCOOLDOWN\tOffhand cooldown", "contents": "%OFFHANDCOOLDOWN%"},
		{ "trigger": "OFFHANDDURABILITY\tDurability of the offhand item", "contents": "%OFFHANDDURABILITY%"},
		{ "trigger": "OFFHANDITEM\tID of the offhand item", "contents": "%OFFHANDITEM%"},
		{ "trigger": "OFFHANDITEMCODE\tInternal code for the offhand item", "contents": "%OFFHANDITEMCODE%"},
		{ "trigger": "OFFHANDITEMDAMAGE\tMaximum uses of the offhand item", "contents": "%OFFHANDITEMDAMAGE%"},
		{ "trigger": "OFFHANDITEMIDDMG\tID and durability seperated by a colon of the offhand item", "contents": "%OFFHANDITEMIDDMG%"},
		{ "trigger": "OFFHANDITEMNAME\tDisplayname for the offhand item", "contents": "%OFFHANDITEMNAME%"},
		{ "trigger": "OFFHANDSTACKSIZE\tStacksize of the offhand item", "contents": "%OFFHANDSTACKSIZE%"},
		{ "trigger": "OLDINVSLOT\t(onInventorySlotChange) Selected inventory slot before it was changed", "contents": "%OLDINVSLOT%"},
		{ "trigger": "ONLINEPLAYERS\tAmount of players currently on the server", "contents": "%ONLINEPLAYERS%"},
		{ "trigger": "OXYGEN\tAir Level (from 0 to 300)", "contents": "%OXYGEN%"},
		{ "trigger": "PASS\tIndicate that this chat message should PASS the filter and terminate", "contents": "PASS;"},
		{ "trigger": "PICK\tSelects the specified item id if it is on the hotbar", "contents": "PICK(${1:<ITEM>}:${2:[DAMAGE]},${3:<ITEM>}:${4:[DAMAGE]}${5:,...});"},
		{ "trigger": "PICKUPAMOUNT\t(onPickupItem) Amount of items picked up", "contents": "%PICKUPAMOUNT%"},
		{ "trigger": "PICKUPDATA\t(onPickupItem) Metadata of the picked up item", "contents": "%PICKUPDATA%"},
		{ "trigger": "PICKUPID\t(onPickupItem) Item id of the picked up item", "contents": "%PICKUPID%"},
		{ "trigger": "PICKUPITEM\t(onPickupItem) Display name of the picked up item", "contents": "%PICKUPITEM%"},
		{ "trigger": "PITCH\tPitch of the player", "contents": "%PITCH%"},
		{ "trigger": "PLACESIGN\tPlaces a sign in the world with the specified text", "contents": "PLACESIGN(${1:[LINE1]},${2:[LINE2]},${3:[LINE3]},${4:[LINE4]},${5:[SHOWGUI]});"},
		{ "trigger": "PLAYER\tPlayer's name", "contents": "%PLAYER%"},
		{ "trigger": "PLAYERNAME\t(players iterator) The current player", "contents": "%PLAYERNAME%"},
		{ "trigger": "PLAYERS\tIterates over all online players", "contents": "PLAYERS"},
		{ "trigger": "PLAYERVOLUME\tVolume level for Players", "contents": "%PLAYERVOLUME%"},
		{ "trigger": "PLAYSOUND\tPlays the specified sound", "contents": "PLAYSOUND(${1:<SOUND>},${2:[VOLUME]});"},
		{ "trigger": "POP\tRemoves the last entry from the end of array and stores it in outvar", "contents": "POP(${1:<ARRAY>}[],${2:<OUTVAR>});"},
		{ "trigger": "POPUPMESSAGE\tDisplay a message in the area above the hotbar", "contents": "POPUPMESSAGE(${1:<MESSAGE>},${2:[ANIMATE]});"},
		{ "trigger": "PRESS\tInjects the specified key event directly into the keyboard buffer for 1 tick", "contents": "PRESS(${1:<LWJGL_NAME>},${2:[DEEP]});"},
		{ "trigger": "PROMPT\tDisplays a prompt by parsing the params in paramstring", "contents": "PROMPT(&${1:<TARGET>},${2:<PARAMSTRING>},${3:[PROMPT]},${4:[OVERRIDE]},${5:[DEFAULT]});"},
		{ "trigger": "PROPERTIES\tIterates over all properties of the block you are looking at", "contents": "PROPERTIES"},
		{ "trigger": "PROPNAME\t(properties iterator) The name of the current property", "contents": "%PROPNAME%"},
		{ "trigger": "PROPVALUE\t(properties iterator) The value of the current property", "contents": "%PROPVALUE%"},
		{ "trigger": "PUSH\tAppends value to the end of array[]", "contents": "PUSH(${1:<ARRAY>}[],${2:<VALUE>});"},
		{ "trigger": "PUT\tInserts value at the first empty point in array[]", "contents": "PUT(${1:<ARRAY>}[],${2:<VALUE>});"},
		{ "trigger": "RAIN\tRain level", "contents": "%RAIN%"},
		{ "trigger": "RANDOM\tAssigns a random number between min and max to target", "contents": "RANDOM(#${1:<TARGET>},${2:[MAX]},${3:[MIN])};"},
		{ "trigger": "REASON\t(onAutoCraftingComplete) The reason why the crafting was completed or aborted", "contents": "%REASON%"},
		{ "trigger": "RECORDVOLUME\tVolume level for Jukebox/Noteblocks", "contents": "%RECORDVOLUME%"},
		{ "trigger": "REGEXREPLACE\tReplace all matches of pattern with replace in &subject", "contents": "REGEXREPLACE(&${1:<SUBJECT>},${2:<PATTERN>},${3:[REPLACE]});"},
		{ "trigger": "RELOADRESOURCES\tReloads resource packs, same as pressing F3 + T", "contents": "RELOADRESOURCES;"},
		{ "trigger": "REPL\tAccess the REPL interface", "contents": "REPL;"},
		{ "trigger": "REPLACE\tReplace all occurrences of search with replace in &subject", "contents": "REPLACE(&${1:<SUBJECT>},${2:<SEARCH>},${3:[REPLACE]});"},
		{ "trigger": "RESOURCEPACK", "contents": "RESOURCEPACK([PATTERN]);"},
		{ "trigger": "RESOURCEPACKS\tSets the resource pack stack to the order matching the specified patterns", "contents": "RESOURCEPACKS(${1:[PATTERN]},${2:[PATTERN...]});"},
		{ "trigger": "RESOURCEPACKS[]\tArray of selected resource packs", "contents": "%RESOURCEPACKS[]%"},
		{ "trigger": "RESPAWN\tRespawns the player if you are dead", "contents": "RESPAWN();"},
		{ "trigger": "RM\tRemoves (deletes) the specified file", "contents": "RM ${1:<FILE.TXT>};"},
		{ "trigger": "RMOUSE", "contents": "%RMOUSE%"},
		{ "trigger": "RUN\tRuns the specified script from cloudscript", "contents": "RUN(${1:<CLOUDSCRIPT>});"},
		{ "trigger": "RUN\tRuns the specified script synchronously", "contents": "RUN ${1:<FILE.TXT>} ${2:[ARG1]} ${3:[ARG2]};"},
		{ "trigger": "RUNNING\tIterates over all currently running macros", "contents": "RUNNING"},
		{ "trigger": "SATURATION\tSaturation level (normally hidden from the Player)", "contents": "%SATURATION%"},
		{ "trigger": "SAY\tSends the specified message as chat or remotely", "contents": "SAY ${1:<MESSAGE>};"},
		{ "trigger": "SCREEN\tName of the current custom GUI", "contents": "%SCREEN%"},
		{ "trigger": "SCREENNAME\tDisplay name of the current custom GUI", "contents": "%SCREENNAME%"},
		{ "trigger": "SEED\tSeed of the world (only available in SP)", "contents": "%SEED%"},
		{ "trigger": "SELECTCHANNEL", "contents": "SELECTCHANNEL(${1:<CHANNEL>});"},
		{ "trigger": "SENDMESSAGE", "contents": "SENDMESSAGE(${1:[PARAMS]});"},
		{ "trigger": "SENSITIVITY\tSensitivity", "contents": "%SENSITIVITY%"},
		{ "trigger": "SENSITIVITY\tSets the mouse sensitivity, specifying time causes the value to change smoothly", "contents": "SENSITIVITY(${1:<VALUE>},${2:[TIME]});"},
		{ "trigger": "SERVER\tIP of the server", "contents": "%SERVER%"},
		{ "trigger": "SERVERMOTD\tMotto of the day of the server", "contents": "%SERVERMOTD%"},
		{ "trigger": "SERVERNAME\tName of the server", "contents": "%SERVERNAME%"},
		{ "trigger": "SET\tSets the value of target to value", "contents": "SET(${1:<TARGET>},${2:[VALUE]});"},
		{ "trigger": "SETLABEL\tSets the text (and optionally binding) of the specified label", "contents": "SETLABEL(${1:<LABELNAME>},${2:<TEXT>},${3:[BINDING]});"},
		{ "trigger": "SETPROPERTY\tSets the value of the specified property on the specified GUI control", "contents": "SETPROPERTY(${1:<CONTROL>},${2:<PROPERTY>},${3:<VALUE>});"},
		{ "trigger": "SETRES\tSets the size of the minecraft game window", "contents": "SETRES(${1:<WIDTH>},${2:<HEIGHT>});"},
		{ "trigger": "SETSLOTITEM\tCreative mode only, set the contents of a hot bar slot", "contents": "SETSLOTITEM(${1:<ITEM>}:${2:[DAMAGE]},${3:[SLOT]},${4:[AMOUNT]});"},
		{ "trigger": "SHADERGROUP\tSelected shader", "contents": "%SHADERGROUP%"},
		{ "trigger": "SHADERGROUP\tSets the active shader group to the shader matching path", "contents": "SHADERGROUP(${1:[PATH]});"},
		{ "trigger": "SHADERGROUPS[]\tArray of available shaders", "contents": "%SHADERGROUPS[]%"},
		{ "trigger": "SHIFT", "contents": "%SHIFT%"},
		{ "trigger": "SHOWGUI\tShow a custom gui screen, creates it if it doesn't exist", "contents": "SHOWGUI(${1:<SCREEN>},${2:[ESC_SCREEN]},${3:[MACRO_KEYS]});"},
		{ "trigger": "SHUTDOWN\tShut down the minecraft client", "contents": "SHUTDOWN;"},
		{ "trigger": "SIGNTEXT[]\tArray of lines on a sign the Player is looking at", "contents": "%SIGNTEXT[]%"},
		{ "trigger": "SLOT\tSelects the specified slot on the hot bar", "contents": "SLOT(${1:<SLOT>});"},
		{ "trigger": "SLOTCLICK\tSimulates clicking on the specified slot in the current GUI", "contents": "SLOTCLICK(${1:<SLOT>},${2:[BUTTON]},${3:[SHIFT]});"},
		{ "trigger": "SOUND\tMaster Volume level", "contents": "%SOUND%"},
		{ "trigger": "SPLIT\tSplits the supplied source string on every delimiter into output[]", "contents": "SPLIT(${1:<DELIMITER>},${2:<SOURCE>},${3:[OUTPUT]}[]);"},
		{ "trigger": "SPRINT\tSets the player state to sprinting if sufficient stamina (food)", "contents": "SPRINT();"},
		{ "trigger": "SQRT\tCalculate the rounded square root of value and store it in #outvar", "contents": "SQRT(${1:<VALUE>},#${2:[OUTVAR]});"},
		{ "trigger": "STACKSIZE\tStack size of the equipped item", "contents": "%STACKSIZE%"},
		{ "trigger": "STOP\tStops the current macro, or macros matching the specified ID", "contents": "STOP(${1:[ID]});"},
		{ "trigger": "STORE\tStores a value into one of the predefined parameter lists", "contents": "STORE(${1:<TYPE>},${2:[NAME]});"},
		{ "trigger": "STOREOVER\tStores a value into one of the predefined parameter lists and overwrites an entry if it already exists", "contents": "STOREOVER(${1:<TYPE>},${2:[NAME]});"},
		{ "trigger": "STRIP\tStrips all formatting codes from the specified text and assigns the result to &target", "contents": "STRIP(&${1:<TARGET>},${2:<TEXT>});"},
		{ "trigger": "TASKS\tList currently executing tasks", "contents": "TASKS;"},
		{ "trigger": "TEXTUREPACK", "contents": "TEXTUREPACK${1:([PATTERN]});"},
		{ "trigger": "TEXTUREPACK", "contents": "%TEXTUREPACK%"},
		{ "trigger": "TICKS\tcurrent world time value (which will be a static number if doDayNightCycle game rule is false)", "contents": "%TICKS%"},
		{ "trigger": "TILEID\tGets the legacy (numeric) ID for the specified tile", "contents": "TILEID(${1:<ITEM>});"},
		{ "trigger": "TILENAME\tGet the descriptor for a legacy (numeric) tile ID", "contents": "TILENAME(${1:<ID>});"},
		{ "trigger": "TIME\tStores the current time and date into &target, optionally using format specified", "contents": "TIME(&${1:<TARGET>},${2:[FORMAT]});"},
		{ "trigger": "TIME\tCurrent time in the format hour:minute:second", "contents": "%TIME%"},
		{ "trigger": "TIMESTAMP\tUNIX Timestamp", "contents": "%TIMESTAMP%"},
		{ "trigger": "TITLE\tDisplays the specified custom title, call with no arguments to hide current titles", "contents": "TITLE(${1:[TITLE]},${2:[SUBTITLE]},${3:[INTICKS]},${4:[SHOWTICKS]},${5:[OUTTICKS]});"},
		{ "trigger": "TOAST\tDisplays an user-defined toast", "contents": "TOAST(${1:[TYPE]},${2:[ICON]},${3:[TEXT1]},${4:[TEXT2]},${5:[TICKS]});"},
		{ "trigger": "TOGGLE\tToggles the specified boolean flag value", "contents": "TOGGLE(${1:[FLAG]});"},
		{ "trigger": "TOGGLEKEY\tToggles the pressed state of the specified key binding, only works with pressable bindings", "contents": "TOGGLEKEY(${1:<BIND>});"},
		{ "trigger": "TOTALTICKS\tcurrent total world time (which increases all the time regardless of the gamerule doDayNightCycle)", "contents": "%TOTALTICKS%"},
		{ "trigger": "TOTALXP\tTotal amount of experience points", "contents": "%TOTALXP%"},
		{ "trigger": "TRACE\tPerforms a ray trace operation which sets the raytrace variables in the local scope", "contents": "TRACE(${1:<DISTANCE>},${2:[ENTITIES]});"},
		{ "trigger": "TRACE_AGE", "contents": "%TRACE_AGE%"},
		{ "trigger": "TRACE_ATTACHED", "contents": "%TRACE_ATTACHED%"},
		{ "trigger": "TRACE_AXIS", "contents": "%TRACE_AXIS%"},
		{ "trigger": "TRACE_BITES", "contents": "%TRACE_BITES%"},
		{ "trigger": "TRACE_CHECK_DECAY", "contents": "%TRACE_CHECK_DECAY%"},
		{ "trigger": "TRACE_COLOR", "contents": "%TRACE_COLOR%"},
		{ "trigger": "TRACE_CONDITIONAL", "contents": "%TRACE_CONDITIONAL%"},
		{ "trigger": "TRACE_CONTENTS", "contents": "%TRACE_CONTENTS%"},
		{ "trigger": "TRACE_DAMAGE", "contents": "%TRACE_DAMAGE%"},
		{ "trigger": "TRACE_DECAYABLE", "contents": "%TRACE_DECAYABLE%"},
		{ "trigger": "TRACE_DELAY", "contents": "%TRACE_DELAY%"},
		{ "trigger": "TRACE_DISARMED", "contents": "%TRACE_DISARMED%"},
		{ "trigger": "TRACE_DOWN", "contents": "%TRACE_DOWN%"},
		{ "trigger": "TRACE_EAST", "contents": "%TRACE_EAST%"},
		{ "trigger": "TRACE_ENABLED", "contents": "%TRACE_ENABLED%"},
		{ "trigger": "TRACE_EXPLODE", "contents": "%TRACE_EXPLODE%"},
		{ "trigger": "TRACE_EXTENDED", "contents": "%TRACE_EXTENDED%"},
		{ "trigger": "TRACE_EYE", "contents": "%TRACE_EYE%"},
		{ "trigger": "TRACE_FACING", "contents": "%TRACE_FACING%"},
		{ "trigger": "TRACE_HALF", "contents": "%TRACE_HALF%"},
		{ "trigger": "TRACE_HAS_BOTTLE_0", "contents": "%TRACE_HAS_BOTTLE_0%"},
		{ "trigger": "TRACE_HAS_BOTTLE_1", "contents": "%TRACE_HAS_BOTTLE_1%"},
		{ "trigger": "TRACE_HAS_BOTTLE_2", "contents": "%TRACE_HAS_BOTTLE_2%"},
		{ "trigger": "TRACE_HAS_RECORD", "contents": "%TRACE_HAS_RECORD%"},
		{ "trigger": "TRACE_HINGE", "contents": "%TRACE_HINGE%"},
		{ "trigger": "TRACE_IN_WALL", "contents": "%TRACE_IN_WALL%"},
		{ "trigger": "TRACE_LAYERS", "contents": "%TRACE_LAYERS%"},
		{ "trigger": "TRACE_LEGACY_DATA", "contents": "%TRACE_LEGACY_DATA%"},
		{ "trigger": "TRACE_LEVEL", "contents": "%TRACE_LEVEL%"},
		{ "trigger": "TRACE_LOCKED", "contents": "%TRACE_LOCKED%"},
		{ "trigger": "TRACE_MODE", "contents": "%TRACE_MODE%"},
		{ "trigger": "TRACE_MOISTURE", "contents": "%TRACE_MOISTURE%"},
		{ "trigger": "TRACE_NODROP", "contents": "%TRACE_NODROP%"},
		{ "trigger": "TRACE_NORTH", "contents": "%TRACE_NORTH%"},
		{ "trigger": "TRACE_OCCUPIED", "contents": "%TRACE_OCCUPIED%"},
		{ "trigger": "TRACE_OPEN", "contents": "%TRACE_OPEN%"},
		{ "trigger": "TRACE_PART", "contents": "%TRACE_PART%"},
		{ "trigger": "TRACE_POWER", "contents": "%TRACE_POWER%"},
		{ "trigger": "TRACE_POWERED", "contents": "%TRACE_POWERED%"},
		{ "trigger": "TRACE_ROTATION", "contents": "%TRACE_ROTATION%"},
		{ "trigger": "TRACE_SEAMLESS", "contents": "%TRACE_SEAMLESS%"},
		{ "trigger": "TRACE_SHAPE", "contents": "%TRACE_SHAPE%"},
		{ "trigger": "TRACE_SHORT", "contents": "%TRACE_SHORT%"},
		{ "trigger": "TRACE_SNOWY", "contents": "%TRACE_SNOWY%"},
		{ "trigger": "TRACE_SOUTH", "contents": "%TRACE_SOUTH%"},
		{ "trigger": "TRACE_STAGE", "contents": "%TRACE_STAGE%"},
		{ "trigger": "TRACE_TRIGGERED", "contents": "%TRACE_TRIGGERED%"},
		{ "trigger": "TRACE_TYPE", "contents": "%TRACE_TYPE%"},
		{ "trigger": "TRACE_UP", "contents": "%TRACE_UP%"},
		{ "trigger": "TRACE_VARIANT", "contents": "%TRACE_VARIANT%"},
		{ "trigger": "TRACE_WEST", "contents": "%TRACE_WEST%"},
		{ "trigger": "TRACE_WET", "contents": "%TRACE_WET%"},
		{ "trigger": "TRACEDATA\tMetadata of the block", "contents": "%TRACEDATA%"},
		{ "trigger": "TRACEID\tThe id", "contents": "%TRACEID%"},
		{ "trigger": "TRACENAME\tThe name", "contents": "%TRACENAME%"},
		{ "trigger": "TRACESIDE\tSide of the block", "contents": "%TRACESIDE%"},
		{ "trigger": "TRACETYPE\tThe type of the result", "contents": "%TRACETYPE%"},
		{ "trigger": "TRACEUUID\tReturns the UUID of other players", "contents": "%TRACEUUID%"},
		{ "trigger": "TRACEX\tX position", "contents": "%TRACEX%"},
		{ "trigger": "TRACEY\tY position", "contents": "%TRACEY%"},
		{ "trigger": "TRACEZ\tZ position", "contents": "%TRACEZ%"},
		{ "trigger": "TYPE\tInjects the specified key sequence directly into the keyboard buffer at a rate of 1 key per tick", "contents": "TYPE(${1:<TEXT>});"},
		{ "trigger": "UCASE\tConverts the input string to upper case and stores it in output", "contents": "UCASE(${1:<INPUT>},&${2:[OUTPUT]});"},
		{ "trigger": "UNIMPORT\tRemove the specified configuration overlay if active", "contents": "UNIMPORT();"},
		{ "trigger": "UNIQUEID\tReturns a new UUID everytime it is accessed", "contents": "%UNIQUEID%"},
		{ "trigger": "UNSET\tUn-sets the specified flag variable", "contents": "UNSET(${1:<FLAG>});"},
		{ "trigger": "UNSPRINT\tSets the player state to not sprinting", "contents": "UNSPRINT();"},
		{ "trigger": "UUID\tUUID of the Player", "contents": "%UUID%"},
		{ "trigger": "VARNAME\t(env iterator) Contains the variable name", "contents": "%VARNAME%"},
		{ "trigger": "VEHICLE\tVehicle type", "contents": "%VEHICLE%"},
		{ "trigger": "VEHICLEHEALTH\tVehicle health", "contents": "%VEHICLEHEALTH%"},
		{ "trigger": "VERSION\tDisplays current version", "contents": "VERSION;"},
		{ "trigger": "VOLUME\tSets the sound volume for the specified category", "contents": "VOLUME(${1:<VALUE>},${2:[CATEGORY]});"},
		{ "trigger": "WAIT\tPauses the script for the time specified", "contents": "WAIT(${1:<TIME>});"},
		{ "trigger": "WALKTO\tWas never offically in the mod", "contents": "WALKTO(${1:<X>},${2:<Y>},${3:<Z>},${4:[SPEED]},${5:[RADIUS]});"},
		{ "trigger": "WEATHERVOLUME\tVolume level for Weather", "contents": "%WEATHERVOLUME%"},
		{ "trigger": "WHOAMI\tDisplays current user name", "contents": "WHOAMI;"},
		{ "trigger": "XP\tCurrent amount of experience points", "contents": "%XP%"},
		{ "trigger": "XPOS\tPosition in X direction", "contents": "%XPOS%"},
		{ "trigger": "XPOSF\tThe position in X direction with three decimal places after the comma as a string", "contents": "%XPOSF%"},
		{ "trigger": "YAW\tYaw of the player", "contents": "%YAW%"},
		{ "trigger": "YPOS\tPosition in Y direction", "contents": "%YPOS%"},
		{ "trigger": "YPOSF\tThe position in Y direction with three decimal places after the comma as a string", "contents": "%YPOSF%"},
		{ "trigger": "ZPOS\tPosition in Z direction", "contents": "%ZPOS%"},
		{ "trigger": "ZPOSF\tThe position in Z direction with three decimal places after the comma as a string", "contents": "%ZPOSF%"},
	]
}