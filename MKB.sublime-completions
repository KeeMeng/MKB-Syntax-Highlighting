{
	"scope": "source.mkb",
	// Tip: Command k + 2 to collapse all completitions!
	"completions": 
	[
		// { "trigger": "", "kind": "keyword", "details": "", "contents": ""},

	// Control Flow
		{ "trigger": "if", "kind": "snippet", "annotation": "…endif", "details": "Executes if the &#60;condition&#62; evaluates to true", "contents": "if(${1:<condition>});\n	$2\nendif;\n$3"},
		{ "trigger": "ifbeginswith", "kind": "snippet",  "annotation": "…endif", "details": "Executes if the &#60;haystack&#62; starts with the &#60;needle&#62;","contents": "ifbeginswith(${1:<haystack>},${2:<needle>});\n	$3\nendif;\n$4"},
		{ "trigger": "ifendswith", "kind": "snippet", "annotation": "…endif", "details": "Executes if the &#60;haystack&#62; ends with the &#60;needle&#62;", "contents": "ifendswith(${1:<haystack>},${2:<needle>});\n	$3\nendif;\n$4"},
		{ "trigger": "ifcontains", "kind": "snippet", "annotation": "…endif", "details": "Executes if the &#60;haystack&#62; contains the &#60;needle&#62;", "contents": "ifcontains(${1:<haystack>},${2:<needle>});\n	$3\nendif;\n$4"},
		{ "trigger": "ifmatches", "kind": "snippet", "annotation": "…endif", "details": "Executes if the &#60;subject&#62; matches the &#60;pattern&#62;", "contents": "ifmatches(${1:<subject>},${2:<pattern>},&${3:[target]},${4:[group]});\n	$5\nendif;\n$6"},
		{ "trigger": "endif", "kind": "keyword", "annotation": "…endif", "details": "Ends an if-clause", "contents": "endif;\n$1"},

		{ "trigger": "for", "kind": "snippet", "annotation": "for(var,start,end)…next", "details": "Begins a for loop", "contents": "for(#${1:<var>},${2:<start>},${3:<end>});\n	$4\nnext;\n$5"},
		{ "trigger": "for", "kind": "snippet", "annotation": "for(var = start to end)…next", "details": "Begins a for loop", "contents": "for(#${1:<var>} = ${2:<start>} to ${3:<end>});\n	$4\nnext;\n$5"},
		{ "trigger": "for", "kind": "snippet", "annotation": "for(var = start to end step)…next", "details": "Begins a for loop", "contents": "for(#${1:<var>} = ${2:<start>} to ${3:<end>} step ${4:<step>});\n	$5\nnext;\n$6"},
		{ "trigger": "foreach", "kind": "snippet", "annotation": "foreach(iterator)…next", "details": "Begins a loop over the specified iterator", "contents": "foreach(${1:<iterator>});\n	$2\nnext;\n$3"},
		{ "trigger": "foreach", "kind": "snippet", "annotation": "foreach(array,content,index)…next", "details": "Begins a loop over the specified iterator", "contents": "foreach(${1:<array>}[],${2:<content>},#${3:[index]});\n	$4\nnext;\n$5"},
		{ "trigger": "foreach", "kind": "snippet", "annotation": "foreach(array as content)…next", "details": "Begins a loop over the specified iterator", "contents": "foreach(${1:<array>}[] as &${2:<content>});\n	$3\nnext;\n$4"},
		{ "trigger": "foreach", "kind": "snippet", "annotation": "foreach(array as index =&#62; content)…next", "details": "Begins a loop over the specified iterator", "contents": "foreach(${1:<array>}[] as #${2:<index>} => ${3:<content>});\n	$4\nnext;\n$5"},
		{ "trigger": "do", "kind": "snippet", "annotation": "…loop", "details": "Begins a loop", "contents": "do(${1:[count]});\n	$2\nloop;$3"},
		{ "trigger": "do", "kind": "snippet", "annotation": "…while", "details": "Begins a loop", "contents": "do(${1:[count]});\n	$2\nwhile(${3:<condition>});$4"},
		{ "trigger": "do", "kind": "snippet", "annotation": "…until", "details": "Begins a loop", "contents": "do(${1:[count]});\n	$2\nuntil(${3:<condition>});$4"},

		{ "trigger": "else", "kind": "keyword", "details": "Executes if no if-clause before evaluated to true", "contents": "else;\n	$1"},
		{ "trigger": "elseif", "kind": "keyword", "details": "Executes if the evaluates to true and no if-clause before evaluated to true", "contents": "elseif(${1:<condition>});\n	$2"},
		{ "trigger": "loop", "kind": "keyword", "details": "Closes a do loop", "contents": "loop;\n$1"},
		{ "trigger": "while", "kind": "keyword", "details": "Exits do loop if the &#60;condition&#62; is not met", "contents": "while(${1:<condition>});\n$2"},
		{ "trigger": "until", "kind": "keyword", "details": "Exits do loop if the &#60;condition&#62; is met", "contents": "until(${1:<condition>});\n$2"},

		{ "trigger": "elseifbeginswith", "kind": "keyword", "details": "Executes if the &#60;haystack&#62; starts with the &#60;needle&#62; and no if-clause before evaluated to true", "contents": "elseifbeginswith(${1:<haystack>},${2:<needle>});\n	$3"},
		{ "trigger": "elseifcanharvestblock", "kind": "keyword", "details": "Executes if the &#60;blockid&#62; can currently be harvested and no if-clause before evaluated to true", "contents": "elseifcanharvestblock(${1:<blockid>});\n	$2"},
		{ "trigger": "elseifcontains", "kind": "keyword", "details": "Executes if the &#60;haystack&#62; contains the &#60;needle&#62; and no if-clause before evaluated to true", "contents": "elseifcontains(${1:<haystack>},${2:<needle>});\n	$3"},
		{ "trigger": "elseifenchanted", "kind": "keyword", "details": "Executes if the item at &#60;slot&#62; is enchanted and no if-clause before evaluated to true", "contents": "elseifenchanted(${1:<slot>},&${2:[item]},#${3:[stacksize]},#${4:[datavar]},&${5:[nbt]});\n	$6"},
		{ "trigger": "elseifendswith", "kind": "keyword", "details": "Executes if the &#60;haystack&#62; ends with the &#60;needle&#62; and no if-clause before evaluated to true", "contents": "elseifendswith(${1:<haystack>},${2:<needle>});\n	$3"},
		{ "trigger": "elseiffileexist", "kind": "keyword", "details": "Executes if the file exists at &#60;path&#62; and no if-clause before evaluated to true", "contents": "elseiffileexists(${1:<path>},${2:[expression if file should be created if missing]});\n	$3"},
		{ "trigger": "elseifininv", "kind": "keyword", "details": "Executes if the &#60;items&#62; are in the inventory and no if-clause before evaluated to true", "contents": "elseifininv(${1:[mode]},${2:<items>});\n	$3"},
		{ "trigger": "elseifinvisfull", "kind": "keyword", "details": "Executes if the inventory is full and no if-clause before evaluated to true", "contents": "elseifinvisfull(${1:[item]});\n	$2"},
		{ "trigger": "elseifmatches", "kind": "keyword", "details": "Executes if the &#60;subject&#62; matches the &#60;pattern&#62; and no if-clause before evaluated to true", "contents": "elseifmatches(${1:<subject>},${2:<pattern>},&${3:[target]},${4:[group]});\n	$5"},

		{ "trigger": "whilebeginswith", "kind": "keyword", "details": "Exits do loop if &#60;haystack&#62; does not start with the &#60;needle&#62;", "contents": "whilebeginswith(${1:<haystack>},${2:<needle>});\n$3"},
		{ "trigger": "whilecanharvestblock", "kind": "keyword", "details": "Exits do loop if the &#60;blockid&#62; cannot currently be harvested", "contents": "whilecanharvestblock(${1:<blockid>});\n$2"},
		{ "trigger": "whilecontains", "kind": "keyword", "details": "Exits do loop if &#60;haystack&#62; does not contain the &#60;needle&#62;", "contents": "whilecontains(${1:<haystack>},${2:<needle>});\n$3"},
		{ "trigger": "whileenchanted", "kind": "keyword", "details": "Exits do loop if the item at &#60;slot&#62; is not enchanted", "contents": "whileenchanted(${1:<slot>},&${2:[item]},#${3:[stacksize]},#${4:[datavar]},&${5:[nbt]});\n$6"},
		{ "trigger": "whileendswith", "kind": "keyword", "details": "Exits do loop if &#60;haystack&#62; does not end with the &#60;needle&#62;", "contents": "whileendswith(${1:<haystack>},${2:<needle>});\n$3"},
		{ "trigger": "whilefileexist", "kind": "keyword", "details": "Exits do loop if the file does not exist at &#60;path&#62;", "contents": "whilefileexists(${1:<path>},${2:[expression if file should be created if missing]});\n$3"},
		{ "trigger": "whileininv", "kind": "keyword", "details": "Exits do loop if the &#60;items&#62; are not in the inventory", "contents": "whileininv(${1:[mode]},${2:<items>});\n$3"},
		{ "trigger": "whileinvisfull", "kind": "keyword", "details": "Exits do loop if the inventory is not full", "contents": "whileinvisfull(${1:[item]});\n$2"},
		{ "trigger": "whilematches", "kind": "keyword", "details": "Exits do loop if the &#60;subject&#62; does not match the &#60;pattern&#62;", "contents": "whilematches(${1:<subject>},${2:<pattern>},&${3:[target]},${4:[group]});\n$5"},

		{ "trigger": "untilbeginswith", "kind": "keyword", "details": "Exits do loop if &#60;haystack&#62; starts with the &#60;needle&#62;", "contents": "untilbeginswith(${1:<haystack>},${2:<needle>});\n$3"},
		{ "trigger": "untilcanharvestblock", "kind": "keyword", "details": "Exits do loop if the &#60;blockid&#62; can currently be harvested", "contents": "untilcanharvestblock(${1:<blockid>});\n$2"},
		{ "trigger": "untilcontains", "kind": "keyword", "details": "Exits do loop if &#60;haystack&#62; contains the &#60;needle&#62;", "contents": "untilcontains(${1:<haystack>},${2:<needle>});\n$3"},
		{ "trigger": "untilenchanted", "kind": "keyword", "details": "Exits do loop if the item at &#60;slot&#62; is enchanted", "contents": "untilenchanted(${1:<slot>},&${2:[item]},#${3:[stacksize]},#${4:[datavar]},&${5:[nbt]});\n$6"},
		{ "trigger": "untilendswith", "kind": "keyword", "details": "Exits do loop if &#60;haystack&#62; ends with the &#60;needle&#62;", "contents": "untilendswith(${1:<haystack>},${2:<needle>});\n$3"},
		{ "trigger": "untilfileexist", "kind": "keyword", "details": "Exits do loop if the file exists at &#60;path&#62;", "contents": "untilfileexists(${1:<path>},${2:[expression if file should be created if missing]});\n$3"},
		{ "trigger": "untilininv", "kind": "keyword", "details": "Exits do loop if the &#60;items&#62; are in the inventory", "contents": "untilininv(${1:[mode]},${2:<items>});\n$3"},
		{ "trigger": "untilinvisfull", "kind": "keyword", "details": "Exits do loop if the inventory is full", "contents": "untilinvisfull(${1:[item]});\n$2"},
		{ "trigger": "untilmatches", "kind": "keyword", "details": "Exits do loop if the &#60;subject&#62; matches the &#60;pattern&#62;", "contents": "untilmatches(${1:<subject>},${2:<pattern>},&${3:[target]},${4:[group]});\n$5"},

		{ "trigger": "unsafe", "kind": "snippet", "annotation": "…endunsafe", "details": "Begins an unsafe block with maximum executions set to &#60;executions&#62;", "contents": "unsafe(${1:<executions>});\n	$2\nendunsafe;\n$3"},
		{ "trigger": "endunsafe", "kind": "keyword", "details": "Ends an active unsafe block", "contents": "endunsafe;\n$1"},


	// My custom completions
		{ "trigger": "function: print", "kind": "function", "details": "custom function definition to print &#60;text&#62;", "contents": "function print(&text);\n\tlog(\"%&text%\");\nendfunction;\n\nprint(${1:<text>});\n"},
		{ "trigger": "print", "kind": "keyword", "details": "custom function call to print &#60;text&#62;", "contents": "print(${1:<text>});"},



	// AEI Module
		{ "trigger": "getiteminfo", "kind": "keyword", "annotation": "(AEI Module)", "details": "Gets information about the specified slot", "contents": "getiteminfo(${1:<slot>},&${2:[idvar]},#${3:[stacksize]},#${4:[datavar]},&${5:[display]},&${6:[lore]});"},
		{ "trigger": "getguiname", "kind": "keyword", "annotation": "(AEI Module)", "details": "Gets the display name of the current GUI", "contents": "getguiname(&${1:<name>});"},
		{ "trigger": "invfull", "kind": "keyword", "annotation": "(AEI Module)", "details": "Returns empty or full in the string defined", "contents": "invfull(&${1:<string>});"},
		{ "trigger": "MODULEAEI", "kind": "variable", "annotation": "(AEI Module)", "details": "Returns true if the module is installed", "contents": "%MODULEAEI%"},

	// anvilRename Module
		{ "trigger": "setanviltext", "kind": "keyword", "annotation": "(anvilRename Module)", "details": "set name to string", "contents": "setanviltext(${1:<string>});"},
		{ "trigger": "MODULEANVIL", "kind": "variable", "annotation": "(anvilRename Module)", "details": "Returns true if the module is installed", "contents": "%MODULEANVIL%"},

	// BaritoneAddon Module
		{ "trigger": "baritone", "kind": "keyword", "annotation": "(BaritoneAddon Module)", "details": "Runs any baritone command", "contents": "baritone(${1:<command>});"},
		{ "trigger": "goto", "kind": "keyword", "annotation": "(BaritoneAddon Module)", "details": "Pathfinds to specified coordinates", "contents": "goto(${1:<x>},${2:<y>},${3:<z>});"},
		{ "trigger": "setting", "kind": "keyword", "annotation": "(BaritoneAddon Module)", "details": "Changes baritone setting", "contents": "setting(${1:<settingname>},${2:<value>});"},
		{ "trigger": "cancel", "kind": "keyword", "annotation": "(BaritoneAddon Module)", "details": "Cancels current process", "contents": "cancel();"},
		{ "trigger": "pause", "kind": "keyword", "annotation": "(BaritoneAddon Module)", "details": "Pauses current process", "contents": "pause();"},
		{ "trigger": "resume", "kind": "keyword", "annotation": "(BaritoneAddon Module)", "details": "Resumes current process", "contents": "resume();"},
		{ "trigger": "mine", "kind": "keyword", "annotation": "(BaritoneAddon Module)", "details": "Searchs and mines provied block", "contents": "mine(${1:<blockname>});"},
		{ "trigger": "farm", "kind": "keyword", "annotation": "(BaritoneAddon Module)", "details": "Farms near by crops toggle replant", "contents": "farm();"},
		{ "trigger": "selstart", "kind": "keyword", "annotation": "(BaritoneAddon Module)", "details": "Sets pos1 of selection", "contents": "selstart(${1:<x>},${2:<y>},${3:<z>});"},
		{ "trigger": "selend", "kind": "keyword", "annotation": "(BaritoneAddon Module)", "details": "Sets pos2 of selection", "contents": "selend(${1:<x>},${2:<y>},${3:<z>});"},
		{ "trigger": "selclear", "kind": "keyword", "annotation": "(BaritoneAddon Module)", "details": "Clears selections", "contents": "selclear();"},
		{ "trigger": "selreplace", "kind": "keyword", "annotation": "(BaritoneAddon Module)", "details": "Replace specified block with replacement block", "contents": "selreplace(${1:<blocktoreplace>},${2:<replacementblock>});"},
		{ "trigger": "BARITONE", "kind": "variable", "annotation": "(BaritoneAddon Module)", "details": "True if baritone is running any process", "contents": "%BARITONE%"},
		{ "trigger": "PATHFINDING", "kind": "variable", "annotation": "(BaritoneAddon Module)", "details": "True if baritone is pathfinding to position", "contents": "%PATHFINDING%"},
		{ "trigger": "FARMING", "kind": "variable", "annotation": "(BaritoneAddon Module)", "details": "True if baritone is running the process #farm", "contents": "%FARMING%"},
		{ "trigger": "MINING", "kind": "variable", "annotation": "(BaritoneAddon Module)", "details": "True if baritone is running the process #mine", "contents": "%MINING%"},
		{ "trigger": "FOLLOWING", "kind": "variable", "annotation": "(BaritoneAddon Module)", "details": "True if baritone is running the process #follow", "contents": "%FOLLOWING%"},
		{ "trigger": "BUILDING", "kind": "variable", "annotation": "(BaritoneAddon Module)", "details": "True if baritone is running a build process", "contents": "%BUILDING%"},
		{ "trigger": "ALLOWBREAK", "kind": "variable", "annotation": "(BaritoneAddon Module)", "details": "Allow Baritone to break blocks", "contents": "%ALLOWBREAK%"},
		{ "trigger": "ALLOWPLACE", "kind": "variable", "annotation": "(BaritoneAddon Module)", "details": "Allow Baritone to place blocks", "contents": "%ALLOWPLACE%"},
		{ "trigger": "ALLOWSPRINT", "kind": "variable", "annotation": "(BaritoneAddon Module)", "details": "Allow Baritone to sprint", "contents": "%ALLOWSPRINT%"},
		{ "trigger": "ALLOWPARKOUR", "kind": "variable", "annotation": "(BaritoneAddon Module)", "details": "Allow Baritone to parkour", "contents": "%ALLOWPARKOUR%"},
		{ "trigger": "ALLOWINVENTORY", "kind": "variable", "annotation": "(BaritoneAddon Module)", "details": "Allow Baritone to move items in your inventory to your hotbar", "contents": "%ALLOWINVENTORY%"},
		{ "trigger": "ALLOWWALKONBOTTOMSLAB", "kind": "variable", "annotation": "(BaritoneAddon Module)", "details": "Slab behavior is complicated, disable this for higher path reliability", "contents": "%ALLOWWALKONBOTTOMSLAB%"},
		{ "trigger": "ALLOWWATERBUCKETFALL", "kind": "variable", "annotation": "(BaritoneAddon Module)", "details": "Allow Baritone to fall arbitrary distances and place a water bucket beneath it", "contents": "%ALLOWWATERBUCKETFALL%"},
		{ "trigger": "BLOCKBREAKADDITIONALMENTPENALTY", "kind": "variable", "annotation": "(BaritoneAddon Module)", "details": "This is just a tiebreaker to make it less likely to break blocks if it can avoid it", "contents": "%BLOCKBREAKADDITIONALMENTPENALTY%"},
		{ "trigger": "BLOCKPLACEMENTPENALTY", "kind": "variable", "annotation": "(BaritoneAddon Module)", "details": "It doesn't actually take twenty ticks to place a block, this cost is so high because we want to generally conserve blocks which might be limited", "contents": "%BLOCKPLACEMENTPENALTY%"},
		{ "trigger": "BLOCKREACHDISTANCE", "kind": "variable", "annotation": "(BaritoneAddon Module)", "details": "Block reach distance", "contents": "%BLOCKREACHDISTANCE%"},
		{ "trigger": "MAXFALLHEIGHTNOWATER", "kind": "variable", "annotation": "(BaritoneAddon Module)", "details": "How far are you allowed to fall onto solid ground (without a water bucket)? 3 won't deal any damage", "contents": "%MAXFALLHEIGHTNOWATER%"},
		{ "trigger": "FREELOOK", "kind": "variable", "annotation": "(BaritoneAddon Module)", "details": "Move without having to force the client-sided rotations", "contents": "%FREELOOK%"},
		{ "trigger": "REPLANTCROPS", "kind": "variable", "annotation": "(BaritoneAddon Module)", "details": "Replant normal Crops while farming and leave cactus and sugarcane to regrow", "contents": "%REPLANTCROPS%"},
		{ "trigger": "MODULEBARITONE", "kind": "variable", "annotation": "(BaritoneAddon Module)", "details": "Returns true if the module is installed", "contents": "%MODULEBARITONE%"},

	// charModule
		{ "trigger": "char", "kind": "keyword", "annotation": "(charModule)", "details": "Returns character with unicode value", "contents": "&${1:<char>} = char(${2:<decimal unicode value>});"},
		{ "trigger": "P", "kind": "variable", "annotation": "(charModule)", "details": "Returns paragraph character", "contents": "%P%"},
		{ "trigger": "DOLLAR", "kind": "variable", "annotation": "(charModule)", "details": "Returns one dollar character", "contents": "%DOLLAR%"},
		{ "trigger": "DOLLARS", "kind": "variable", "annotation": "(charModule)", "details": "Returns two dollar character", "contents": "%DOLLARS%"},
		{ "trigger": "MODULECHARICE", "kind": "variable", "annotation": "(charModule)", "details": "Returns true if the module is installed", "contents": "%MODULECHARICE%"},

	// Clipboard Module
		{ "trigger": "getclipboard", "kind": "keyword", "annotation": "(Clipboard Module)", "details": "Returns content of clipboard", "contents": "getclipboard(&${1:[text]});"},
		{ "trigger": "setclipboard", "kind": "keyword", "annotation": "(Clipboard Module)", "details": "Sets the clipboard text", "contents": "setclipboard(${1:<text>});"},
		{ "trigger": "MODULECLIPBOARD", "kind": "variable", "annotation": "(Clipboard Module)", "details": "Returns true if the module is installed", "contents": "%MODULECLIPBOARD%"},

	// Cloudscript Module
		{ "trigger": "run", "kind": "keyword", "annotation": "(Cloudscript Module)", "details": "Runs the specified script from cloudscript", "contents": "run(${1:<cloudscript>});"},
		{ "trigger": "addanim", "kind": "keyword", "annotation": "(Cloudscript Module)", "details": "Add animation", "contents": "addanim(&${1:<array>}[]);"},
		{ "trigger": "event", "kind": "keyword", "annotation": "(Cloudscript Module)", "details": "Used by cloudscript to run an event", "contents": "event(${1:<projectId>});"},
		{ "trigger": "chat", "kind": "keyword", "annotation": "(Cloudscript Module)", "details": "Open cloudchat", "contents": "chat;"},
		{ "trigger": "getKeybind", "kind": "keyword", "annotation": "(Cloudscript Module)", "details": "Get the macro on that key", "contents": "getKeybind(${1:<key>},&${2:<outvar>});"},
		{ "trigger": "setKeybind", "kind": "keyword", "annotation": "(Cloudscript Module)", "details": "Set a macro on that key", "contents": "setKeybind(${1:<key>},${2:<some code>});"},
		{ "trigger": "return", "kind": "keyword", "annotation": "(Cloudscript Module)", "details": "End a macro and return a value", "contents": "return(${1:<anything>});"},
		{ "trigger": "sendMessage", "kind": "keyword", "annotation": "(Cloudscript Module)", "details": "Send a message on a websocket channel", "contents": "sendMessage(${1:<channel>},${2:<message>});"},
		{ "trigger": "encrypt", "kind": "keyword", "annotation": "(Cloudscript Module)", "details": "Encrypt the variable content", "contents": "encrypt(&${1:<var>},${2:<16charskey>});"},
		{ "trigger": "decrypt", "kind": "keyword", "annotation": "(Cloudscript Module)", "details": "Decrypt the variable content", "contents": "decrypt(&${1:<var>},${2:<16charskey>});"},
		{ "trigger": "remove", "kind": "keyword", "annotation": "(Cloudscript Module)", "details": "Remove something from array", "contents": "remove(&${1:<array>}[],&${2:<outvar>},${3:[pos]});"},

	// Documentor Module
		{ "trigger": "adddocs", "kind": "keyword", "annotation":"(Documentor Module)", "details": "Adds documentation for action", "contents": "adddocs(${1:<name of entry>},${2:[usage]},${3:[description]},${4:[return type]});"},
		{ "trigger": "listdocs", "kind": "keyword", "annotation":"(Documentor Module)", "details": "Returns documentation of action", "contents": "&${1:docs}[] = listdocs(${2:[name]});"},

	// Entities iterator Module
		{ "trigger": "ENTITYTYPE", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Type of the entity", "contents": "%ENTITYTYPE%"},
		{ "trigger": "ENTITYNAME", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Name of the entity", "contents": "%ENTITYNAME%"},
		{ "trigger": "ENTITYUUID", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "UUID of the entity", "contents": "%ENTITYUUID%"},
		{ "trigger": "ENTITYXPOSF", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "X coordinates of the entity as float", "contents": "%ENTITYXPOSF%"},
		{ "trigger": "ENTITYYPOSF", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Y coordinates of the entity as float", "contents": "%ENTITYYPOSF%"},
		{ "trigger": "ENTITYZPOSF", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Z coordinates of the entity as float", "contents": "%ENTITYZPOSF%"},
		{ "trigger": "ENTITYXPOS", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "X coordinates of the entity as integer", "contents": "%ENTITYXPOS%"},
		{ "trigger": "ENTITYYPOS", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Y coordinates of the entity as integer", "contents": "%ENTITYYPOS%"},
		{ "trigger": "ENTITYZPOS", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Z coordinates of the entity as integer", "contents": "%ENTITYZPOS%"},
		{ "trigger": "ENTITYTAG", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Tag of the entity", "contents": "%ENTITYTAG%"},
		{ "trigger": "ENTITYDX", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "X difference between the player and the entity", "contents": "%ENTITYDX%"},
		{ "trigger": "ENTITYDY", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Y difference between the player and the entity", "contents": "%ENTITYDY%"},
		{ "trigger": "ENTITYDZ", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Z difference between the player and the entity", "contents": "%ENTITYDZ%"},
		{ "trigger": "ENTITYDISTANCE", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Distance between the player and the entity", "contents": "%ENTITYDISTANCE%"},
		{ "trigger": "ENTITYPITCHFROMPLAYER", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Pitch from the player to entity", "contents": "%ENTITYPITCHFROMPLAYER%"},
		{ "trigger": "ENTITYYAWFROMPLAYER", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Yaw from the player to entity", "contents": "%ENTITYYAWFROMPLAYER%"},
		{ "trigger": "ENTITYNBT", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "NBT of the entity", "contents": "%ENTITYNBT%"},
		{ "trigger": "ENTITYNBTKEYS", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Array of the keys of the NBT of the entity", "contents": "%ENTITYNBTKEYS%"},
		{ "trigger": "ENTITYNBT&#60;key&#62;", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Quick way to access value of a specififc key", "contents": "%ENTITYNBT${1:<key>}%"},
		{ "trigger": "ENTITYDIR", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Fuzzy direction in which the entity is", "contents": "%ENTITYDIR%"},
		{ "trigger": "ENTITYPITCH", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Pitch where the entity is looking at", "contents": "%ENTITYPITCH%"},
		{ "trigger": "ENTITYYAW", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Yaw where the entity is looking at", "contents": "%ENTITYYAW%"},
		{ "trigger": "ENTITYHEALTH", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Health of the entity", "contents": "%ENTITYHEALTH%"},
		{ "trigger": "ENTITYMAXHEALTH", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Max health of the entity", "contents": "%ENTITYMAXHEALTH%"},
		{ "trigger": "ENTITYISITEM", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "True if it's an dropped item", "contents": "%ENTITYISITEM%"},
		{ "trigger": "ENTITYITEMAGE", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Age of the dropped item", "contents": "%ENTITYITEMAGE%"},
		{ "trigger": "ENTITYITEMOWNER", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Owner of the dropped item", "contents": "%ENTITYITEMOWNER%"},
		{ "trigger": "ENTITYITEMTHROWER", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Thrower of the dropped item", "contents": "%ENTITYITEMTHROWER%"},
		{ "trigger": "ENTITYITEMNAME", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Localized name of the dropped item", "contents": "%ENTITYITEMTHROWER%"},
		{ "trigger": "ENTITYITEMUNLOCALIZEDNAME", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Unlocalized name of the dropped item", "contents": "%ENTITYITEMUNLOCALIZEDNAME%"},
		{ "trigger": "ENTITYITEMCOUNT", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Amount of the dropped item", "contents": "%ENTITYITEMCOUNT%"},
		{ "trigger": "ENTITYITEMDISPLAYNAME", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Displayname of the dropped item", "contents": "%ENTITYITEMDISPLAYNAME%"},
		{ "trigger": "ENTITYITEMDAMAGE", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Damage of the dropped item", "contents": "%ENTITYITEMDAMAGE%"},
		{ "trigger": "ENTITYITEMMAXDAMAGE", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Max damage of the dropped item", "contents": "%ENTITYITEMMAXDAMAGE%"},
		{ "trigger": "ENTITYITEMMETADATA", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Metadata of the dropped item", "contents": "%ENTITYITEMMETADATA%"},
		{ "trigger": "ENTITYITEMENCHANTED", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "True if the dropped item is enchanted", "contents": "%ENTITYITEMENCHANTED%"},
		{ "trigger": "ENTITYITEMSTACKABLE", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "True if the dropped item is stackable", "contents": "%ENTITYITEMSTACKABLE%"},
		{ "trigger": "ENTITYMAINHANDNAME", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Name of the mainhand item", "contents": "%ENTITYMAINHANDNAME%"},
		{ "trigger": "ENTITYMAINHANDID", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "ID of the mainhand item", "contents": "%ENTITYMAINHANDID%"},
		{ "trigger": "ENTITYMAINHANDNID", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Numerical ID of the mainhand item", "contents": "%ENTITYMAINHANDNID%"},
		{ "trigger": "ENTITYMAINHANDDAMAGE", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Damage of the mainhand item", "contents": "%ENTITYMAINHANDDAMAGE%"},
		{ "trigger": "ENTITYMAINHANDCOUNT", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Amount of the mainhand item", "contents": "%ENTITYMAINHANDCOUNT%"},
		{ "trigger": "ENTITYMAINHANDENCHANTMENTS", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Enchantments of the mainhand item", "contents": "%ENTITYMAINHANDENCHANTMENTS%"},
		{ "trigger": "ENTITYOFFHANDNAME", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Name of the offhand item", "contents": "%ENTITYOFFHANDNAME%"},
		{ "trigger": "ENTITYOFFHANDID", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "ID of the offhand item", "contents": "%ENTITYOFFHANDID%"},
		{ "trigger": "ENTITYOFFHANDNID", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Numerical ID of the offhand item", "contents": "%ENTITYOFFHANDNID%"},
		{ "trigger": "ENTITYOFFHANDDAMAGE", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Damage of the offhand item", "contents": "%ENTITYOFFHANDDAMAGE%"},
		{ "trigger": "ENTITYOFFHANDCOUNT", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Amount of the offhand item", "contents": "%ENTITYOFFHANDCOUNT%"},
		{ "trigger": "ENTITYOFFHANDENCHANTMENTS", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Enchantments of the offhand item", "contents": "%ENTITYOFFHANDENCHANTMENTS%"},
		{ "trigger": "ENTITYBOOTSNAME", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Name of the boots item", "contents": "%ENTITYBOOTSNAME%"},
		{ "trigger": "ENTITYBOOTSID", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "ID of the boots item", "contents": "%ENTITYBOOTSID%"},
		{ "trigger": "ENTITYBOOTSNID", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Numerical ID of the boots item", "contents": "%ENTITYBOOTSNID%"},
		{ "trigger": "ENTITYBOOTSDAMAGE", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Damage of the boots item", "contents": "%ENTITYBOOTSDAMAGE%"},
		{ "trigger": "ENTITYBOOTSCOUNT", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Amount of the boots item", "contents": "%ENTITYBOOTSCOUNT%"},
		{ "trigger": "ENTITYBOOTSENCHANTMENTS", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Enchantments of the boots item", "contents": "%ENTITYBOOTSENCHANTMENTS%"},
		{ "trigger": "ENTITYLEGGINGSNAME", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Name of the leggings item", "contents": "%ENTITYLEGGINGSNAME%"},
		{ "trigger": "ENTITYLEGGINGSID", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "ID of the leggings item", "contents": "%ENTITYLEGGINGSID%"},
		{ "trigger": "ENTITYLEGGINGSNID", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Numerical ID of the leggings item", "contents": "%ENTITYLEGGINGSNID%"},
		{ "trigger": "ENTITYLEGGINGSDAMAGE", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Damage of the leggings item", "contents": "%ENTITYLEGGINGSDAMAGE%"},
		{ "trigger": "ENTITYLEGGINGSCOUNT", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Amount of the leggings item", "contents": "%ENTITYLEGGINGSCOUNT%"},
		{ "trigger": "ENTITYLEGGINGSENCHANTMENTS", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Enchantments of the leggings item", "contents": "%ENTITYLEGGINGSENCHANTMENTS%"},
		{ "trigger": "ENTITYCHESTPLATENAME", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Name of the chestplate item", "contents": "%ENTITYCHESTPLATENAME%"},
		{ "trigger": "ENTITYCHESTPLATEID", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "ID of the chestplate item", "contents": "%ENTITYCHESTPLATEID%"},
		{ "trigger": "ENTITYCHESTPLATENID", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Numerical ID of the chestplate item", "contents": "%ENTITYCHESTPLATENID%"},
		{ "trigger": "ENTITYCHESTPLATEDAMAGE", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Damage of the chestplate item", "contents": "%ENTITYCHESTPLATEDAMAGE%"},
		{ "trigger": "ENTITYCHESTPLATECOUNT", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Amount of the chestplate item", "contents": "%ENTITYCHESTPLATECOUNT%"},
		{ "trigger": "ENTITYCHESTPLATEENCHANTMENTS", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Enchantments of the chestplate item", "contents": "%ENTITYCHESTPLATEENCHANTMENTS%"},
		{ "trigger": "ENTITYHELMETNAME", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Name of the helmet item", "contents": "%ENTITYHELMETNAME%"},
		{ "trigger": "ENTITYHELMETID", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "ID of the helmet item", "contents": "%ENTITYHELMETID%"},
		{ "trigger": "ENTITYHELMETNID", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Numerical ID of the helmet item", "contents": "%ENTITYHELMETNID%"},
		{ "trigger": "ENTITYHELMETDAMAGE", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Damage of the helmet item", "contents": "%ENTITYHELMETDAMAGE%"},
		{ "trigger": "ENTITYHELMETCOUNT", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Amount of the helmet item", "contents": "%ENTITYHELMETCOUNT%"},
		{ "trigger": "ENTITYHELMETENCHANTMENTS", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Enchantments of the helmet item", "contents": "%ENTITYHELMETENCHANTMENTS%"},
		{ "trigger": "EHITX", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "X value of entity your're looking at or 0 if not looking at an entity", "contents": "%EHITX%"},
		{ "trigger": "EHITY", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Y value of entity your're looking at or 0 if not looking at an entity", "contents": "%EHITY%"},
		{ "trigger": "EHITZ", "kind": "variable", "annotation": "(Entities Iterator Module)", "details": "Z value of entity your're looking at or 0 if not looking at an entity", "contents": "%EHITZ%"},

	// FarHit Module
		{ "trigger": "FARHIT", "kind": "variable", "annotation": "(FarHit Module)", "details": "Extended reach %HIT%", "contents": "%FARHIT%"},
		{ "trigger": "FARHITID", "kind": "variable", "annotation": "(FarHit Module)", "details": "Extended reach %HITID%", "contents": "%FARHITID%"},
		{ "trigger": "FARHITDATA", "kind": "variable", "annotation": "(FarHit Module)", "details": "Extended reach %HITDATA%", "contents": "%FARHITDATA%"},
		{ "trigger": "FARHITNAME", "kind": "variable", "annotation": "(FarHit Module)", "details": "Extended reach %HITNAME%", "contents": "%FARHITNAME%"},
		{ "trigger": "FARHITSIDE", "kind": "variable", "annotation": "(FarHit Module)", "details": "Extended reach %HITSIDE%", "contents": "%FARHITSIDE%"},
		{ "trigger": "FARHITX", "kind": "variable", "annotation": "(FarHit Module)", "details": "Extended reach %HITX%", "contents": "%FARHITX%"},
		{ "trigger": "FARHITY", "kind": "variable", "annotation": "(FarHit Module)", "details": "Extended reach %HITY%", "contents": "%FARHITY%"},
		{ "trigger": "FARHITZ", "kind": "variable", "annotation": "(FarHit Module)", "details": "Extended reach %HITZ%", "contents": "%FARHITZ%"},
		{ "trigger": "FARHITUUID", "kind": "variable", "annotation": "(FarHit Module)", "details": "Extended reach %HITUUID%", "contents": "%FARHITUUID%"},
		{ "trigger": "FARHITDIST", "kind": "variable", "annotation": "(FarHit Module)", "details": "Extended reach %HITDIST%", "contents": "%FARHITDIST%"},
		{ "trigger": "MODULEFARHIT", "kind": "variable", "annotation": "(FarHit Module)", "details": "Returns true if the module is installed", "contents": "%MODULEFARHIT%"},

	// Functions Module
		{ "trigger": "function", "kind": "snippet", "annotation": "(Functions Module)", "details": "Define a function", "contents": "function ${1:<name>}(${2:[parameter], ...});\n\t$3\nendfunction;$4"},
		{ "trigger": "return", "kind": "keyword", "annotation": "(Functions Module)", "details": "Returns a value inside of a function", "contents": "return(${1:<value>});"},
		{ "trigger": "return", "kind": "keyword", "annotation": "(Functions Module)", "details": "Returns a value inside of a function", "contents": "return ${1:<value>};"},
		{ "trigger": "call", "kind": "keyword", "annotation": "(Functions Module)", "details": "Alternative way of calling functions", "contents": "call(${1:<name>},${2:[parameter], ...});"},

	// GetSlotItemExtended Module
		{ "trigger": "getslotitemext", "kind": "keyword", "annotation": "(GetSlotItemExtended Module)", "details": "+ Argument for the itemname of item", "contents": "${2:&${1:[itemid]} = }getslotitemext(#${3:<slotid>},&${1:[itemid]},${4:[stacksize]},${5:[damage]},${6:[itemname]});"},
		{ "trigger": "getslotitemnbt", "kind": "keyword", "annotation": "(GetSlotItemExtended Module)", "details": "+ Argument for the nbt of item", "contents": "${2:&${1:[itemid]} = }getslotitemnbt(#${3:<slotid>},${1:[itemid]},${4:[stacksize]},${5:[damage]},${6:[nbt]});"},
		{ "trigger": "getslotitemenchants", "kind": "keyword", "annotation": "(GetSlotItemExtended Module)", "details": "+ Argument for enchantments", "contents": "${2:&${1:[itemid]} = }getslotitemenchants(#${3:<slotid>},${1:[itemid]},${4:[stacksize]},${5:[damage]},${6:[enchants]});"},
	
	// HTTP Module
		{ "trigger": "httpget", "kind": "keyword", "annotation": "(HTTP Module)", "details": "Httpget request to url", "contents": "${2:&${1:[response]}[] = }httpget(${3:<url>},${4:<query>},#${5:<status>},&${1:[response]});"},
		{ "trigger": "httppost", "kind": "keyword", "annotation": "(HTTP Module)", "details": "Httppost request to url with data", "contents": "${2:&${1:[response]}[] = }httppost(${3:<url>},${4:<data>},#${5:<status>},&${1:[response]});"},
		{ "trigger": "httpput", "kind": "keyword", "annotation": "(HTTP Module)", "details": "Httpput request to url with data", "contents": "${2:&${1:[response]}[] = }httpput(${3:<url>},${4:<data>},#${5:<status>},&${1:[response]});"},
		{ "trigger": "httpdelete", "kind": "keyword", "annotation": "(HTTP Module)", "details": "Request to specified url", "contents": "${2:&${1:[response]}[] = }httpdelete(${3:<url>},${4:<query>},#${5:<status>},&${1:[response]});"},
		{ "trigger": "urlencode", "kind": "keyword", "annotation": "(HTTP Module)", "details": "Url encodes the string", "contents": "${2:&${1:[output]} = }urlencode(${3:<string>},&${1:[output]});"},
		{ "trigger": "setrequestheader", "kind": "keyword", "annotation": "(HTTP Module)", "details": "Sets header for next request", "contents": "setrequestheader(&${1:<field>},&${2:<value>});"},
		{ "trigger": "MODULEHTTP", "kind": "variable", "annotation": "(HTTP Module)", "details": "Returns true if the module is installed", "contents": "%MODULEHTTP%"},

	// JSON Module
		{ "trigger": "isboolean", "kind": "keyword", "annotation": "(JSON Module)", "details": "Checks if the value is a boolean", "contents": "${2:[${1:bool}] = }isboolean(${3:<string>},${1:[bool]});"},
		{ "trigger": "isfloat", "kind": "keyword", "annotation": "(JSON Module)", "details": "Checks if the value is a float", "contents": "${2:${1:[bool]} = }isfloat(${3:<string>},${1:[bool]});"},
		{ "trigger": "isinteger", "kind": "keyword", "annotation": "(JSON Module)", "details": "Checks if the value is an integer", "contents": "${2:${1:[bool]} = }isinteger(${3:<string>},${1:[bool]});"},
		{ "trigger": "isjsonarray", "kind": "keyword", "annotation": "(JSON Module)", "details": "Checks if the value is a json array", "contents": "${2:${1:[bool]} = }isjsonarray(${3:<string>},${1:[bool]});"},
		{ "trigger": "isjsonobject", "kind": "keyword", "annotation": "(JSON Module)", "details": "Checks if the value is a json object", "contents": "${2:${1:[bool]} = }isjsonobject(${3:<string>},${1:[bool]});"},
		{ "trigger": "isjsonprimitive", "kind": "keyword", "annotation": "(JSON Module)", "details": "Checks if value isjson primitive", "contents": "${2:${1:[bool]} = }isjsonprimitive(${3:<string>}${1:,[bool}]);"},
		{ "trigger": "isnumber", "kind": "keyword", "annotation": "(JSON Module)", "details": "Checks if the value is a number", "contents": "${2:${1:[bool]} = }isnumber(${3:<string>},${1:[bool]});"},
		{ "trigger": "isstring", "kind": "keyword", "annotation": "(JSON Module)", "details": "Checks if the value is a string", "contents": "${2:${1:[bool]} = }isstring(${3:<string>},${1:[bool]});"},
		{ "trigger": "jsonadd", "kind": "keyword", "annotation": "(JSON Module)", "details": "Adds key and value to the json", "contents": "${2:&${1:[output]} = }jsonadd(${3:<json>},${4:<key>},${5:<value>},&${1:[output]});"},
		{ "trigger": "jsonget", "kind": "keyword", "annotation": "(JSON Module)", "details": "Gets value of a key", "contents": "${2:&${1:[output]} = }jsonget(${3:<json>},${4:<key>},&${1:[output]});"},
		{ "trigger": "jsonhas", "kind": "keyword", "annotation": "(JSON Module)", "details": "Returns if the json contains the key", "contents": "${2:${1:[bool]} = }jsonhas(${3:<json>},${4:<key>},${1:[bool]});"},
		{ "trigger": "jsonremove", "kind": "keyword", "annotation": "(JSON Module)", "details": "Removes a key-value-pair from the json", "contents": "${2:&${1:[output]} = }jsonremove(${3:<json>},${4:<key>},&${1:[output]});"},
		{ "trigger": "getjsonkeys", "kind": "keyword", "annotation": "(JSON Module)", "details": "Returns list of all keys of the json", "contents": "${2:&${1:[keys]} = }getjsonkeys(${3:<json>},&${1:[keys]}[]);"},
		{ "trigger": "getjsonarray", "kind": "keyword", "annotation": "(JSON Module)", "details": "Returns json as key:value array", "contents": "${2:&${1:[array]} = }getjsonasarray(${3:<json>},${1:[array]}[]));"},
		{ "trigger": "jsonarrayadd", "kind": "keyword", "annotation": "(JSON Module)", "details": "Adds an element to the json array", "contents": "${2:&${1:[jsonarray]} = }jsonarrayadd(${3:<jsonarray>},${4:<element>},&${1:[jsonarray]});"},
		{ "trigger": "jsonarrayget", "kind": "keyword", "annotation": "(JSON Module)", "details": "Returns the element of the jsonarray", "contents": "${2:&${1:[output]} = }jsonarrayget(${3:<jsonarray>},${4:<index>},&${1:[output]});"},
		{ "trigger": "jsonarraysize", "kind": "keyword", "annotation": "(JSON Module)", "details": "Returns the size of the jsonarray", "contents": "${2:#${1:[size]} = }jsonarraysize(${3:<jsonarray>},#${1:[size]});"},
		{ "trigger": "MODULEJSON", "kind": "variable", "annotation": "(JSON Module)", "details": "Returns true if the module is installed", "contents": "%MODULEJSON%"},

	// Klacaiba Module
		{ "trigger": "calcyawto", "kind": "keyword", "annotation":"(Klacaiba Module)", "details": "+ Y argument for pitch", "contents": "calcyawto(${1:<xpos>},${2:<ypos>},${3:<zpos>},#${4:[yaw]},#${5:[dist]},#${6:[pitch]});"},
		{ "trigger": "getslotitem", "kind": "keyword", "annotation":"(Klacaiba Module)", "details": "+ Nbt argument", "contents": "getslotitem(${1:<slotid>},&${2:<itemid>},#${3:[stacksize]},#${4:[datavar]},&${5:[nbt]});"},
		{ "trigger": "http", "kind": "keyword", "annotation":"(Klacaiba Module)", "details": "Creates a http request", "contents": "&${1:response} = http(${2:[get|post|put|delete]},${3:<url>},${4:[output stream]},${5:[headers]});"},
		{ "trigger": "iffileexists", "kind": "snippet", "annotation":"(Klacaiba Module)", "details": "Executes if the file exists at &#60;path&#62;", "contents": "iffileexists(${1:<path>},${2:[expression]});\n	$3\nendif;\n$4"},
		{ "trigger": "mkdir", "kind": "keyword", "annotation":"(Klacaiba Module)", "details": "Creates directory", "contents": "mkdir(${1:<path>});"},
		{ "trigger": "writefile", "kind": "keyword", "annotation":"(Klacaiba Module)", "details": "Writes array to file", "contents": "writefile(${1:<path>},&${2:<writefile>}[],${3:[append]});"},
		{ "trigger": "getjsonasarray", "kind": "keyword", "annotation":"(Klacaiba Module)", "details": "Returns json as key:value array", "contents": "&${1:array}[] = getjsonasarray(${2:<json>},${3:[format]});"},
		{ "trigger": "getjsonkeys", "kind": "keyword", "annotation":"(Klacaiba Module)", "details": "Retuns list of the keys of json", "contents": "&${1:keys}[] = getjsonkeys(${2:<json>});"},
		{ "trigger": "jsonget", "kind": "keyword", "annotation":"(Klacaiba Module)", "details": "Retuns object of key of specified json", "contents": "&${1:object} = jsonget(${2:<json>},${3:<key>});"},
		{ "trigger": "sort", "kind": "keyword", "annotation":"(Klacaiba Module)", "details": "Sorts the arrays synchronously", "contents": "sort(${1:[asc,dsc]},${2:<array>}[],${3:[array]}[]);"},
		{ "trigger": "teammembers", "kind": "keyword", "annotation":"(Klacaiba Module)", "details": "Lists scoreboard team members", "contents": "&${1:<members/teams>}[] = teammembers(${2:[team]});"},
		{ "trigger": "score", "kind": "keyword", "annotation":"(Klacaiba Module)", "details": "Returns score of player in objective", "contents": "<${1:&score|&scores[]|&obectives[]}> = score(${2:[objectivename]},${3:[playername]});"},
		{ "trigger": "countdownto", "kind": "keyword", "annotation":"(Klacaiba Module)", "details": "Countdown to the specified datetime", "contents": "countdownto(${1:<until>});"},
		{ "trigger": "countdownfrom", "kind": "keyword", "annotation":"(Klacaiba Module)", "details": "Countdown from the specified time", "contents": "countdownfrom(${1:<start>});"},
		{ "trigger": "countup", "kind": "keyword", "annotation":"(Klacaiba Module)", "details": "Creates a countup from the current time", "contents": "countup();"},
		{ "trigger": "counter", "kind": "keyword", "annotation":"(Klacaiba Module)", "details": "Current value of the countdown or countup", "contents": "counter(${1:<id>});"},
		{ "trigger": "sectotime", "kind": "keyword", "annotation":"(Klacaiba Module)", "details": "Formats the amount of seconds to time", "contents": "&${1:time} = sectotime(${2:<seconds>},${3:[format]});"},
		{ "trigger": "getchestname", "kind": "keyword", "annotation":"(Klacaiba Module)", "details": "Returns the name of the open chest", "contents": "&${1:name} = getchestname();"},
		{ "trigger": "getemptyslots", "kind": "keyword", "annotation":"(Klacaiba Module)", "details": "Returns empty slots in inventory", "contents": "#${1:slots} = getemptyslots(${2:[include non full slots]});"},
		{ "trigger": "getmouseitem", "kind": "keyword", "annotation":"(Klacaiba Module)", "details": "Gets info about the held item", "contents": "${2:&${1:[id]} = }getmouseitem(&${1:[id]},#${3:[stacksizevar]},#${4:[datavar]},&${5:[nbt]});"},
		{ "trigger": "getslotiteminv", "kind": "keyword", "annotation":"(Klacaiba Module)", "details": "Gets information about the item in the specified slot", "contents": "${2:[&${1:<id>}] = }getslotiteminv(${3:<slotid>},&${1:<id>},#${4:[stacksizevar]},#${5:[datavar]},&${6:[nbt]});"},
		{ "trigger": "getslotinv", "kind": "keyword", "annotation":"(Klacaiba Module)", "details": "Gets slot containing item in inventory", "contents": "#${1:[slot]} = getslotinv(${2:<item>}:${3:[damage]},#${4:<idvar>},${5:[startfromslotid]});"},
		{ "trigger": "ifinvisfull", "kind": "snippet", "annotation":"(Klacaiba Module)", "details": "Executes if the inventory is full", "contents": "ifinvisfull(${1:[item]});\n	$2\nendif;\n$3"},
		{ "trigger": "ifininv", "kind": "snippet", "annotation":"(Klacaiba Module)", "details": "Executes if the &#60;items&#62; are in the inventory, mode can be 'any', 'all' or number", "contents": "ifininv(${1:[mode]},${2:<items>});\n	$3\nendif;\n$4"},
		{ "trigger": "ifenchanted", "kind": "snippet", "annotation":"(Klacaiba Module)", "details": "Executes if the item at &#60;slot&#62; is enchanted", "contents": "ifenchanted(${1:<slot>},&${2:[item]},#${3:[stacksize]},#${4:[datavar]},&${5:[nbt]});\n	$6\nendif;\n$7"},
		{ "trigger": "setslotitem", "kind": "keyword", "annotation":"(Klacaiba Module)", "details": "Set the contents of a hotbar slot", "contents": "setslotitem(${1:<item>}:${2:[damage]}${3:,<slot>},${4:[amount]},${5:[nbt]});"},
		{ "trigger": "getfishhook", "kind": "keyword", "annotation":"(Klacaiba Module)", "details": "Get the x, y and z (3dp) of the bobber", "contents": "${2:#${1:[ytotal]} = }getfishhook(#${3:[x]},#${4:[xprecision]},#${5:[y]},#${6:[yprecision]},#${7:[z]},#${8:[zprecision]});"},
		{ "trigger": "map", "kind": "keyword", "annotation":"(Klacaiba Module)", "details": "Maps the value x from minfrom-maxfrom to minto-maxto", "contents": "#${1:result} = map(${2:<x>},${3:<minfrom>},${4:<maxfrom>},${5:<minto>},${6:<maxto>});"},
		{ "trigger": "particle", "kind": "keyword", "annotation":"(Klacaiba Module)", "details": "Spawns particles similar to the vanilla command", "contents": "${2:&${1:errors}[] = }particle(${3:<particlename>},${4:<x>},${5:<y>},${6:<z>},${7:<dx>},${8:<dy>},${9:<dz>},${10:[count]},${11:[mode]});"},
		{ "trigger": "countitem", "kind": "keyword", "annotation":"(Klacaiba Module)", "details": "Amount of items in your current inventory", "contents": "#${1:count} = countitem(${2:<item>}:${3:[damage]});"},
		{ "trigger": "countiteminv", "kind": "keyword", "annotation":"(Klacaiba Module)", "details": "Amount of items in your survival inventory", "contents": "#${1:count} = countiteminv(${2:<item>}:${3:[damage]});"},
		{ "trigger": "createcontrol", "kind": "keyword", "annotation":"(Klacaiba Module)", "details": "Creates a control on the specified screen at row and column position", "contents": "${2:[&${1:controlname}] = }createcontrol(${3:<screenname|layouts|types>},${4:[element type]},${5:[row]},${6:[column]});"},
		{ "trigger": "deletecontrol", "kind": "keyword", "annotation":"(Klacaiba Module)", "details": "Deletes a control by name from any gui", "contents": "deletecontrol(${1:<controlname>});"},
		{ "trigger": "timestamptodate", "kind": "keyword", "annotation":"(Klacaiba Module)", "details": "Format a timestamp in seconds", "contents": "&${1:date} = timestamptodate(${2:<timestamp>},${3:[in milliseconds|date format]},${4:[in milliseconds]});"},
		{ "trigger": "stop", "kind": "keyword", "annotation":"(Klacaiba Module)", "details": "Stops macro matching regex or array", "contents": "stop(${1:[array|regex]});"},
		{ "trigger": "strlen", "kind": "keyword", "annotation":"(Klacaiba Module)", "details": "Returns the length of the string or 0 if none is present", "contents": "#${1:length} = strlen(${2:<string>});"},
		{ "trigger": "getbreakspeed", "kind": "keyword", "annotation":"(Klacaiba Module)", "details": "Returns the amount of time required to break a block or 0 if infinite of none specified", "contents": "#${1:ticks} = getbreakspeed(${2:<blockid>});"},
		{ "trigger": "ifcanharvestblock", "kind": "snippet", "annotation":"(Klacaiba Module)", "details": "Executes if the &#60;blockid&#62; can currently be harvested", "contents": "ifcanharvestblock(${1:<blockid>});\n	$2\nendif;\n$3"},
		{ "trigger": "pollevent", "kind": "snippet", "annotation":"(Klacaiba Module)", "details": "Opens a stack with an infinite iterator for a specific event", "contents": "pollevent(${1:[event]});\n	$3\n	await;\nnext;\n$4"},
		{ "trigger": "POLLALL", "kind": "variable", "annotation":"(Klacaiba Module)", "details": "List all variables of the event", "contents": "%POLLALL%"},
		{ "trigger": "await", "kind": "keyword", "annotation":"(Klacaiba Module)", "details": "Should be placed above the closing next of a pollevent", "contents": "await;"},

	// Klacaiba variables
		{ "trigger": "LATENCY", "kind": "variable", "annotation": "(Klacaiba Module)", "details": "Ping of the player to the server", "contents": "%LATENCY%"},
		{ "trigger": "HACKED", "kind": "variable", "annotation": "(Klacaiba Module)", "details": "Whether all the functions of the module have been applied to the client", "contents": "%HACKED%"},
		{ "trigger": "MINECRAFTDIR", "kind": "variable", "annotation": "(Klacaiba Module)", "details": "Filepath of the current minecraft directory", "contents": "%MINECRAFTDIR%"},
		{ "trigger": "MACROSCONFIGDIR", "kind": "variable", "annotation": "(Klacaiba Module)", "details": "%MINECRAFTDIR%/.liteconfig/common/macros", "contents": "%MACROSCONFIGDIR%"},
		{ "trigger": "FILESEPERATOR", "kind": "variable", "annotation": "(Klacaiba Module)", "details": "Default path seperator used by the system", "contents": "%FILESEPERATOR%"},
		{ "trigger": "KLACAIBAVERSION", "kind": "variable", "annotation":"(Klacaiba Module)", "details": "Returns the version of klacaiba", "contents": "%KLACAIBAVERSION%"},

	// Klacaiba iterators
		{ "trigger": "teams", "kind": "keyword", "annotation": "(Klacaiba Module)", "details": "Iterates over all teams", "contents": "teams"},
		{ "trigger": "objectives", "kind": "keyword", "annotation": "(Klacaiba Module)", "details": "Iterates over all objectives", "contents": "objectives"},
		{ "trigger": "score", "kind": "keyword", "annotation": "(Klacaiba Module)", "details": "Iterates over all scores", "contents": "score"},
		{ "trigger": "actions", "kind": "keyword", "annotation": "(Klacaiba Module)", "details": "Iterates over all actions", "contents": "actions"},
		{ "trigger": "events", "kind": "keyword", "annotation": "(Klacaiba Module)", "details": "Iterates over all events", "contents": "events"},
		{ "trigger": "inventory", "kind": "keyword", "annotation": "(Klacaiba Module)", "details": "Iterates over your inventory", "contents": "inventory"},

	// Klacaiba players iterator
		{ "trigger": "PLAYERUUID", "kind": "variable", "annotation": "(Klacaiba Module - players iterator)", "details": "UUID of the player with dashes", "contents": "%PLAYERUUID%"},
		{ "trigger": "PLAYERDISPLAYNAME", "kind": "variable", "annotation": "(Klacaiba Module - players iterator)", "details": "Displayname of the player", "contents": "%PLAYERDISPLAYNAME%"},
		{ "trigger": "PLAYERTEAM", "kind": "variable", "annotation": "(Klacaiba Module - players iterator)", "details": "Scoreboard team of the player as JSON", "contents": "%PLAYERTEAM%"},
		{ "trigger": "PLAYERPING", "kind": "variable", "annotation": "(Klacaiba Module - players iterator)", "details": "Ping of the player", "contents": "%PLAYERPING%"},
		{ "trigger": "PLAYERISLEGACY", "kind": "variable", "annotation": "(Klacaiba Module - players iterator)", "details": "Whether the player uses a legacy account", "contents": "%PLAYERISLEGACY%"},

	// Klacaiba teams iterator
		{ "trigger": "TEAMALLOWFRIENDLYFIRE", "kind": "variable", "annotation": "(Klacaiba Module - teams iterator)", "details": "If the team allows friendly fire", "contents": "%TEAMALLOWFRIENDLYFIRE%"},
		{ "trigger": "TEAMCOLLISIONRULE", "kind": "variable", "annotation": "(Klacaiba Module - teams iterator)", "details": "Collisionrule of the team", "contents": "%TEAMCOLLISIONRULE%"},
		{ "trigger": "TEAMCOLOR", "kind": "variable", "annotation": "(Klacaiba Module - teams iterator)", "details": "Color of the team", "contents": "%TEAMCOLOR%"},
		{ "trigger": "TEAMDEATHMESSAGEVISIBILITY", "kind": "variable", "annotation": "(Klacaiba Module - teams iterator)", "details": "Deathmessage visibility ruleing of the team", "contents": "%TEAMDEATHMESSAGEVISIBILITY%"},
		{ "trigger": "TEAMDISPLAYNAME", "kind": "variable", "annotation": "(Klacaiba Module - teams iterator)", "details": "Displayname of the team", "contents": "%TEAMDISPLAYNAME%"},
		{ "trigger": "TEAMNAME", "kind": "variable", "annotation": "(Klacaiba Module - teams iterator)", "details": "Name of the team", "contents": "%TEAMNAME%"},
		{ "trigger": "TEAMNAMETAGVISIBILITY", "kind": "variable", "annotation": "(Klacaiba Module - teams iterator)", "details": "Nametag visibility of the team", "contents": "%TEAMNAMETAGVISIBILITY%"},
		{ "trigger": "TEAMSEEFRIENDLYINVISIBLES", "kind": "variable", "annotation": "(Klacaiba Module - teams iterator)", "details": "Whether the team can see friendly invisibles", "contents": "%TEAMSEEFRIENDLYINVISIBLES%"},
		{ "trigger": "TEAMPREFIX", "kind": "variable", "annotation": "(Klacaiba Module - teams iterator)", "details": "Prefix of the team", "contents": "%TEAMPREFIX%"},
		{ "trigger": "TEAMSUFFIX", "kind": "variable", "annotation": "(Klacaiba Module - teams iterator)", "details": "Suffix of the team", "contents": "%TEAMSUFFIX%"},
		{ "trigger": "TEAMMEMBERS", "kind": "variable", "annotation": "(Klacaiba Module - teams iterator)", "details": "Membernames of the team", "contents": "%TEAMMEMBERS%"},

	// Klacaiba objective iterator
		{ "trigger": "OBJECTIVECRITERIA", "kind": "variable", "annotation": "(Klacaiba Module - objectives iterator)", "details": "Criteria of the objective", "contents": "%OBJECTIVECRITERIA%"},
		{ "trigger": "OBJECTIVEDISPLAYNAME", "kind": "variable", "annotation": "(Klacaiba Module - objectives iterator)", "details": "Displayname of the objective", "contents": "%OBJECTIVEDISPLAYNAME%"},
		{ "trigger": "OBJECTIVENAME", "kind": "variable", "annotation": "(Klacaiba Module - objectives iterator)", "details": "Name of the objective", "contents": "%OBJECTIVENAME%"},
		{ "trigger": "OBJECTIVERENDERTYPE", "kind": "variable", "annotation": "(Klacaiba Module - objectives iterator)", "details": "Rendertype of the objective", "contents": "%OBJECTIVERENDERTYPE%"},

	// Klacaiba score iterator
		{ "trigger": "SCOREOBJECTIVENAME", "kind": "variable", "annotation": "(Klacaiba Module - scores iterator)", "details": "Name of the associated objective", "contents": "%SCOREOBJECTIVENAME%"},
		{ "trigger": "SCOREPLAYERNAME", "kind": "variable", "annotation": "(Klacaiba Module - scores iterator)", "details": "Name of the owning player", "contents": "%SCOREPLAYERNAME%"},
		{ "trigger": "SCOREVALUE", "kind": "variable", "annotation": "(Klacaiba Module - scores iterator)", "details": "Value of the score", "contents": "%SCOREVALUE%"},

	// Klacaiba trades iterator
		{ "trigger": "trades", "kind": "keyword", "annotation": "(Klacaiba Module)", "details": "Iterates over all trades", "contents": "trades"},
		{ "trigger": "TRADEBUYITEM", "kind": "variable", "annotation": "(Klacaiba Module - trades iterator)", "contents": "%TRADEBUYITEM%"},
		{ "trigger": "TRADEBUYITEMAMOUNT", "kind": "variable", "annotation": "(Klacaiba Module - trades iterator)", "contents": "%TRADEBUYITEMAMOUNT%"},
		{ "trigger": "TRADEBUYITEM2", "kind": "variable", "annotation": "(Klacaiba Module - trades iterator)", "contents": "%TRADEBUYITEM2%"},
		{ "trigger": "TRADEBUYITEM2AMOUNT", "kind": "variable", "annotation": "(Klacaiba Module - trades iterator)", "contents": "%TRADEBUYITEM2AMOUNT%"},
		{ "trigger": "TRADESELLITEM", "kind": "variable", "annotation": "(Klacaiba Module - trades iterator)", "contents": "%TRADESELLITEM%"},
		{ "trigger": "TRADESELLITEMAMOUNT", "kind": "variable", "annotation": "(Klacaiba Module - trades iterator)", "contents": "%TRADESELLITEMAMOUNT%"},
		{ "trigger": "TRADEUSES", "kind": "variable", "annotation": "(Klacaiba Module - trades iterator)", "contents": "%TRADEUSES%"},
		{ "trigger": "TRADEMAXUSES", "kind": "variable", "annotation": "(Klacaiba Module - trades iterator)", "contents": "%TRADEMAXUSES%"},

	// Klacaiba inventory iterator
		{ "trigger": "SLOTINDEX", "kind": "variable", "annotation": "(Klacaiba Module - inventory iterator)", "details": "current index of slot", "contents": "%SLOTINDEX%"},
		{ "trigger": "SLOTID", "kind": "variable", "annotation": "(Klacaiba Module - inventory iterator)", "details": "current id of slot", "contents": "%SLOTID%"},
		{ "trigger": "SLOTSTACKSIZE", "kind": "variable", "annotation": "(Klacaiba Module - inventory iterator)", "details": "current stacksize of slot", "contents": "%SLOTSTACKSIZE%"},
		{ "trigger": "SLOTDATAVAR", "kind": "variable", "annotation": "(Klacaiba Module - inventory iterator)", "details": "current datavar of slot", "contents": "%SLOTDATAVAR%"},
		{ "trigger": "SLOTTAG", "kind": "variable", "annotation": "(Klacaiba Module - inventory iterator)", "details": "current tag of slot", "contents": "%SLOTTAG%"},

	// Klacaiba onSound event
		{ "trigger": "SOUNDXPOSF", "kind": "variable", "annotation": "(Klacaiba Module - onSound event)", "details": "XPOS of sound as float", "contents": "%SOUNDXPOSF%"},
		{ "trigger": "SOUNDYPOSF", "kind": "variable", "annotation": "(Klacaiba Module - onSound event)", "details": "YPOS of sound as float", "contents": "%SOUNDYPOSF%"},
		{ "trigger": "SOUNDZPOSF", "kind": "variable", "annotation": "(Klacaiba Module - onSound event)", "details": "ZPOS of sound as float", "contents": "%SOUNDZPOSF%"},
		{ "trigger": "SOUNDXPOS", "kind": "variable", "annotation": "(Klacaiba Module - onSound event)", "details": "XPOS of sound as int", "contents": "%SOUNDXPOS%"},
		{ "trigger": "SOUNDYPOS", "kind": "variable", "annotation": "(Klacaiba Module - onSound event)", "details": "YPOS of sound as int", "contents": "%SOUNDYPOS%"},
		{ "trigger": "SOUNDZPOS", "kind": "variable", "annotation": "(Klacaiba Module - onSound event)", "details": "ZPOS of sound as int", "contents": "%SOUNDZPOS%"},
		{ "trigger": "SOUNDCANREPEAT", "kind": "variable", "annotation": "(Klacaiba Module - onSound event)", "details": "Whether the sound is able to repeat", "contents": "%SOUNDCANREPEAT%"},
		{ "trigger": "SOUNDATTENUATIONTYPE", "kind": "variable", "annotation": "(Klacaiba Module - onSound event)", "details": "Type of attenuation", "contents": "%SOUNDATTENUATIONTYPE%"},
		{ "trigger": "SOUNDCATEGORY", "kind": "variable", "annotation": "(Klacaiba Module - onSound event)", "details": "Category of sound", "contents": "%SOUNDCATEGORY%"},
		{ "trigger": "SOUNDPITCH", "kind": "variable", "annotation": "(Klacaiba Module - onSound event)", "details": "Pitch of the sound as float", "contents": "%SOUNDPITCH%"},
		{ "trigger": "SOUNDVOLUME", "kind": "variable", "annotation": "(Klacaiba Module - onSound event)", "details": "Volume of the sound as float", "contents": "%SOUNDVOLUME%"},
		{ "trigger": "SOUNDRESOURCE", "kind": "variable", "annotation": "(Klacaiba Module - onSound event)", "details": "Resourcepath of the sound", "contents": "%SOUNDRESOURCE%"},

	// Macro Modules Essential
		{ "trigger": "getslotnbt", "kind": "keyword", "annotation": "(Macro Modules Essential)", "details": "Get nbt of item in slot", "contents": "getslotnbt(${1:<slotid>},${2:<path>},&${3:[itemId]},#${4:[stackSize]},#${5:[damage]});"},
		{ "trigger": "pressbutton", "kind": "keyword", "annotation": "(Macro Modules Essential)", "details": "Press button", "contents": "pressbutton(${1:<buttonid>},${2:[button]});"},
		{ "trigger": "getprop", "kind": "keyword", "annotation": "(Macro Modules Essential)", "details": "gets property of block at coordinates", "contents": "getprop(${1:<x>},${2:<y>},${3:<z>},${4:<propname>},#${5:[propvar]});"},
		{ "trigger": "slotmiddleclick", "kind": "keyword", "annotation": "(Macro Modules Essential)", "details": "middle click inventory slot", "contents": "slotmiddleclick(${1:<slotid>});"},

	// Reconnect Module
		{ "trigger": "reconnect", "kind": "keyword", "annotation": "(Reconnect Module)", "details": "Auto reconnects to a server", "contents": "reconnect(${1:<on|off|10-300>});"},
		{ "trigger": "RECONNECT", "kind": "variable", "annotation": "(Reconnect Module)", "details": "Whether or not auto reconnect is enabled", "contents": "%RECONNECT%"},

	// scaneUtils Module
		{ "trigger": "getdensity", "kind": "keyword", "annotation": "(scaneUtils Module)", "details": "Searches for sugarcane in the given direction", "contents": "getdensity(${1:[N/E/S/W]},#${2:<limit_search>},&${3:<initial_position>},#${4:<blocks_searched>},#${5:<sugarcane_found>});"},
		{ "trigger": "getitemstacksize", "kind": "keyword", "annotation": "(scaneUtils Module)", "details": "Searches the inventory, returns the stacksize", "contents": "#${1:stacksize} = getitemstacksize(&${2:<item_name>},#${3:[limit_search]});"},
		{ "trigger": "getpercentage", "kind": "keyword", "annotation": "(scaneUtils Module)", "details": "Does first divided by second times 100", "contents": "getpercentage(#${1:[percentage]},#${2:<first>},#${3:<second>});"},
		{ "trigger": "getslotpositions", "kind": "keyword", "annotation": "(scaneUtils Module)", "details": "Searches the inventory, returns the position", "contents": "getslotpositions(&${1:<item_name>},#${2:<result_position>},#${3:[result_stacksize]});"},

	// SignText Module
		{ "trigger": "gethitsigntext", "kind": "keyword", "annotation": "(SignText Module)", "details": "Returns signtext of hit sign", "contents": "${2:&${1:[outarray]}[] = }gethitsigntext(&${1:[outarray]}[]);"},
		{ "trigger": "getsigntext", "kind": "keyword", "annotation": "(SignText Module)", "details": "Returns signtext at coordinates", "contents": "${2:&${1:[outarray]} = }getsigntext(${3:<x>},${4:<y>},${5:<z>},&${1:[outarray]});"},
		{ "trigger": "setsigntext", "kind": "keyword", "annotation": "(SignText Module)", "details": "Set text of sign in SP", "contents": "setsigntext(${1:<x>},${2:<y>}${3:,<z>},${4:<line1>},${5:<line2>},${6:<line3>},${7:<line4>});"},
		{ "trigger": "MODULESIGNTEXT", "kind": "variable", "annotation": "(SignText Module)", "details": "Returns true if the module is installed", "contents": "%MODULESIGNTEXT%"},

	// Switch Module
		{ "trigger": "switch", "kind": "snippet", "annotation": "switch…case…default…endcase (Switch Case Module)", "details": "Switch case statement", "contents": "switch(${1:<expression>});\n	case(${2:<value>});\n		$3\n	default;\n		$4\nendswitch;\n$5"},
		{ "trigger": "case", "kind": "keyword", "annotation": "(Switch Case Module)", "details": "case statement", "contents": "case(${1:<value>});\n	$2"},

	// Utilities Module
		{ "trigger": "eval", "kind": "keyword", "annotation":"(Utilities Module)", "details": "Evaluates an expression", "contents": "${2:&${1:[result]} = }eval(&${1:[result]},${3:<expression string>});"},
		{ "trigger": "char", "kind": "keyword", "annotation":"(Utilities Module)", "details": "Puts set unicode value into &char", "contents": "char(&${1:<char>},${2:<decimal unicode value>});"},
		{ "trigger": "mod", "kind": "keyword", "annotation":"(Utilities Module)", "details": "Evaluates num1 modulo num2", "contents": "mod(#${1:<result>},${2:<num1>},${3:<num2>});"},
		{ "trigger": "oldname", "kind": "keyword", "annotation":"(Utilities Module)", "details": "Gets the past names of a user", "contents": "oldname(&${1:<names>}[],${2:<username>});"},
		{ "trigger": "readfile", "kind": "keyword", "annotation":"(Utilities Module)", "details": "Gets the content of a file", "contents": "readfile(&${1:<content>}[],${2:<filename>});"},
		{ "trigger": "readfile", "kind": "keyword", "annotation":"(Utilities Module)", "details": "Reads file from path", "contents": "${2:&${1:<content>}[] = }readfile(&${1:[content]}[],${3:<path>});"},
		{ "trigger": "unix", "kind": "keyword", "annotation":"(Utilities Module)", "details": "Gets the s/ms of current timestamp", "contents": "${2:#${1:[seconds]} = }unix(#${1:[seconds]},#${3:[milliseconds]});"},

	// Utils Module
		{ "trigger": "trim", "kind": "keyword", "annotation":"(Utils Module)", "details": "Removes whitespace", "contents": "&${1:result} = trim(&${2:string});"},
		{ "trigger": "shuffle", "kind": "keyword", "annotation":"(Utils Module)", "details": "Shuffles an array", "contents": "shuffle(${1:array[]});"},

	// Utils actions iterator
		{ "trigger": "ACTIONNAME", "kind": "variable", "annotation": "(Utils Module - actions iterator)", "details": "Action name", "contents": "%ACTIONNAME%"},
		{ "trigger": "ACTIONUSAGE", "kind": "variable", "annotation": "(Utils Module - actions iterator)", "details": "Action usage", "contents": "%ACTIONUSAGE%"},
		{ "trigger": "ACTIONRETURN", "kind": "variable", "annotation": "(Utils Module - actions iterator)", "details": "Action return", "contents": "%ACTIONRETURN%"},
		{ "trigger": "ACTIONDESCRIPTION", "kind": "variable", "annotation": "(Utils Module - actions iterator)", "details": "Action description", "contents": "%ACTIONDESCRIPTION%"},

	// Utils events iterator
		{ "trigger": "EVENTNAME", "kind": "variable", "annotation": "(Utils Module - events iterator)", "details": "Event name", "contents": "%EVENTNAME%"},
		{ "trigger": "EVENTID", "kind": "variable", "annotation": "(Utils Module - events iterator)", "details": "Event id", "contents": "%EVENTID%"},
		{ "trigger": "EVENTHELP", "kind": "variable", "annotation": "(Utils Module - events iterator)", "details": "Event help", "contents": "%EVENTHELP%"},

	// Utils iterators iterator
		{ "trigger": "iterators", "kind": "keyword", "annotation": "(Utils Module - iterators iterator)", "details": "Iterates over all iterators", "contents": "iterators"},
		{ "trigger": "ITERATORNAME", "kind": "variable", "annotation": "(Utils Module - iterators iterator)", "details": "Iterator name", "contents": "%ITERATORNAME%"},

	// Utils onPotionEffect event
		{ "trigger": "NEWEFFECT", "kind": "variable", "annotation": "(Utils Module - onPotionEffect event)", "details": "New potion effect", "contents": "%NEWEFFECT%"},
		{ "trigger": "NEWEFFECTID", "kind": "variable", "annotation": "(Utils Module - onPotionEffect event)", "details": "New potion effect id", "contents": "%NEWEFFECTID%"},
		{ "trigger": "NEWEFFECTNAME", "kind": "variable", "annotation": "(Utils Module - onPotionEffect event)", "details": "New potion effect name", "contents": "%NEWEFFECTNAME%"},
		{ "trigger": "NEWEFFECTPOWER", "kind": "variable", "annotation": "(Utils Module - onPotionEffect event)", "details": "New potion effect power", "contents": "%NEWEFFECTPOWER%"},
		{ "trigger": "NEWEFFECTTIME", "kind": "variable", "annotation": "(Utils Module - onPotionEffect event)", "details": "New potion effect time", "contents": "%NEWEFFECTTIME%"},

	// WindowsNotifications Module
		{ "trigger": "notify", "kind": "keyword", "annotation":"(WindowsNotification Module)", "details": "Creates a system tray", "contents": "notify(${1:[title]},${2:[message]});"},

	// Yaku Module
		{ "trigger": "mod", "kind": "keyword", "annotation": "(Yaku's Module)", "details": "Modulus function", "contents": "mod(#${1:<divident>},#${2:<divisor>});"},
		{ "trigger": "trunc", "kind": "keyword", "annotation": "(Yaku's Module)", "details": "Returns the integer part of the number", "contents": "trunc(#${1:<float>});"},
		{ "trigger": "ackermann", "kind": "keyword", "annotation": "(Yaku's Module)", "details": "Ackermann function implementation", "contents": "ackermann(#${1:<m>},#${2:<n>});"},
		{ "trigger": "calcstacks", "kind": "keyword", "annotation": "(Yaku's Module)", "details": "Calculates stacks", "contents": "calcstacks(#${1:<items>},#${2:[stacks]},#${3:[leftovers]});"},
		{ "trigger": "pickmod", "kind": "keyword", "annotation": "(Yaku's Module)", "details": "Improved original pick action", "contents": "pickmod(${1:[namespace]}:${2:<itemid>}:${3:[damage]},${4:[addInCreative]});"},
		{ "trigger": "antighost", "kind": "keyword", "annotation": "(Yaku's Module)", "details": "Resolve ghost blocks issue", "contents": "antighost;"},



	// MKB Key variables
		{ "trigger": "ALT", "kind": "variable", "contents": "%ALT%"},
		{ "trigger": "ALT", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~ALT%"},
		{ "trigger": "CTRL", "kind": "variable", "contents": "%CTRL%"},
		{ "trigger": "CTRL", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~CTRL%"},
		{ "trigger": "KEY_0", "kind": "variable", "contents": "%KEY_0%"},
		{ "trigger": "KEY_0", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_0%"},
		{ "trigger": "KEY_1", "kind": "variable", "contents": "%KEY_1%"},
		{ "trigger": "KEY_1", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_1%"},
		{ "trigger": "KEY_2", "kind": "variable", "contents": "%KEY_2%"},
		{ "trigger": "KEY_2", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_2%"},
		{ "trigger": "KEY_3", "kind": "variable", "contents": "%KEY_3%"},
		{ "trigger": "KEY_3", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_3%"},
		{ "trigger": "KEY_4", "kind": "variable", "contents": "%KEY_4%"},
		{ "trigger": "KEY_4", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_4%"},
		{ "trigger": "KEY_5", "kind": "variable", "contents": "%KEY_5%"},
		{ "trigger": "KEY_5", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_5%"},
		{ "trigger": "KEY_6", "kind": "variable", "contents": "%KEY_6%"},
		{ "trigger": "KEY_6", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_6%"},
		{ "trigger": "KEY_7", "kind": "variable", "contents": "%KEY_7%"},
		{ "trigger": "KEY_7", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_7%"},
		{ "trigger": "KEY_8", "kind": "variable", "contents": "%KEY_8%"},
		{ "trigger": "KEY_8", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_8%"},
		{ "trigger": "KEY_9", "kind": "variable", "contents": "%KEY_9%"},
		{ "trigger": "KEY_9", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_9%"},
		{ "trigger": "KEY_A", "kind": "variable", "contents": "%KEY_A%"},
		{ "trigger": "KEY_A", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_A%"},
		{ "trigger": "KEY_ADD", "kind": "variable", "contents": "%KEY_ADD%"},
		{ "trigger": "KEY_ADD", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_ADD%"},
		{ "trigger": "KEY_APOSTROPHE", "kind": "variable", "contents": "%KEY_APOSTROPHE%"},
		{ "trigger": "KEY_APOSTROPHE", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_APOSTROPHE%"},
		{ "trigger": "KEY_APPS", "kind": "variable", "contents": "%KEY_APPS%"},
		{ "trigger": "KEY_APPS", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_APPS%"},
		{ "trigger": "KEY_AT", "kind": "variable", "contents": "%KEY_AT%"},
		{ "trigger": "KEY_AT", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_AT%"},
		{ "trigger": "KEY_AX", "kind": "variable", "contents": "%KEY_AX%"},
		{ "trigger": "KEY_AX", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_AX%"},
		{ "trigger": "KEY_B", "kind": "variable", "contents": "%KEY_B%"},
		{ "trigger": "KEY_B", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_B%"},
		{ "trigger": "KEY_BACK", "kind": "variable", "contents": "%KEY_BACK%"},
		{ "trigger": "KEY_BACK", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_BACK%"},
		{ "trigger": "KEY_BACKSLASH", "kind": "variable", "contents": "%KEY_BACKSLASH%"},
		{ "trigger": "KEY_BACKSLASH", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_BACKSLASH%"},
		{ "trigger": "KEY_C", "kind": "variable", "contents": "%KEY_C%"},
		{ "trigger": "KEY_C", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_C%"},
		{ "trigger": "KEY_CAPITAL", "kind": "variable", "contents": "%KEY_CAPITAL%"},
		{ "trigger": "KEY_CAPITAL", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_CAPITAL%"},
		{ "trigger": "KEY_CIRCUMFLEX", "kind": "variable", "contents": "%KEY_CIRCUMFLEX%"},
		{ "trigger": "KEY_CIRCUMFLEX", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_CIRCUMFLEX%"},
		{ "trigger": "KEY_CLEAR", "kind": "variable", "contents": "%KEY_CLEAR%"},
		{ "trigger": "KEY_CLEAR", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_CLEAR%"},
		{ "trigger": "KEY_COLON", "kind": "variable", "contents": "%KEY_COLON%"},
		{ "trigger": "KEY_COLON", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_COLON%"},
		{ "trigger": "KEY_COMMA", "kind": "variable", "contents": "%KEY_COMMA%"},
		{ "trigger": "KEY_COMMA", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_COMMA%"},
		{ "trigger": "KEY_CONVERT", "kind": "variable", "contents": "%KEY_CONVERT%"},
		{ "trigger": "KEY_CONVERT", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_CONVERT%"},
		{ "trigger": "KEY_D", "kind": "variable", "contents": "%KEY_D%"},
		{ "trigger": "KEY_D", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_D%"},
		{ "trigger": "KEY_DECIMAL", "kind": "variable", "contents": "%KEY_DECIMAL%"},
		{ "trigger": "KEY_DECIMAL", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_DECIMAL%"},
		{ "trigger": "KEY_DELETE", "kind": "variable", "contents": "%KEY_DELETE%"},
		{ "trigger": "KEY_DELETE", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_DELETE%"},
		{ "trigger": "KEY_DIVIDE", "kind": "variable", "contents": "%KEY_DIVIDE%"},
		{ "trigger": "KEY_DIVIDE", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_DIVIDE%"},
		{ "trigger": "KEY_DOWN", "kind": "variable", "contents": "%KEY_DOWN%"},
		{ "trigger": "KEY_DOWN", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_DOWN%"},
		{ "trigger": "KEY_E", "kind": "variable", "contents": "%KEY_E%"},
		{ "trigger": "KEY_E", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_E%"},
		{ "trigger": "KEY_END", "kind": "variable", "contents": "%KEY_END%"},
		{ "trigger": "KEY_END", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_END%"},
		{ "trigger": "KEY_EQUALS", "kind": "variable", "contents": "%KEY_EQUALS%"},
		{ "trigger": "KEY_EQUALS", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_EQUALS%"},
		{ "trigger": "KEY_ESCAPE", "kind": "variable", "contents": "%KEY_ESCAPE%"},
		{ "trigger": "KEY_ESCAPE", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_ESCAPE%"},
		{ "trigger": "KEY_F", "kind": "variable", "contents": "%KEY_F%"},
		{ "trigger": "KEY_F", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_F%"},
		{ "trigger": "KEY_F1", "kind": "variable", "contents": "%KEY_F1%"},
		{ "trigger": "KEY_F1", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_F1%"},
		{ "trigger": "KEY_F10", "kind": "variable", "contents": "%KEY_F10%"},
		{ "trigger": "KEY_F10", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_F10%"},
		{ "trigger": "KEY_F11", "kind": "variable", "contents": "%KEY_F11%"},
		{ "trigger": "KEY_F11", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_F11%"},
		{ "trigger": "KEY_F12", "kind": "variable", "contents": "%KEY_F12%"},
		{ "trigger": "KEY_F12", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_F12%"},
		{ "trigger": "KEY_F13", "kind": "variable", "contents": "%KEY_F13%"},
		{ "trigger": "KEY_F13", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_F13%"},
		{ "trigger": "KEY_F14", "kind": "variable", "contents": "%KEY_F14%"},
		{ "trigger": "KEY_F14", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_F14%"},
		{ "trigger": "KEY_F15", "kind": "variable", "contents": "%KEY_F15%"},
		{ "trigger": "KEY_F15", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_F15%"},
		{ "trigger": "KEY_F16", "kind": "variable", "contents": "%KEY_F16%"},
		{ "trigger": "KEY_F16", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_F16%"},
		{ "trigger": "KEY_F17", "kind": "variable", "contents": "%KEY_F17%"},
		{ "trigger": "KEY_F17", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_F17%"},
		{ "trigger": "KEY_F18", "kind": "variable", "contents": "%KEY_F18%"},
		{ "trigger": "KEY_F18", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_F18%"},
		{ "trigger": "KEY_F19", "kind": "variable", "contents": "%KEY_F19%"},
		{ "trigger": "KEY_F19", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_F19%"},
		{ "trigger": "KEY_F2", "kind": "variable", "contents": "%KEY_F2%"},
		{ "trigger": "KEY_F2", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_F2%"},
		{ "trigger": "KEY_F3", "kind": "variable", "contents": "%KEY_F3%"},
		{ "trigger": "KEY_F3", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_F3%"},
		{ "trigger": "KEY_F4", "kind": "variable", "contents": "%KEY_F4%"},
		{ "trigger": "KEY_F4", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_F4%"},
		{ "trigger": "KEY_F5", "kind": "variable", "contents": "%KEY_F5%"},
		{ "trigger": "KEY_F5", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_F5%"},
		{ "trigger": "KEY_F6", "kind": "variable", "contents": "%KEY_F6%"},
		{ "trigger": "KEY_F6", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_F6%"},
		{ "trigger": "KEY_F7", "kind": "variable", "contents": "%KEY_F7%"},
		{ "trigger": "KEY_F7", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_F7%"},
		{ "trigger": "KEY_F8", "kind": "variable", "contents": "%KEY_F8%"},
		{ "trigger": "KEY_F8", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_F8%"},
		{ "trigger": "KEY_F9", "kind": "variable", "contents": "%KEY_F9%"},
		{ "trigger": "KEY_F9", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_F9%"},
		{ "trigger": "KEY_FUNCTION", "kind": "variable", "contents": "%KEY_FUNCTION%"},
		{ "trigger": "KEY_FUNCTION", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_FUNCTION%"},
		{ "trigger": "KEY_G", "kind": "variable", "contents": "%KEY_G%"},
		{ "trigger": "KEY_G", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_G%"},
		{ "trigger": "KEY_GRAVE", "kind": "variable", "contents": "%KEY_GRAVE%"},
		{ "trigger": "KEY_GRAVE", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_GRAVE%"},
		{ "trigger": "KEY_H", "kind": "variable", "contents": "%KEY_H%"},
		{ "trigger": "KEY_H", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_H%"},
		{ "trigger": "KEY_HOME", "kind": "variable", "contents": "%KEY_HOME%"},
		{ "trigger": "KEY_HOME", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_HOME%"},
		{ "trigger": "KEY_I", "kind": "variable", "contents": "%KEY_I%"},
		{ "trigger": "KEY_I", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_I%"},
		{ "trigger": "KEY_INSERT", "kind": "variable", "contents": "%KEY_INSERT%"},
		{ "trigger": "KEY_INSERT", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_INSERT%"},
		{ "trigger": "KEY_J", "kind": "variable", "contents": "%KEY_J%"},
		{ "trigger": "KEY_J", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_J%"},
		{ "trigger": "KEY_K", "kind": "variable", "contents": "%KEY_K%"},
		{ "trigger": "KEY_K", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_K%"},
		{ "trigger": "KEY_KANA", "kind": "variable", "contents": "%KEY_KANA%"},
		{ "trigger": "KEY_KANA", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_KANA%"},
		{ "trigger": "KEY_KANJI", "kind": "variable", "contents": "%KEY_KANJI%"},
		{ "trigger": "KEY_KANJI", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_KANJI%"},
		{ "trigger": "KEY_L", "kind": "variable", "contents": "%KEY_L%"},
		{ "trigger": "KEY_L", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_L%"},
		{ "trigger": "KEY_LBRACKET", "kind": "variable", "contents": "%KEY_LBRACKET%"},
		{ "trigger": "KEY_LBRACKET", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_LBRACKET%"},
		{ "trigger": "KEY_LCONTROL", "kind": "variable", "contents": "%KEY_LCONTROL%"},
		{ "trigger": "KEY_LCONTROL", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_LCONTROL%"},
		{ "trigger": "KEY_LEFT", "kind": "variable", "contents": "%KEY_LEFT%"},
		{ "trigger": "KEY_LEFT", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_LEFT%"},
		{ "trigger": "KEY_LMENU", "kind": "variable", "contents": "%KEY_LMENU%"},
		{ "trigger": "KEY_LMENU", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_LMENU%"},
		{ "trigger": "KEY_LMETA", "kind": "variable", "contents": "%KEY_LMETA%"},
		{ "trigger": "KEY_LMETA", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_LMETA%"},
		{ "trigger": "KEY_LSHIFT", "kind": "variable", "contents": "%KEY_LSHIFT%"},
		{ "trigger": "KEY_LSHIFT", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_LSHIFT%"},
		{ "trigger": "KEY_M", "kind": "variable", "contents": "%KEY_M%"},
		{ "trigger": "KEY_M", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_M%"},
		{ "trigger": "KEY_MINUS", "kind": "variable", "contents": "%KEY_MINUS%"},
		{ "trigger": "KEY_MINUS", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_MINUS%"},
		{ "trigger": "KEY_MOUSE3", "kind": "variable", "contents": "%KEY_MOUSE3%"},
		{ "trigger": "KEY_MOUSE3", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_MOUSE3%"},
		{ "trigger": "KEY_MOUSE4", "kind": "variable", "contents": "%KEY_MOUSE4%"},
		{ "trigger": "KEY_MOUSE4", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_MOUSE4%"},
		{ "trigger": "KEY_MULTIPLY", "kind": "variable", "contents": "%KEY_MULTIPLY%"},
		{ "trigger": "KEY_MULTIPLY", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_MULTIPLY%"},
		{ "trigger": "KEY_N", "kind": "variable", "contents": "%KEY_N%"},
		{ "trigger": "KEY_N", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_N%"},
		{ "trigger": "KEY_NEXT", "kind": "variable", "contents": "%KEY_NEXT%"},
		{ "trigger": "KEY_NEXT", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_NEXT%"},
		{ "trigger": "KEY_NOCONVERT", "kind": "variable", "contents": "%KEY_NOCONVERT%"},
		{ "trigger": "KEY_NOCONVERT", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_NOCONVERT%"},
		{ "trigger": "KEY_NONE", "kind": "variable", "contents": "%KEY_NONE%"},
		{ "trigger": "KEY_NONE", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_NONE%"},
		{ "trigger": "KEY_NUMLOCK", "kind": "variable", "contents": "%KEY_NUMLOCK%"},
		{ "trigger": "KEY_NUMLOCK", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_NUMLOCK%"},
		{ "trigger": "KEY_NUMPAD0", "kind": "variable", "contents": "%KEY_NUMPAD0%"},
		{ "trigger": "KEY_NUMPAD0", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_NUMPAD0%"},
		{ "trigger": "KEY_NUMPAD1", "kind": "variable", "contents": "%KEY_NUMPAD1%"},
		{ "trigger": "KEY_NUMPAD1", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_NUMPAD1%"},
		{ "trigger": "KEY_NUMPAD2", "kind": "variable", "contents": "%KEY_NUMPAD2%"},
		{ "trigger": "KEY_NUMPAD2", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_NUMPAD2%"},
		{ "trigger": "KEY_NUMPAD3", "kind": "variable", "contents": "%KEY_NUMPAD3%"},
		{ "trigger": "KEY_NUMPAD3", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_NUMPAD3%"},
		{ "trigger": "KEY_NUMPAD4", "kind": "variable", "contents": "%KEY_NUMPAD4%"},
		{ "trigger": "KEY_NUMPAD4", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_NUMPAD4%"},
		{ "trigger": "KEY_NUMPAD5", "kind": "variable", "contents": "%KEY_NUMPAD5%"},
		{ "trigger": "KEY_NUMPAD5", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_NUMPAD5%"},
		{ "trigger": "KEY_NUMPAD6", "kind": "variable", "contents": "%KEY_NUMPAD6%"},
		{ "trigger": "KEY_NUMPAD6", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_NUMPAD6%"},
		{ "trigger": "KEY_NUMPAD7", "kind": "variable", "contents": "%KEY_NUMPAD7%"},
		{ "trigger": "KEY_NUMPAD7", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_NUMPAD7%"},
		{ "trigger": "KEY_NUMPAD8", "kind": "variable", "contents": "%KEY_NUMPAD8%"},
		{ "trigger": "KEY_NUMPAD8", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_NUMPAD8%"},
		{ "trigger": "KEY_NUMPAD9", "kind": "variable", "contents": "%KEY_NUMPAD9%"},
		{ "trigger": "KEY_NUMPAD9", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_NUMPAD9%"},
		{ "trigger": "KEY_NUMPADCOMMA", "kind": "variable", "contents": "%KEY_NUMPADCOMMA%"},
		{ "trigger": "KEY_NUMPADCOMMA", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_NUMPADCOMMA%"},
		{ "trigger": "KEY_NUMPADENTER", "kind": "variable", "contents": "%KEY_NUMPADENTER%"},
		{ "trigger": "KEY_NUMPADENTER", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_NUMPADENTER%"},
		{ "trigger": "KEY_NUMPADEQUALS", "kind": "variable", "contents": "%KEY_NUMPADEQUALS%"},
		{ "trigger": "KEY_NUMPADEQUALS", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_NUMPADEQUALS%"},
		{ "trigger": "KEY_O", "kind": "variable", "contents": "%KEY_O%"},
		{ "trigger": "KEY_O", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_O%"},
		{ "trigger": "KEY_P", "kind": "variable", "contents": "%KEY_P%"},
		{ "trigger": "KEY_P", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_P%"},
		{ "trigger": "KEY_PAUSE", "kind": "variable", "contents": "%KEY_PAUSE%"},
		{ "trigger": "KEY_PAUSE", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_PAUSE%"},
		{ "trigger": "KEY_PERIOD", "kind": "variable", "contents": "%KEY_PERIOD%"},
		{ "trigger": "KEY_PERIOD", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_PERIOD%"},
		{ "trigger": "KEY_POWER", "kind": "variable", "contents": "%KEY_POWER%"},
		{ "trigger": "KEY_POWER", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_POWER%"},
		{ "trigger": "KEY_PRIOR", "kind": "variable", "contents": "%KEY_PRIOR%"},
		{ "trigger": "KEY_PRIOR", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_PRIOR%"},
		{ "trigger": "KEY_Q", "kind": "variable", "contents": "%KEY_Q%"},
		{ "trigger": "KEY_Q", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_Q%"},
		{ "trigger": "KEY_R", "kind": "variable", "contents": "%KEY_R%"},
		{ "trigger": "KEY_R", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_R%"},
		{ "trigger": "KEY_RBRACKET", "kind": "variable", "contents": "%KEY_RBRACKET%"},
		{ "trigger": "KEY_RBRACKET", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_RBRACKET%"},
		{ "trigger": "KEY_RCONTROL", "kind": "variable", "contents": "%KEY_RCONTROL%"},
		{ "trigger": "KEY_RCONTROL", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_RCONTROL%"},
		{ "trigger": "KEY_RETURN", "kind": "variable", "contents": "%KEY_RETURN%"},
		{ "trigger": "KEY_RETURN", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_RETURN%"},
		{ "trigger": "KEY_RIGHT", "kind": "variable", "contents": "%KEY_RIGHT%"},
		{ "trigger": "KEY_RIGHT", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_RIGHT%"},
		{ "trigger": "KEY_RMENU", "kind": "variable", "contents": "%KEY_RMENU%"},
		{ "trigger": "KEY_RMENU", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_RMENU%"},
		{ "trigger": "KEY_RMETA", "kind": "variable", "contents": "%KEY_RMETA%"},
		{ "trigger": "KEY_RMETA", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_RMETA%"},
		{ "trigger": "KEY_RSHIFT", "kind": "variable", "contents": "%KEY_RSHIFT%"},
		{ "trigger": "KEY_RSHIFT", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_RSHIFT%"},
		{ "trigger": "KEY_S", "kind": "variable", "contents": "%KEY_S%"},
		{ "trigger": "KEY_S", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_S%"},
		{ "trigger": "KEY_SCROLL", "kind": "variable", "contents": "%KEY_SCROLL%"},
		{ "trigger": "KEY_SCROLL", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_SCROLL%"},
		{ "trigger": "KEY_SECTION", "kind": "variable", "contents": "%KEY_SECTION%"},
		{ "trigger": "KEY_SECTION", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_SECTION%"},
		{ "trigger": "KEY_SEMICOLON", "kind": "variable", "contents": "%KEY_SEMICOLON%"},
		{ "trigger": "KEY_SEMICOLON", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_SEMICOLON%"},
		{ "trigger": "KEY_SLASH", "kind": "variable", "contents": "%KEY_SLASH%"},
		{ "trigger": "KEY_SLASH", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_SLASH%"},
		{ "trigger": "KEY_SLEEP", "kind": "variable", "contents": "%KEY_SLEEP%"},
		{ "trigger": "KEY_SLEEP", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_SLEEP%"},
		{ "trigger": "KEY_SPACE", "kind": "variable", "contents": "%KEY_SPACE%"},
		{ "trigger": "KEY_SPACE", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_SPACE%"},
		{ "trigger": "KEY_STOP", "kind": "variable", "contents": "%KEY_STOP%"},
		{ "trigger": "KEY_STOP", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_STOP%"},
		{ "trigger": "KEY_SUBTRACT", "kind": "variable", "contents": "%KEY_SUBTRACT%"},
		{ "trigger": "KEY_SUBTRACT", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_SUBTRACT%"},
		{ "trigger": "KEY_SYSRQ", "kind": "variable", "contents": "%KEY_SYSRQ%"},
		{ "trigger": "KEY_SYSRQ", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_SYSRQ%"},
		{ "trigger": "KEY_T", "kind": "variable", "contents": "%KEY_T%"},
		{ "trigger": "KEY_T", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_T%"},
		{ "trigger": "KEY_TAB", "kind": "variable", "contents": "%KEY_TAB%"},
		{ "trigger": "KEY_TAB", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_TAB%"},
		{ "trigger": "KEY_U", "kind": "variable", "contents": "%KEY_U%"},
		{ "trigger": "KEY_U", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_U%"},
		{ "trigger": "KEY_UNDERLINE", "kind": "variable", "contents": "%KEY_UNDERLINE%"},
		{ "trigger": "KEY_UNDERLINE", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_UNDERLINE%"},
		{ "trigger": "KEY_UNLABELED", "kind": "variable", "contents": "%KEY_UNLABELED%"},
		{ "trigger": "KEY_UNLABELED", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_UNLABELED%"},
		{ "trigger": "KEY_UP", "kind": "variable", "contents": "%KEY_UP%"},
		{ "trigger": "KEY_UP", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_UP%"},
		{ "trigger": "KEY_V", "kind": "variable", "contents": "%KEY_V%"},
		{ "trigger": "KEY_V", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_V%"},
		{ "trigger": "KEY_W", "kind": "variable", "contents": "%KEY_W%"},
		{ "trigger": "KEY_W", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_W%"},
		{ "trigger": "KEY_X", "kind": "variable", "contents": "%KEY_X%"},
		{ "trigger": "KEY_X", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_X%"},
		{ "trigger": "KEY_Y", "kind": "variable", "contents": "%KEY_Y%"},
		{ "trigger": "KEY_Y", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_Y%"},
		{ "trigger": "KEY_YEN", "kind": "variable", "contents": "%KEY_YEN%"},
		{ "trigger": "KEY_YEN", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_YEN%"},
		{ "trigger": "KEY_Z", "kind": "variable", "contents": "%KEY_Z%"},
		{ "trigger": "KEY_Z", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~KEY_Z%"},
		{ "trigger": "LMOUSE", "kind": "variable", "contents": "%LMOUSE%"},
		{ "trigger": "LMOUSE", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~LMOUSE%"},
		{ "trigger": "MIDDLEMOUSE", "kind": "variable", "contents": "%MIDDLEMOUSE%"},
		{ "trigger": "MIDDLEMOUSE", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~MIDDLEMOUSE%"},
		{ "trigger": "RMOUSE", "kind": "variable", "contents": "%RMOUSE%"},
		{ "trigger": "RMOUSE", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~RMOUSE%"},
		{ "trigger": "SHIFT", "kind": "variable", "contents": "%SHIFT%"},
		{ "trigger": "SHIFT", "kind": "variable", "annotation": "(Pressed at start)", "contents": "%~SHIFT%"},

	// Hit variable
		{ "trigger": "HIT", "kind": "variable", "details": "Type of the thing the Player is looking at", "contents": "%HIT%"},
		{ "trigger": "HIT_AGE", "kind": "variable", "contents": "%HIT_AGE%"},
		{ "trigger": "HIT_ATTACHED", "kind": "variable", "contents": "%HIT_ATTACHED%"},
		{ "trigger": "HIT_AXIS", "kind": "variable", "contents": "%HIT_AXIS%"},
		{ "trigger": "HIT_BITES", "kind": "variable", "contents": "%HIT_BITES%"},
		{ "trigger": "HIT_CHECK_DECAY", "kind": "variable", "contents": "%HIT_CHECK_DECAY%"},
		{ "trigger": "HIT_COLOR", "kind": "variable", "contents": "%HIT_COLOR%"},
		{ "trigger": "HIT_CONDITIONAL", "kind": "variable", "contents": "%HIT_CONDITIONAL%"},
		{ "trigger": "HIT_CONTENTS", "kind": "variable", "contents": "%HIT_CONTENTS%"},
		{ "trigger": "HIT_DAMAGE", "kind": "variable", "contents": "%HIT_DAMAGE%"},
		{ "trigger": "HIT_DECAYABLE", "kind": "variable", "contents": "%HIT_DECAYABLE%"},
		{ "trigger": "HIT_DELAY", "kind": "variable", "contents": "%HIT_DELAY%"},
		{ "trigger": "HIT_DISARMED", "kind": "variable", "contents": "%HIT_DISARMED%"},
		{ "trigger": "HIT_DOWN", "kind": "variable", "contents": "%HIT_DOWN%"},
		{ "trigger": "HIT_EAST", "kind": "variable", "contents": "%HIT_EAST%"},
		{ "trigger": "HIT_ENABLED", "kind": "variable", "contents": "%HIT_ENABLED%"},
		{ "trigger": "HIT_EXPLODE", "kind": "variable", "contents": "%HIT_EXPLODE%"},
		{ "trigger": "HIT_EXTENDED", "kind": "variable", "contents": "%HIT_EXTENDED%"},
		{ "trigger": "HIT_EYE", "kind": "variable", "contents": "%HIT_EYE%"},
		{ "trigger": "HIT_FACING", "kind": "variable", "contents": "%HIT_FACING%"},
		{ "trigger": "HIT_HALF", "kind": "variable", "contents": "%HIT_HALF%"},
		{ "trigger": "HIT_HAS_BOTTLE_0", "kind": "variable", "contents": "%HIT_HAS_BOTTLE_0%"},
		{ "trigger": "HIT_HAS_BOTTLE_1", "kind": "variable", "contents": "%HIT_HAS_BOTTLE_1%"},
		{ "trigger": "HIT_HAS_BOTTLE_2", "kind": "variable", "contents": "%HIT_HAS_BOTTLE_2%"},
		{ "trigger": "HIT_HAS_RECORD", "kind": "variable", "contents": "%HIT_HAS_RECORD%"},
		{ "trigger": "HIT_HINGE", "kind": "variable", "contents": "%HIT_HINGE%"},
		{ "trigger": "HIT_IN_WALL", "kind": "variable", "contents": "%HIT_IN_WALL%"},
		{ "trigger": "HIT_LAYERS", "kind": "variable", "contents": "%HIT_LAYERS%"},
		{ "trigger": "HIT_LEGACY_DATA", "kind": "variable", "contents": "%HIT_LEGACY_DATA%"},
		{ "trigger": "HIT_LEVEL", "kind": "variable", "contents": "%HIT_LEVEL%"},
		{ "trigger": "HIT_LOCKED", "kind": "variable", "contents": "%HIT_LOCKED%"},
		{ "trigger": "HIT_MODE", "kind": "variable", "contents": "%HIT_MODE%"},
		{ "trigger": "HIT_MOISTURE", "kind": "variable", "contents": "%HIT_MOISTURE%"},
		{ "trigger": "HIT_NODROP", "kind": "variable", "contents": "%HIT_NODROP%"},
		{ "trigger": "HIT_NORTH", "kind": "variable", "contents": "%HIT_NORTH%"},
		{ "trigger": "HIT_OCCUPIED", "kind": "variable", "contents": "%HIT_OCCUPIED%"},
		{ "trigger": "HIT_OPEN", "kind": "variable", "contents": "%HIT_OPEN%"},
		{ "trigger": "HIT_PART", "kind": "variable", "contents": "%HIT_PART%"},
		{ "trigger": "HIT_POWER", "kind": "variable", "contents": "%HIT_POWER%"},
		{ "trigger": "HIT_POWERED", "kind": "variable", "contents": "%HIT_POWERED%"},
		{ "trigger": "HIT_ROTATION", "kind": "variable", "contents": "%HIT_ROTATION%"},
		{ "trigger": "HIT_SEAMLESS", "kind": "variable", "contents": "%HIT_SEAMLESS%"},
		{ "trigger": "HIT_SHAPE", "kind": "variable", "contents": "%HIT_SHAPE%"},
		{ "trigger": "HIT_SHORT", "kind": "variable", "contents": "%HIT_SHORT%"},
		{ "trigger": "HIT_SNOWY", "kind": "variable", "contents": "%HIT_SNOWY%"},
		{ "trigger": "HIT_SOUTH", "kind": "variable", "contents": "%HIT_SOUTH%"},
		{ "trigger": "HIT_STAGE", "kind": "variable", "contents": "%HIT_STAGE%"},
		{ "trigger": "HIT_TRIGGERED", "kind": "variable", "contents": "%HIT_TRIGGERED%"},
		{ "trigger": "HIT_TYPE", "kind": "variable", "contents": "%HIT_TYPE%"},
		{ "trigger": "HIT_UP", "kind": "variable", "contents": "%HIT_UP%"},
		{ "trigger": "HIT_VARIANT", "kind": "variable", "contents": "%HIT_VARIANT%"},
		{ "trigger": "HIT_WEST", "kind": "variable", "contents": "%HIT_WEST%"},
		{ "trigger": "HIT_WET", "kind": "variable", "contents": "%HIT_WET%"},
		{ "trigger": "HITDATA", "kind": "variable", "details": "Metadata of the thing the Player is looking at", "contents": "%HITDATA%"},
		{ "trigger": "HITID", "kind": "variable", "details": "ID of the thing the Player is looking at", "contents": "%HITID%"},
		{ "trigger": "HITNAME", "kind": "variable", "details": "Displayname of the thing the Player is looking at", "contents": "%HITNAME%"},
		{ "trigger": "HITPROGRESS", "kind": "variable", "details": "Block breaking progress of the block the Player is looking at", "contents": "%HITPROGRESS%"},
		{ "trigger": "HITSIDE", "kind": "variable", "details": "Block side of the block the Player is looking at", "contents": "%HITSIDE%"},
		{ "trigger": "HITUUID", "kind": "variable", "details": "UUID of the looked at entity or player", "contents": "%HITUUID%"},
		{ "trigger": "HITX", "kind": "variable", "details": "X position of the block the Player is looking at", "contents": "%HITX%"},
		{ "trigger": "HITY", "kind": "variable", "details": "Y position of the block the Player is looking at", "contents": "%HITY%"},
		{ "trigger": "HITZ", "kind": "variable", "details": "Z position of the block the Player is looking at", "contents": "%HITZ%"},

	// Trace variables
		{ "trigger": "trace", "kind": "keyword", "details": "Performs a ray trace operation which sets the raytrace variables in the local scope", "contents": "trace(${1:<distance>},${2:[entities]});"},
		{ "trigger": "TRACE_AGE", "kind": "variable", "contents": "%TRACE_AGE%"},
		{ "trigger": "TRACE_ATTACHED", "kind": "variable", "contents": "%TRACE_ATTACHED%"},
		{ "trigger": "TRACE_AXIS", "kind": "variable", "contents": "%TRACE_AXIS%"},
		{ "trigger": "TRACE_BITES", "kind": "variable", "contents": "%TRACE_BITES%"},
		{ "trigger": "TRACE_CHECK_DECAY", "kind": "variable", "contents": "%TRACE_CHECK_DECAY%"},
		{ "trigger": "TRACE_COLOR", "kind": "variable", "contents": "%TRACE_COLOR%"},
		{ "trigger": "TRACE_CONDITIONAL", "kind": "variable", "contents": "%TRACE_CONDITIONAL%"},
		{ "trigger": "TRACE_CONTENTS", "kind": "variable", "contents": "%TRACE_CONTENTS%"},
		{ "trigger": "TRACE_DAMAGE", "kind": "variable", "contents": "%TRACE_DAMAGE%"},
		{ "trigger": "TRACE_DECAYABLE", "kind": "variable", "contents": "%TRACE_DECAYABLE%"},
		{ "trigger": "TRACE_DELAY", "kind": "variable", "contents": "%TRACE_DELAY%"},
		{ "trigger": "TRACE_DISARMED", "kind": "variable", "contents": "%TRACE_DISARMED%"},
		{ "trigger": "TRACE_DOWN", "kind": "variable", "contents": "%TRACE_DOWN%"},
		{ "trigger": "TRACE_EAST", "kind": "variable", "contents": "%TRACE_EAST%"},
		{ "trigger": "TRACE_ENABLED", "kind": "variable", "contents": "%TRACE_ENABLED%"},
		{ "trigger": "TRACE_EXPLODE", "kind": "variable", "contents": "%TRACE_EXPLODE%"},
		{ "trigger": "TRACE_EXTENDED", "kind": "variable", "contents": "%TRACE_EXTENDED%"},
		{ "trigger": "TRACE_EYE", "kind": "variable", "contents": "%TRACE_EYE%"},
		{ "trigger": "TRACE_FACING", "kind": "variable", "contents": "%TRACE_FACING%"},
		{ "trigger": "TRACE_HALF", "kind": "variable", "contents": "%TRACE_HALF%"},
		{ "trigger": "TRACE_HAS_BOTTLE_0", "kind": "variable", "contents": "%TRACE_HAS_BOTTLE_0%"},
		{ "trigger": "TRACE_HAS_BOTTLE_1", "kind": "variable", "contents": "%TRACE_HAS_BOTTLE_1%"},
		{ "trigger": "TRACE_HAS_BOTTLE_2", "kind": "variable", "contents": "%TRACE_HAS_BOTTLE_2%"},
		{ "trigger": "TRACE_HAS_RECORD", "kind": "variable", "contents": "%TRACE_HAS_RECORD%"},
		{ "trigger": "TRACE_HINGE", "kind": "variable", "contents": "%TRACE_HINGE%"},
		{ "trigger": "TRACE_IN_WALL", "kind": "variable", "contents": "%TRACE_IN_WALL%"},
		{ "trigger": "TRACE_LAYERS", "kind": "variable", "contents": "%TRACE_LAYERS%"},
		{ "trigger": "TRACE_LEGACY_DATA", "kind": "variable", "contents": "%TRACE_LEGACY_DATA%"},
		{ "trigger": "TRACE_LEVEL", "kind": "variable", "contents": "%TRACE_LEVEL%"},
		{ "trigger": "TRACE_LOCKED", "kind": "variable", "contents": "%TRACE_LOCKED%"},
		{ "trigger": "TRACE_MODE", "kind": "variable", "contents": "%TRACE_MODE%"},
		{ "trigger": "TRACE_MOISTURE", "kind": "variable", "contents": "%TRACE_MOISTURE%"},
		{ "trigger": "TRACE_NODROP", "kind": "variable", "contents": "%TRACE_NODROP%"},
		{ "trigger": "TRACE_NORTH", "kind": "variable", "contents": "%TRACE_NORTH%"},
		{ "trigger": "TRACE_OCCUPIED", "kind": "variable", "contents": "%TRACE_OCCUPIED%"},
		{ "trigger": "TRACE_OPEN", "kind": "variable", "contents": "%TRACE_OPEN%"},
		{ "trigger": "TRACE_PART", "kind": "variable", "contents": "%TRACE_PART%"},
		{ "trigger": "TRACE_POWER", "kind": "variable", "contents": "%TRACE_POWER%"},
		{ "trigger": "TRACE_POWERED", "kind": "variable", "contents": "%TRACE_POWERED%"},
		{ "trigger": "TRACE_ROTATION", "kind": "variable", "contents": "%TRACE_ROTATION%"},
		{ "trigger": "TRACE_SEAMLESS", "kind": "variable", "contents": "%TRACE_SEAMLESS%"},
		{ "trigger": "TRACE_SHAPE", "kind": "variable", "contents": "%TRACE_SHAPE%"},
		{ "trigger": "TRACE_SHORT", "kind": "variable", "contents": "%TRACE_SHORT%"},
		{ "trigger": "TRACE_SNOWY", "kind": "variable", "contents": "%TRACE_SNOWY%"},
		{ "trigger": "TRACE_SOUTH", "kind": "variable", "contents": "%TRACE_SOUTH%"},
		{ "trigger": "TRACE_STAGE", "kind": "variable", "contents": "%TRACE_STAGE%"},
		{ "trigger": "TRACE_TRIGGERED", "kind": "variable", "contents": "%TRACE_TRIGGERED%"},
		{ "trigger": "TRACE_TYPE", "kind": "variable", "contents": "%TRACE_TYPE%"},
		{ "trigger": "TRACE_UP", "kind": "variable", "contents": "%TRACE_UP%"},
		{ "trigger": "TRACE_VARIANT", "kind": "variable", "contents": "%TRACE_VARIANT%"},
		{ "trigger": "TRACE_WEST", "kind": "variable", "contents": "%TRACE_WEST%"},
		{ "trigger": "TRACE_WET", "kind": "variable", "contents": "%TRACE_WET%"},
		{ "trigger": "TRACEDATA", "kind": "variable", "details": "Metadata of the block", "contents": "%TRACEDATA%"},
		{ "trigger": "TRACEID", "kind": "variable", "details": "The id", "contents": "%TRACEID%"},
		{ "trigger": "TRACENAME", "kind": "variable", "details": "The name", "contents": "%TRACENAME%"},
		{ "trigger": "TRACESIDE", "kind": "variable", "details": "Side of the block", "contents": "%TRACESIDE%"},
		{ "trigger": "TRACETYPE", "kind": "variable", "details": "The type of the result", "contents": "%TRACETYPE%"},
		{ "trigger": "TRACEUUID", "kind": "variable", "details": "Returns the UUID of other players", "contents": "%TRACEUUID%"},
		{ "trigger": "TRACEX", "kind": "variable", "details": "X position", "contents": "%TRACEX%"},
		{ "trigger": "TRACEY", "kind": "variable", "details": "Y position", "contents": "%TRACEY%"},
		{ "trigger": "TRACEZ", "kind": "variable", "details": "Z position", "contents": "%TRACEZ%"},

	// MKB Default
		{ "trigger": "achievementget", "kind": "keyword", "details": "Displays a popup you get when completing an advancement with a custom message and optionally a custom item", "contents": "achievementget(${1:<text>},${2:[itemid]}:${3:[damage]});"},
		{ "trigger": "AMBIENTVOLUME", "kind": "variable", "details": "Volume level for Ambient/Environment", "contents": "%AMBIENTVOLUME%"},
		{ "trigger": "ARMOUR", "kind": "variable", "details": "Armour points (each icon equals 2 points)", "contents": "%ARMOUR%"},
		{ "trigger": "arraysize", "kind": "keyword", "details": "Stores the size of the specified array in #outvar", "contents": "arraysize(${1:<array>}[],#${2:[outvar]});"},
		{ "trigger": "assign", "kind": "keyword", "details": "Internal function", "contents": "<var> = <value>;"},
		{ "trigger": "ATTACKPOWER", "kind": "variable", "details": "Attack power", "contents": "%ATTACKPOWER%"},
		{ "trigger": "ATTACKSPEED", "kind": "variable", "details": "Attack speed", "contents": "%ATTACKSPEED%"},
		// { "trigger": "begin", "kind": "keyword", "details": "Enters multi-line mode, allows entry of a script over multiple lines terminated by END", "contents": "begin;"},
		{ "trigger": "bind", "kind": "keyword", "details": "Set the specified key binding to the specified key code", "contents": "bind(${1:<bind>},${2:<keycode>});"},
		{ "trigger": "bindgui", "kind": "keyword", "details": "Binds the specified custom screen to the slot specified", "contents": "bindgui(${1:<slot>},${2:<screen>});"},
		{ "trigger": "BIOME", "kind": "variable", "details": "Biome the Player is currently in", "contents": "%BIOME%"},
		{ "trigger": "BLOCKVOLUME", "kind": "variable", "details": "Volume level for Blocks", "contents": "%BLOCKVOLUME%"},
		{ "trigger": "BOOTSDAMAGE", "kind": "variable", "details": "Maximum uses of the Players boots", "contents": "%BOOTSDAMAGE%"},
		{ "trigger": "BOOTSDURABILITY", "kind": "variable", "details": "Durability of the Players boots", "contents": "%BOOTSDURABILITY%"},
		{ "trigger": "BOOTSID", "kind": "variable", "details": "ID of the Players boots", "contents": "%BOOTSID%"},
		{ "trigger": "BOOTSNAME", "kind": "variable", "details": "Displayname of the Players boots", "contents": "%BOOTSNAME%"},
		{ "trigger": "BOWCHARGE", "kind": "variable", "details": "Charge of bow", "contents": "%BOWCHARGE%"},
		{ "trigger": "break", "kind": "keyword", "details": "Interrupts exection of the innermost loop", "contents": "break;"},
		{ "trigger": "calcyawto", "kind": "keyword", "details": "Calculates the absolute yaw angle", "contents": "calcyawto(${1:<xpos>},${2:<zpos>},#${3:[yaw]},#${4:[dist}ance]);"},
		{ "trigger": "camera", "kind": "keyword", "details": "Set the current camera mode, call with no arguments to toggle modes", "contents": "camera(${1:[mode]});"},
		{ "trigger": "CAMERA", "kind": "variable", "details": "Current camera mode", "contents": "%CAMERA%"},
		{ "trigger": "CANFLY", "kind": "variable", "details": "Whether the Player can fly", "contents": "%CANFLY%"},
		{ "trigger": "CARDINALYAW", "kind": "variable", "details": "Yaw of the player relative to north (YAW + 180)", "contents": "%CARDINALYAW%"},
		// { "trigger": "cat", "kind": "keyword", "details": "Lists the contents of the specified file into the console window", "contents": "cat ${1:<file.txt>};"},
		{ "trigger": "CHAT", "kind": "variable", "details": "(onChat) Chat message with control codes", "contents": "%CHAT%"},
		{ "trigger": "CHATCLEAN", "kind": "variable", "details": "(onChat) Chat message without control codes", "contents": "%CHATCLEAN%"},
		{ "trigger": "chatfilter", "kind": "keyword", "details": "Enable or disable the chat filter", "contents": "chatfilter(${1:<enabled>});"},
		{ "trigger": "chatheight", "kind": "keyword", "details": "Set height of the Minecraft chat whilst ingame", "contents": "chatheight(${1:<value>},${2:[time]});"},
		{ "trigger": "chatheightfocused", "kind": "keyword", "details": "Set height of the Minecraft chat whilst in the chat GUI", "contents": "chatheightfocused(${1:<value>},${2:[time]});"},
		{ "trigger": "CHATJSON", "kind": "variable", "details": "(onBetterChat) Chat message in JSON", "contents": "%CHATMESSAGE%"},
		{ "trigger": "CHATMESSAGE", "kind": "variable", "details": "(onChat) The message part of an incoming chat line, could be wrong", "contents": "%CHATMESSAGE%"},
		{ "trigger": "chatopacity", "kind": "keyword", "details": "Set opacity of the Minecraft chat", "contents": "chatopacity(${1:<value>},${2:[time]});"},
		{ "trigger": "CHATPLAYER", "kind": "variable", "details": "(onChat) The player who send a chat line, could be wrong", "contents": "%CHATPLAYER%"},
		{ "trigger": "chatscale", "kind": "keyword", "details": "Set scale of the Minecraft chat", "contents": "chatscale(${1:<value>},${2:[time]});"},
		{ "trigger": "chatvisible", "kind": "keyword", "details": "Set visibility of minecraft chat", "contents": "chatvisible(${1:<value>});"},
		{ "trigger": "chatwidth", "kind": "keyword", "details": "Set width of the Minecraft chat", "contents": "chatwidth(${1:<value}>,${2:[time]});"},
		{ "trigger": "CHESTPLATEDAMAGE", "kind": "variable", "details": "Maximum uses of the Players chestplate", "contents": "%CHESTPLATEDAMAGE%"},
		{ "trigger": "CHESTPLATEDURABILITY", "kind": "variable", "details": "Durability of the Players chestplate", "contents": "%CHESTPLATEDURABILITY%"},
		{ "trigger": "CHESTPLATEID", "kind": "variable", "details": "ID of the Players chestplate", "contents": "%CHESTPLATEID%"},
		{ "trigger": "CHESTPLATENAME", "kind": "variable", "details": "Displayname of the Players chestplate", "contents": "%CHESTPLATENAME%"},
		{ "trigger": "CHUNKUPDATES", "kind": "variable", "details": "Amount of chunk updates", "contents": "%CHUNKUPDATES%"},
		{ "trigger": "clearchat", "kind": "keyword", "details": "Clears all messages from the chat window", "contents": "clearchat();"},
		{ "trigger": "clearcrafting", "kind": "keyword", "details": "Cancels any queued crafting jobs", "contents": "clearcrafting();"},
		// { "trigger": "cls", "kind": "keyword", "details": "Clears the console display", "contents": "cls;"},
		{ "trigger": "config", "kind": "keyword", "details": "Switch to the specified configuration", "contents": "config(${1:<configname>});"},
		{ "trigger": "CONFIG", "kind": "variable", "details": "Loaded config", "contents": "%CONFIG%"},
		{ "trigger": "CONTAINERSLOTS", "kind": "variable", "details": "Amount of slots in opened container", "contents": "%CONTAINERSLOTS%"},
		{ "trigger": "controls", "kind": "keyword", "annotation": "(controls iterator)", "details": "Iterates over all existing controls", "contents": "controls([layout][:type])"},
		{ "trigger": "CONTROLID", "kind": "variable", "annotation": "(controls iterator)" ,"details": "Internal id of the current control", "contents": "%CONTROLID%"},
		{ "trigger": "CONTROLNAME", "kind": "variable", "annotation": "(controls iterator)", "details": "The name set in the control under Control Name", "contents": "%CONTROLNAME%"},
		{ "trigger": "CONTROLTYPE", "kind": "variable", "annotation": "(controls iterator)" ,"details": "Type of the current control", "contents": "%CONTROLTYPE%"},
		{ "trigger": "COOLDOWN", "kind": "variable", "details": "Cooldown", "contents": "%COOLDOWN%"},
		{ "trigger": "craft", "kind": "keyword", "details": "Queues an auto-crafting request", "contents": "craft(${1:<item>}:${2:[damage]},${3:[amount]},${4:[throw]},${5:[verbose]});"},
		{ "trigger": "craftandwait", "kind": "keyword", "details": "Queues an auto-crafting request and waits", "contents": "craftandwait(${1:<item>}:${2:[damage]},${3:[amount]},${4:[throw]},${5:[verbose]});"},
		{ "trigger": "DATE", "kind": "variable", "details": "Current date in the format year-month-day", "contents": "%DATE%"},
		{ "trigger": "DATETIME", "kind": "variable", "details": "Current date and time in the format year-month-day hour:minute:second", "contents": "%DATETIME%"},
		{ "trigger": "DAY", "kind": "variable", "details": "Number of day", "contents": "%DAY%"},
		{ "trigger": "DAYTICKS", "kind": "variable", "details": "TICKS value modulo 24000 and shifted back 6000 so that 0 aligns with midnight ", "contents": "%DAYTICKS%"},
		{ "trigger": "DAYTIME", "kind": "variable", "details": "Ingame time in the format hh:mm", "contents": "%DAYTIME%"},
		{ "trigger": "dec", "kind": "keyword", "details": "Decrements the specified counter by 1 or by the specified amount", "contents": "dec(#${1:<var>},${2:[amount]});"},
		{ "trigger": "decode", "kind": "keyword", "details": "Converts an string from base64 back to an normal string", "contents": "decode(${1:<input>},${2:[&output]});"},
		{ "trigger": "DIFFICULTY", "kind": "variable", "details": "Difficulty of the world", "contents": "%DIFFICULTY%"},
		{ "trigger": "DIMENSION", "kind": "variable", "details": "Dimension the Player is in", "contents": "%DIMENSION%"},
		{ "trigger": "DIRECTION", "kind": "variable", "details": "Direction the Player is looking at, shortened to the first character", "contents": "%DIRECTION%"},
		{ "trigger": "disconnect", "kind": "keyword", "details": "Disconnects from the current game or server", "contents": "disconnect();"},
		{ "trigger": "DISPLAYHEIGHT", "kind": "variable", "details": "Height of the minecraft window", "contents": "%DISPLAYHEIGHT%"},
		{ "trigger": "DISPLAYNAME", "kind": "variable", "details": "Player's displayname", "contents": "%DISPLAYNAME%"},
		{ "trigger": "DISPLAYWIDTH", "kind": "variable", "details": "Width of the minecraft window", "contents": "%DISPLAYWIDTH%"},
		{ "trigger": "DURABILITY", "kind": "variable", "details": "Durability of the equipped item", "contents": "%DURABILITY%"},
		{ "trigger": "echo", "kind": "keyword", "details": "Sends the specified message to the server", "contents": "echo(${1:<text>});"},
		// { "trigger": "edit", "kind": "keyword", "details": "Opens an editor for the specified file", "contents": "edit ${1:[file.txt]};"},
		{ "trigger": "effects", "kind": "keyword", "annotation": "(effects iterator)", "details": "Iterates over all currently applied effects", "contents": "effects"},
		{ "trigger": "EFFECT", "kind": "variable", "annotation": "(effects iterator)", "details": "Internal string id of the effect", "contents": "%EFFECT%"},
		{ "trigger": "EFFECTID", "kind": "variable", "annotation": "(effects iterator)", "details": "Internal numeric id of the effect", "contents": "%EFFECTID%"},
		{ "trigger": "EFFECTNAME", "kind": "variable", "annotation": "(effects iterator)", "details": "Display name of the effect", "contents": "%EFFECTNAME%"},
		{ "trigger": "EFFECTPOWER", "kind": "variable", "annotation": "(effects iterator)", "details": "Power of the effect", "contents": "%EFFECTPOWER%"},
		{ "trigger": "EFFECTTIME", "kind": "variable", "annotation": "(effects iterator)", "details": "Remaining time of the effect in seconds", "contents": "%EFFECTTIME%"},
		{ "trigger": "enchantments", "kind": "keyword", "annotation": "(enchantments iterator)", "details": "Iterates over all enchantments on the equipped item", "contents": "enchantments"},
		{ "trigger": "ENCHANTMENT", "kind": "variable", "annotation": "(enchantments iterator)", "details": "Display name of the enchantment", "contents": "%ENCHANTMENT%"},
		{ "trigger": "ENCHANTMENTNAME", "kind": "variable", "annotation": "(enchantments iterator)", "details": "Only the name of the enchantment", "contents": "%ENCHANTMENTNAME%"},
		{ "trigger": "ENCHANTMENTPOWER", "kind": "variable", "annotation": "(enchantments iterator)", "details": "Power of the enchantment", "contents": "%ENCHANTMENTPOWER%"},
		{ "trigger": "encode", "kind": "keyword", "details": "Converts an string to base 64", "contents": "encode(${1:<input>},&${2:[output]});"},
		// { "trigger": "end", "kind": "keyword", "details": "Ends a multi-line script and executes the contents of the buffer", "contents": "end;"},
		{ "trigger": "env", "kind": "keyword", "annotation": "(env iterator)", "details": "Iterates over all available variables", "contents": "env"},
		{ "trigger": "VARNAME", "kind": "variable", "annotation": "(env iterator)", "details": "Contains the variable name", "contents": "%VARNAME%"},
		{ "trigger": "exec", "kind": "keyword", "details": "Creates a task by running the specified script file", "contents": "exec(${1:<file.txt>},${2:[taskname]},${3:[params]});"},
		// { "trigger": "exit", "kind": "keyword", "details": "Close the console window", "contents": "exit;"},
		// { "trigger": "expand", "kind": "variable", "contents": "?% <variable>;"},
		{ "trigger": "filter", "kind": "keyword", "details": "Indicate that this chat meesage should be filtered and terminate", "contents": "filter;"},
		{ "trigger": "FLYING", "kind": "variable", "details": "Whether the Player is flying", "contents": "%FLYING%"},
		{ "trigger": "fog", "kind": "keyword", "details": "Toggles render distance, or optionally specify render distance", "contents": "fog(${1:[value]});"},
		{ "trigger": "fov", "kind": "keyword", "details": "Sets the FOV angle in degrees, specifying time causes the value to change smoothly", "contents": "fov(${1:<value>},${2:[time]});"},
		{ "trigger": "FOV", "kind": "variable", "details": "Field of View", "contents": "%FOV%"},
		{ "trigger": "FPS", "kind": "variable", "details": "Frames per Second", "contents": "%FPS%"},
		{ "trigger": "GAMEMODE", "kind": "variable", "details": "Gamemode of the player as a string", "contents": "%GAMEMODE%"},
		{ "trigger": "gamma", "kind": "keyword", "details": "Sets the brightness value (percent), specifying time causes the value to change smoothly", "contents": "gamma(${1:<value>},${2:[time]});"},
		{ "trigger": "GAMMA", "kind": "variable", "details": "Brightness level", "contents": "%GAMMA%"},
		{ "trigger": "getid", "kind": "keyword", "details": "Gets the ID and data value of the block at the specified coordinates", "contents": "getid(${1:<x>},${2:<y>},${3:<z>},&${4:[idvar]},#${5:[datavar]},&${6:[variants]});"},
		{ "trigger": "getidrel", "kind": "keyword", "details": "Gets the ID and data value of the block at the specified coordinates relative to the player", "contents": "getidrel(${1:<dx>},${2:<dy>},${3:<dz>},&${4:[idvar]},#${5:[datavar]},&${6:[variants]});"},
		{ "trigger": "getiteminfo", "kind": "keyword", "details": "Gets the name and other info for the specified item id", "contents": "getiteminfo(${1:<item>}:${2:[damage]},&${3:[namevar]},#${4:[maxstacksize]},&${5:[type]},&${6:[dropid]},#${7:[maxdurability]});"},
		{ "trigger": "getproperty", "kind": "keyword", "details": "Returns the value of the specified property from the specified GUI control", "contents": "getproperty(${1:<control>},${2:<property>});"},
		{ "trigger": "getslot", "kind": "keyword", "details": "Gets the id of the slot containing an item matching the specified item id", "contents": "getslot(${1:<item>}:${2:[damage]},#${3:<slotid>},${4:[startfromslotid]});"},
		{ "trigger": "getslotitem", "kind": "keyword", "details": "Gets information about the item in the specified slot", "contents": "getslotitem(${1:<slotid>},&${2:<idvar>},#${3:[stacksizevar]},#${4:[datavar]});"},
		{ "trigger": "gui", "kind": "keyword", "details": "Opens the specified gui screen", "contents": "gui(${1:[name]});"},
		{ "trigger": "GUI", "kind": "variable", "details": "Name of the currently open GUI", "contents": "%GUI%"},
		{ "trigger": "HEALTH", "kind": "variable", "details": "Health points (each icon equals 2 points)", "contents": "%HEALTH%"},
		{ "trigger": "HELMDAMAGE", "kind": "variable", "details": "Maximum uses of the Players helm", "contents": "%HELMDAMAGE%"},
		{ "trigger": "HELMDURABILITY", "kind": "variable", "details": "Durability of the Players helm", "contents": "%HELMDURABILITY%"},
		{ "trigger": "HELMID", "kind": "variable", "details": "ID of the Players helm", "contents": "%HELMID%"},
		{ "trigger": "HELMNAME", "kind": "variable", "details": "Displayname of the Players helm", "contents": "%HELMNAME%"},
		// { "trigger": "help", "kind": "keyword", "details": "Displays help on the specified console command", "contents": "help ${1:[command name]};"},
		{ "trigger": "HOSTILEVOLUME", "kind": "variable", "details": "Volume level for Hostile Creatures", "contents": "%HOSTILEVOLUME%"},
		{ "trigger": "HUNGER", "kind": "variable", "details": "Hunger points (each icon equals 2 points)", "contents": "%HUNGER%"},
		{ "trigger": "iif", "kind": "keyword", "details": "Inline IF statement", "contents": "iif(${1:<condition>},${2:<truetext>},${3:[falsetext]});"},
		{ "trigger": "import", "kind": "keyword", "details": "Overlay the specified configuration", "contents": "import(${1:<configname>});"},
		{ "trigger": "inc", "kind": "keyword", "details": "Increments the specified counter by 1 or by the specified amount", "contents": "inc(#${1:<var>},${2:[amount]});"},
		{ "trigger": "indexof", "kind": "keyword", "details": "Gets the first index of a item", "contents": "indexof(${1:<array>}[],#${2:<outvar>},${3:<searchfor>},${4:[casesensitiv]});"},
		{ "trigger": "inventorydown", "kind": "keyword", "details": "Scrolls the specified number of slots down through the hotbar", "contents": "inventorydown(${1:[amount]});"},
		{ "trigger": "inventoryup", "kind": "keyword", "details": "Scrolls the specified number of slots up through the hotbar", "contents": "inventoryup(${1:[amount]});"},
		{ "trigger": "INVSLOT", "kind": "variable", "details": "Selected inventory slot", "contents": "%INVSLOT%"},
		{ "trigger": "isrunning", "kind": "keyword", "details": "Returns whether the specified macro is currently running", "contents": "isrunning(${1:<macro>});"},
		{ "trigger": "ITEM", "kind": "variable", "details": "ID of the equipped item", "contents": "%ITEM%"},
		{ "trigger": "ITEMCODE", "kind": "variable", "details": "Internal code for the equipped item", "contents": "%ITEMCODE%"},
		{ "trigger": "ITEMDAMAGE", "kind": "variable", "details": "Maximum uses of the equipped item", "contents": "%ITEMDAMAGE%"},
		{ "trigger": "itemid", "kind": "keyword", "details": "Gets the legacy (numeric) ID for the specified item", "contents": "itemid(${1:<item>});"},
		{ "trigger": "ITEMIDDMG", "kind": "variable", "details": "ID and durability seperated by a colon of the equipped item", "contents": "%ITEMIDDMG%"},
		{ "trigger": "ITEMNAME", "kind": "variable", "details": "Displayname for the equipped item", "contents": "%ITEMNAME%"},
		{ "trigger": "itemname", "kind": "keyword", "details": "Get the item descriptor for a legacy (numeric) item ID", "contents": "itemname(${1:<id>});"},
		{ "trigger": "ITEMUSEPCT", "kind": "variable", "details": "Previous value as percent of total useage time", "contents": "%ITEMUSEPCT%"},
		{ "trigger": "ITEMUSETICKS ", "kind": "variable", "details": "All usable items increase this value once per tick", "contents": "%ITEMUSETICKS%"},
		{ "trigger": "join", "kind": "keyword", "details": "Combines values inside array with glue", "contents": "join(${1:<glue>},${2:<array>}[],&${3:[output]});"},
		{ "trigger": "JOINEDPLAYER", "kind": "variable", "details": "(onPlayerJoined) Player name of the newly joined player", "contents": "%JOINEDPLAYER%"},
		{ "trigger": "key", "kind": "keyword", "details": "Activates the specified key binding for 1 tick", "contents": "key(${1:<bind>});"},
	
		{ "trigger": "keydown", "kind": "keyword", "details": "Sets the specified key binding state to pressed, only works with pressable bindings", "contents": "keydown(${1:<bind>});"},
		{ "trigger": "KEYID", "kind": "variable", "details": "Key ID of the key that started this script", "contents": "%KEYID%"},
		{ "trigger": "KEYNAME", "kind": "variable", "details": "Keyname of the key that started this script", "contents": "%KEYNAME%"},
		{ "trigger": "keyup", "kind": "keyword", "details": "Sets the specified key binding state to unpressed, only works with pressable bindings", "contents": "keyup(${1:<bind>});"},
		// { "trigger": "kill", "kind": "keyword", "details": "Terminate a running macro by ID, use TASKS to list available tasks", "contents": "kill ${1:[taskid]};"},
		{ "trigger": "lcase", "kind": "keyword", "details": "Converts the input string to lower case and stores it in output", "contents": "lcase(${1:<input>},&${2:[output]});"},
		{ "trigger": "LEGGINGSDAMAGE", "kind": "variable", "details": "Maximum uses of the Players leggings", "contents": "%LEGGINGSDAMAGE%"},
		{ "trigger": "LEGGINGSDURABILITY", "kind": "variable", "details": "Durability of the Players leggings", "contents": "%LEGGINGSDURABILITY%"},
		{ "trigger": "LEGGINGSID", "kind": "variable", "details": "ID of the Players leggings", "contents": "%LEGGINGSID%"},
		{ "trigger": "LEGGINGSNAME", "kind": "variable", "details": "Displayname of the Players leggings", "contents": "%LEGGINGSNAME%"},
		{ "trigger": "LEVEL", "kind": "variable", "details": "XP level", "contents": "%LEVEL%"},
		{ "trigger": "LIGHT", "kind": "variable", "details": "Light level at current location", "contents": "%LIGHT%"},
		// { "trigger": "list", "kind": "keyword", "details": "List available macro files in the macros directory", "contents": "list;"},
		// { "trigger": "live", "kind": "keyword", "details": "Enables or disables live mode", "contents": "live ${1:[status]};"},
		{ "trigger": "LOCALDIFFICULTY", "kind": "variable", "details": "Local difficulty of the world", "contents": "%LOCALDIFFICULTY%"},
		{ "trigger": "log", "kind": "keyword", "details": "Shows the specified text only on the client-side in the chat window", "contents": "log(${1:<text>});"},
		{ "trigger": "lograw", "kind": "keyword", "details": "Similar to minecraft tellraw command", "contents": "lograw(${1:<json>});"},
		{ "trigger": "logto", "kind": "keyword", "details": "Outputs the specified text into the specified target", "contents": "logto(${1:<target>},${2:<text>});"},
		{ "trigger": "look", "kind": "keyword", "details": "Faces the player in the specified direction", "contents": "look(${1:<yaw>},${2:[pitch]},${3:[time]});"},
		{ "trigger": "looks", "kind": "keyword", "details": "Smoothly turnes the player to the specified direction", "contents": "looks(${1:<yaw>},${2:[pitch]},${3:[time]});"},
		{ "trigger": "running", "kind": "keyword", "annotation": "(running iterator)", "details": "Iterates over all currently running macros", "contents": "running"},
		{ "trigger": "MACROID", "kind": "variable", "annotation": "(running iterator)", "details": "Internal id of the macro", "contents": "%MACROID%"},
		{ "trigger": "MACRONAME", "kind": "variable", "annotation": "(running iterator)", "details": "Display name of the macro", "contents": "%MACRONAME%"},
		{ "trigger": "MACROTIME", "kind": "variable", "annotation": "(running iterator)", "details": "The time the macro is already running in seconds", "contents": "%MACROTIME%"},
		{ "trigger": "MAINHANDCOOLDOWN", "kind": "variable", "details": "mainhand cooldown", "contents": "%MAINHANDCOOLDOWN%"},
		{ "trigger": "MAINHANDDURABILITY", "kind": "variable", "details": "Durability of the mainhand item", "contents": "%MAINHANDDURABILITY%"},
		{ "trigger": "MAINHANDITEM", "kind": "variable", "details": "ID of the mainhand item", "contents": "%MAINHANDITEM%"},
		{ "trigger": "MAINHANDITEMCODE", "kind": "variable", "details": "Internal code for the mainhand item", "contents": "%MAINHANDITEMCODE%"},
		{ "trigger": "MAINHANDITEMDAMAGE", "kind": "variable", "details": "Maximum uses of the mainhand item", "contents": "%MAINHANDITEMDAMAGE%"},
		{ "trigger": "MAINHANDITEMIDDMG", "kind": "variable", "details": "ID and durability seperated by a colon of the mainhand item", "contents": "%MAINHANDITEMIDDMG%"},
		{ "trigger": "MAINHANDITEMNAME", "kind": "variable", "details": "Displayname for the mainhand item", "contents": "%MAINHANDITEMNAME%"},
		{ "trigger": "MAINHANDSTACKSIZE", "kind": "variable", "details": "Stacksize of the mainhand item", "contents": "%MAINHANDSTACKSIZE%"},
		{ "trigger": "match", "kind": "keyword", "details": "Runs a regular expression match on the subject", "contents": "match(${1:<subject>},${2:<pattern>},&${3:[target]},${4:[group]},${5:[default]});"},
		{ "trigger": "MAXPLAYERS", "kind": "variable", "details": "Amount of players the server can hold", "contents": "%MAXPLAYERS%"},
		{ "trigger": "MODE", "kind": "variable", "details": "Gamemode of the player as a number", "contents": "%MODE%"},
		{ "trigger": "modify", "kind": "keyword", "details": "Set new content for this chat message", "contents": "modify(${1:<newmessage>});"},
		{ "trigger": "MUSIC", "kind": "variable", "details": "Volume level for Music", "contents": "%MUSIC%"},
		{ "trigger": "music", "kind": "keyword", "details": "Sets the music volume, specifying time causes the value to change smoothly", "contents": "music(${1:<value>},${2:[time]});"},
		{ "trigger": "NEUTRALVOLUME", "kind": "variable", "details": "Volume level for Friendly Creatures", "contents": "%NEUTRALVOLUME%"},
		{ "trigger": "next", "kind": "keyword", "details": "Completes a for or foreach loop", "contents": "next;"},
		{ "trigger": "OFFHANDCOOLDOWN", "kind": "variable", "details": "Offhand cooldown", "contents": "%OFFHANDCOOLDOWN%"},
		{ "trigger": "OFFHANDDURABILITY", "kind": "variable", "details": "Durability of the offhand item", "contents": "%OFFHANDDURABILITY%"},
		{ "trigger": "OFFHANDITEM", "kind": "variable", "details": "ID of the offhand item", "contents": "%OFFHANDITEM%"},
		{ "trigger": "OFFHANDITEMCODE", "kind": "variable", "details": "Internal code for the offhand item", "contents": "%OFFHANDITEMCODE%"},
		{ "trigger": "OFFHANDITEMDAMAGE", "kind": "variable", "details": "Maximum uses of the offhand item", "contents": "%OFFHANDITEMDAMAGE%"},
		{ "trigger": "OFFHANDITEMIDDMG", "kind": "variable", "details": "ID and durability seperated by a colon of the offhand item", "contents": "%OFFHANDITEMIDDMG%"},
		{ "trigger": "OFFHANDITEMNAME", "kind": "variable", "details": "Displayname for the offhand item", "contents": "%OFFHANDITEMNAME%"},
		{ "trigger": "OFFHANDSTACKSIZE", "kind": "variable", "details": "Stacksize of the offhand item", "contents": "%OFFHANDSTACKSIZE%"},
		{ "trigger": "OLDINVSLOT", "kind": "variable", "details": "(onInventorySlotChange) Selected inventory slot before it was changed", "contents": "%OLDINVSLOT%"},
		{ "trigger": "ONLINEPLAYERS", "kind": "variable", "details": "Amount of players currently on the server", "contents": "%ONLINEPLAYERS%"},
		{ "trigger": "OXYGEN", "kind": "variable", "details": "Air Level (from 0 to 300)", "contents": "%OXYGEN%"},
		{ "trigger": "pass", "kind": "keyword", "details": "Indicate that this chat message should PASS the filter and terminate", "contents": "pass;"},
		{ "trigger": "pick", "kind": "keyword", "details": "Selects the specified item id if it is on the hotbar", "contents": "pick(${1:<item>}:${2:[damage]},${3:<item>}:${4:[damage]}${5:,...});"},
		{ "trigger": "PICKUPAMOUNT", "kind": "variable", "details": "(onPickupItem) Amount of items picked up", "contents": "%PICKUPAMOUNT%"},
		{ "trigger": "PICKUPDATA", "kind": "variable", "details": "(onPickupItem) Metadata of the picked up item", "contents": "%PICKUPDATA%"},
		{ "trigger": "PICKUPID", "kind": "variable", "details": "(onPickupItem) Item id of the picked up item", "contents": "%PICKUPID%"},
		{ "trigger": "PICKUPITEM", "kind": "variable", "details": "(onPickupItem) Display name of the picked up item", "contents": "%PICKUPITEM%"},
		{ "trigger": "PITCH", "kind": "variable", "details": "Pitch of the player", "contents": "%PITCH%"},
		{ "trigger": "placesign", "kind": "keyword", "details": "Places a sign in the world with the specified text", "contents": "placesign(${1:[line1]},${2:[line2]},${3:[line3]},${4:[line4]},${5:[showgui]});"},
		{ "trigger": "PLAYER", "kind": "variable", "details": "Player's name", "contents": "%PLAYER%"},
		{ "trigger": "players", "kind": "keyword", "annotation": "(players iterator)", "details": "Iterates over all online players", "contents": "players"},
		{ "trigger": "PLAYERNAME", "kind": "variable", "annotation": "(players iterator)", "details": "The current player", "contents": "%PLAYERNAME%"},
		{ "trigger": "PLAYERVOLUME", "kind": "variable", "details": "Volume level for Players", "contents": "%PLAYERVOLUME%"},
		{ "trigger": "playsound", "kind": "keyword", "details": "Plays the specified sound", "contents": "playsound(${1:<sound>},${2:[volume]});"},
		{ "trigger": "pop", "kind": "keyword", "details": "Removes the last entry from the end of array and stores it in outvar", "contents": "pop(${1:<array>}[],${2:<outvar>});"},
		{ "trigger": "popupmessage", "kind": "keyword", "details": "Display a message in the area above the hotbar", "contents": "popupmessage(${1:<message>},${2:[animate]});"},
		{ "trigger": "press", "kind": "keyword", "details": "Injects the specified key event directly into the keyboard buffer for 1 tick", "contents": "press(${1:<lwjgl_name>},${2:[deep]});"},
		{ "trigger": "prompt", "kind": "keyword", "details": "Displays a prompt by parsing the params in paramstring", "contents": "prompt(&${1:<target>},${2:<paramstring>},${3:[prompt]},${4:[override]},${5:[default]});"},
		{ "trigger": "properties", "kind": "keyword", "annotation": "(properties iterator)", "details": "Iterates over all properties of the block you are looking at", "contents": "properties"},
		{ "trigger": "PROPNAME", "kind": "variable", "annotation": "(properties iterator)", "details": "The name of the current property", "contents": "%PROPNAME%"},
		{ "trigger": "PROPVALUE", "kind": "variable", "annotation": "(properties iterator)", "details": "The value of the current property", "contents": "%PROPVALUE%"},
		{ "trigger": "push", "kind": "keyword", "details": "Appends value to the end of array[]", "contents": "push(${1:<array>}[],${2:<value>});"},
		{ "trigger": "put", "kind": "keyword", "details": "Inserts value at the first empty point in array[]", "contents": "put(${1:<array>}[],${2:<value>});"},
		{ "trigger": "RAIN", "kind": "variable", "details": "Rain level", "contents": "%RAIN%"},
		{ "trigger": "random", "kind": "keyword", "details": "Assigns a random number between min and max to target", "contents": "random(#${1:<target>},${2:[max]},${3:[min])};"},
		{ "trigger": "REASON", "kind": "variable", "details": "(onAutoCraftingComplete) The reason why the crafting was completed or aborted", "contents": "%REASON%"},
		{ "trigger": "RECORDVOLUME", "kind": "variable", "details": "Volume level for Jukebox/Noteblocks", "contents": "%RECORDVOLUME%"},
		{ "trigger": "regexreplace", "kind": "keyword", "details": "Replace all matches of pattern with replace in &subject", "contents": "regexreplace(&${1:<subject>},${2:<pattern>},${3:[replace]});"},
		{ "trigger": "reloadresources", "kind": "keyword", "details": "Reloads resource packs, same as pressing F3 + T", "contents": "reloadresources;"},
		{ "trigger": "repl", "kind": "keyword", "details": "Access the REPL interface", "contents": "repl;"},
		{ "trigger": "replace", "kind": "keyword", "details": "Replace all occurrences of search with replace in &subject", "contents": "replace(&${1:<subject>},${2:<search>},${3:[replace]});"},
		// { "trigger": "resourcepack", "kind": "keyword", "details": "Sets the resourcepack", "contents": "resourcepack([pattern]);"},
		{ "trigger": "resourcepacks", "kind": "keyword", "details": "Sets the resource pack stack to the order matching the specified patterns", "contents": "resourcepacks(${1:[pattern]},${2:[pattern...]});"},
		{ "trigger": "RESOURCEPACKS[]", "kind": "variable", "details": "Array of selected resource packs", "contents": "%RESOURCEPACKS[]%"},
		{ "trigger": "respawn", "kind": "keyword", "details": "Respawns the player if you are dead", "contents": "respawn();"},
		// { "trigger": "rm", "kind": "keyword", "details": "Removes (deletes) the specified file", "contents": "rm ${1:<file.txt>};"},
		// { "trigger": "run", "kind": "keyword", "details": "Runs the specified script synchronously", "contents": "run ${1:<file.txt>} ${2:[arg1]} ${3:[arg2]};"},
		{ "trigger": "SATURATION", "kind": "variable", "details": "Saturation level (normally hidden from the Player)", "contents": "%SATURATION%"},
		// { "trigger": "say", "kind": "keyword", "details": "Sends the specified message as chat or remotely", "contents": "say ${1:<message>};"},
		{ "trigger": "SCREEN", "kind": "variable", "details": "Name of the current custom GUI", "contents": "%SCREEN%"},
		{ "trigger": "SCREENNAME", "kind": "variable", "details": "Display name of the current custom GUI", "contents": "%SCREENNAME%"},
		{ "trigger": "SEED", "kind": "variable", "details": "Seed of the world (only available in SP)", "contents": "%SEED%"},
		{ "trigger": "selectchannel", "kind": "keyword", "details": "Selects channel", "contents": "selectchannel(${1:<channel>});"},
		{ "trigger": "sendmessage", "kind": "keyword", "details": "Sends a message", "contents": "sendmessage(${1:[params]});"},
		{ "trigger": "SENSITIVITY", "kind": "variable", "details": "Sensitivity", "contents": "%SENSITIVITY%"},
		{ "trigger": "sensitivity", "kind": "keyword", "details": "Sets the mouse sensitivity, specifying time causes the value to change smoothly", "contents": "sensitivity(${1:<value>},${2:[time]});"},
		{ "trigger": "SERVER", "kind": "variable", "details": "IP of the server", "contents": "%SERVER%"},
		{ "trigger": "SERVERMOTD", "kind": "variable", "details": "Motto of the day of the server", "contents": "%SERVERMOTD%"},
		{ "trigger": "SERVERNAME", "kind": "variable", "details": "Name of the server", "contents": "%SERVERNAME%"},
		{ "trigger": "set", "kind": "keyword", "details": "Sets the value of target to value", "contents": "set(${1:<target>},${2:[value]});"},
		{ "trigger": "setlabel", "kind": "keyword", "details": "Sets the text (and optionally binding) of the specified label", "contents": "setlabel(${1:<labelname>},${2:<text>},${3:[binding]});"},
		{ "trigger": "setproperty", "kind": "keyword", "details": "Sets the value of the specified property on the specified GUI control", "contents": "setproperty(${1:<control>},${2:<property>},${3:<value>});"},
		{ "trigger": "setres", "kind": "keyword", "details": "Sets the size of the minecraft game window", "contents": "setres(${1:<width>},${2:<height>});"},
		{ "trigger": "setslotitem", "kind": "keyword", "details": "Creative mode only, set the contents of a hot bar slot", "contents": "setslotitem(${1:<item>}:${2:[damage]},${3:[slot]},${4:[amount]});"},
		{ "trigger": "SHADERGROUP", "kind": "variable", "details": "Selected shader", "contents": "%SHADERGROUP%"},
		{ "trigger": "shadergroup", "kind": "keyword", "details": "Sets the active shader group to the shader matching path", "contents": "shadergroup(${1:[path]});"},
		{ "trigger": "SHADERGROUPS[]", "kind": "variable", "details": "Array of available shaders", "contents": "%SHADERGROUPS[]%"},
		{ "trigger": "showgui", "kind": "keyword", "details": "Show a custom gui screen, creates it if it doesn't exist", "contents": "showgui(${1:<screen>},${2:[esc_screen]},${3:[macro_keys]});"},
		// { "trigger": "shutdown", "kind": "keyword", "details": "Shut down the minecraft client", "contents": "shutdown;"},
		{ "trigger": "SIGNTEXT[]", "kind": "variable", "details": "Array of lines on a sign the Player is looking at", "contents": "%SIGNTEXT[]%"},
		{ "trigger": "slot", "kind": "keyword", "details": "Selects the specified slot on the hot bar", "contents": "slot(${1:<slot>});"},
		{ "trigger": "slotclick", "kind": "keyword", "details": "Simulates clicking on the specified slot in the current GUI", "contents": "slotclick(${1:<slot>},${2:[button]},${3:[shift]});"},
		{ "trigger": "SOUND", "kind": "variable", "details": "Master Volume level", "contents": "%SOUND%"},
		{ "trigger": "split", "kind": "keyword", "details": "Splits the supplied source string on every delimiter into output[]", "contents": "split(${1:<delimiter>},${2:<source>},${3:[output]}[]);"},
		{ "trigger": "sprint", "kind": "keyword", "details": "Sets the player state to sprinting if sufficient stamina (food)", "contents": "sprint();"},
		{ "trigger": "sqrt", "kind": "keyword", "details": "Calculate the rounded square root of value and store it in #outvar", "contents": "sqrt(${1:<value>},#${2:[outvar]});"},
		{ "trigger": "STACKSIZE", "kind": "variable", "details": "Stack size of the equipped item", "contents": "%STACKSIZE%"},
		{ "trigger": "stop", "kind": "keyword", "details": "Stops the current macro, or macros matching the specified ID", "contents": "stop(${1:[id]});"},
		{ "trigger": "store", "kind": "keyword", "details": "Stores a value into one of the predefined parameter lists", "contents": "store(${1:<type>},${2:[name]});"},
		{ "trigger": "storeover", "kind": "keyword", "details": "Stores a value into one of the predefined parameter lists", "contents": "storeover(${1:<type>},${2:[name]});"},
		{ "trigger": "strip", "kind": "keyword", "details": "Strips all formatting codes from the specified text and assigns the result to &target", "contents": "strip(&${1:<target>},${2:<text>});"},
		// { "trigger": "tasks", "kind": "keyword", "details": "List currently executing tasks", "contents": "tasks;"},
		// { "trigger": "texturepack", "kind": "variable", "contents": "texturepack${1:([pattern]});"},
		// { "trigger": "TEXTUREPACK", "kind": "variable", "contents": "%TEXTUREPACK%"},
		{ "trigger": "TICKS", "kind": "variable", "details": "current world time value (which will be a static number if doDayNightCycle game rule is false)", "contents": "%TICKS%"},
		{ "trigger": "tileid", "kind": "keyword", "details": "Gets the legacy (numeric) ID for the specified tile", "contents": "tileid(${1:<item>});"},
		{ "trigger": "tilename", "kind": "keyword", "details": "Get the descriptor for a legacy (numeric) tile ID", "contents": "tilename(${1:<id>});"},
		{ "trigger": "time", "kind": "keyword", "details": "Stores the current time and date into &target, optionally using format specified", "contents": "time(&${1:<target>},${2:[format]});"},
		{ "trigger": "TIME", "kind": "variable", "details": "Current time in the format hour:minute:second", "contents": "%TIME%"},
		{ "trigger": "TIMESTAMP", "kind": "variable", "details": "UNIX Timestamp", "contents": "%TIMESTAMP%"},
		{ "trigger": "title", "kind": "keyword", "details": "Displays the specified custom title", "contents": "title(${1:[title]},${2:[subtitle]},${3:[inticks]},${4:[showticks]},${5:[outticks]});"},
		{ "trigger": "toast", "kind": "keyword", "details": "Displays an user-defined toast", "contents": "toast(${1:[type]},${2:[icon]},${3:[text1]},${4:[text2]},${5:[ticks]});"},
		{ "trigger": "toggle", "kind": "keyword", "details": "Toggles the specified boolean flag value", "contents": "toggle(${1:[flag]});"},
		{ "trigger": "togglekey", "kind": "keyword", "details": "Toggles the pressed state of the specified key binding, only works with pressable bindings", "contents": "togglekey(${1:<bind>});"},
		{ "trigger": "TOTALTICKS", "kind": "variable", "details": "current total world time (which increases all the time regardless of the gamerule doDayNightCycle)", "contents": "%TOTALTICKS%"},
		{ "trigger": "TOTALXP", "kind": "variable", "details": "Total amount of experience points", "contents": "%TOTALXP%"},

		{ "trigger": "type", "kind": "keyword", "details": "Injects the specified key sequence directly into the keyboard buffer at a rate of 1 key per tick", "contents": "type(${1:<text>});"},
		{ "trigger": "ucase", "kind": "keyword", "details": "Converts the input string to upper case and stores it in output", "contents": "ucase(${1:<input>},&${2:[output]});"},
		{ "trigger": "unimport", "kind": "keyword", "details": "Remove the specified configuration overlay if active", "contents": "unimport();"},
		{ "trigger": "UNIQUEID", "kind": "variable", "details": "Returns a new UUID everytime it is accessed", "contents": "%UNIQUEID%"},
		{ "trigger": "unset", "kind": "keyword", "details": "Un-sets the specified flag variable", "contents": "unset(${1:<flag>});"},
		{ "trigger": "unsprint", "kind": "keyword", "details": "Sets the player state to not sprinting", "contents": "unsprint();"},
		{ "trigger": "UUID", "kind": "variable", "details": "UUID of the Player", "contents": "%UUID%"},
		{ "trigger": "VEHICLE", "kind": "variable", "details": "Vehicle type", "contents": "%VEHICLE%"},
		{ "trigger": "VEHICLEHEALTH", "kind": "variable", "details": "Vehicle health", "contents": "%VEHICLEHEALTH%"},
		// { "trigger": "version", "kind": "keyword", "details": "Displays current version", "contents": "version;"},
		{ "trigger": "volume", "kind": "keyword", "details": "Sets the sound volume for the specified category", "contents": "volume(${1:<value>},${2:[category]});"},
		{ "trigger": "wait", "kind": "keyword", "details": "Pauses the script for the time specified", "contents": "wait(${1:<time>});"},
		{ "trigger": "walkto", "kind": "keyword", "details": "Was never offically in the mod", "contents": "walkto(${1:<x>},${2:<y>},${3:<z>},${4:[speed]},${5:[radius]});"},
		{ "trigger": "WEATHERVOLUME", "kind": "variable", "details": "Volume level for Weather", "contents": "%WEATHERVOLUME%"},
		// { "trigger": "whoami", "kind": "keyword", "details": "Displays current user name", "contents": "whoami;"},
		{ "trigger": "XP", "kind": "variable", "details": "Current amount of experience points", "contents": "%XP%"},
		{ "trigger": "XPOS", "kind": "variable", "details": "Position in X direction", "contents": "%XPOS%"},
		{ "trigger": "XPOSF", "kind": "variable", "details": "The position in X direction with three decimal places after the comma as a string", "contents": "%XPOSF%"},
		{ "trigger": "YAW", "kind": "variable", "details": "Yaw of the player", "contents": "%YAW%"},
		{ "trigger": "YPOS", "kind": "variable", "details": "Position in Y direction", "contents": "%YPOS%"},
		{ "trigger": "YPOSF", "kind": "variable", "details": "The position in Y direction with three decimal places after the comma as a string", "contents": "%YPOSF%"},
		{ "trigger": "ZPOS", "kind": "variable", "details": "Position in Z direction", "contents": "%ZPOS%"},
		{ "trigger": "ZPOSF", "kind": "variable", "details": "The position in Z direction with three decimal places after the comma as a string", "contents": "%ZPOSF%"},
	]
}